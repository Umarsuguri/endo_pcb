
endo_pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071f8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800745c  0800745c  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800745c  0800745c  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800745c  0800745c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800745c  0800745c  0001745c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08007464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ae4  20000098  080074fc  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003b7c  080074fc  00023b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001475e  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000326f  00000000  00000000  0003481f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00037a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  000389d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e59  00000000  00000000  000397d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ed4  00000000  00000000  00052631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bae7  00000000  00000000  00065505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0fec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004158  00000000  00000000  000f103c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	080072f0 	.word	0x080072f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	080072f0 	.word	0x080072f0

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_DMA_Init+0x48>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <MX_DMA_Init+0x48>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_DMA_Init+0x48>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2105      	movs	r1, #5
 800084e:	200e      	movs	r0, #14
 8000850:	f001 f927 	bl	8001aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000854:	200e      	movs	r0, #14
 8000856:	f001 f940 	bl	8001ada <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2105      	movs	r1, #5
 800085e:	200f      	movs	r0, #15
 8000860:	f001 f91f 	bl	8001aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000864:	200f      	movs	r0, #15
 8000866:	f001 f938 	bl	8001ada <HAL_NVIC_EnableIRQ>

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_UART_RxCpltCallback>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(receivedHandle, 0x01);
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <HAL_UART_RxCpltCallback+0x1c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f003 fcdc 	bl	8004244 <osEventFlagsSet>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000204c 	.word	0x2000204c

08000898 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	//osEventFlagsSet(receivedHandle, 0x01);
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
	...

080008ac <f_zero>:

void f_zero()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	pos_f=32;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <f_zero+0x4c>)
 80008b2:	2220      	movs	r2, #32
 80008b4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(M2R_GPIO_Port,M2R_Pin,GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2108      	movs	r1, #8
 80008ba:	4810      	ldr	r0, [pc, #64]	; (80008fc <f_zero+0x50>)
 80008bc:	f001 fd6f 	bl	800239e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2110      	movs	r1, #16
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <f_zero+0x50>)
 80008c6:	f001 fd6a 	bl	800239e <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(END1_GPIO_Port, END1_Pin) !=  GPIO_PIN_RESET);
 80008ca:	bf00      	nop
 80008cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d0:	480a      	ldr	r0, [pc, #40]	; (80008fc <f_zero+0x50>)
 80008d2:	f001 fd4d 	bl	8002370 <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f7      	bne.n	80008cc <f_zero+0x20>
	HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2110      	movs	r1, #16
 80008e0:	4806      	ldr	r0, [pc, #24]	; (80008fc <f_zero+0x50>)
 80008e2:	f001 fd5c 	bl	800239e <HAL_GPIO_WritePin>
	osDelay(50);
 80008e6:	2032      	movs	r0, #50	; 0x32
 80008e8:	f003 fc2c 	bl	8004144 <osDelay>
	pos_f=0;
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <f_zero+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000f3 	.word	0x200000f3
 80008fc:	40010800 	.word	0x40010800

08000900 <z_zero>:

void z_zero()
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	pos_z=48;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <z_zero+0x70>)
 8000906:	2230      	movs	r2, #48	; 0x30
 8000908:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(M1F_GPIO_Port,M1F_Pin,GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2102      	movs	r1, #2
 800090e:	4819      	ldr	r0, [pc, #100]	; (8000974 <z_zero+0x74>)
 8000910:	f001 fd45 	bl	800239e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1R_GPIO_Port,M1R_Pin,GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	4816      	ldr	r0, [pc, #88]	; (8000974 <z_zero+0x74>)
 800091a:	f001 fd40 	bl	800239e <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(END2_GPIO_Port, END2_Pin) !=  GPIO_PIN_RESET);
 800091e:	bf00      	nop
 8000920:	2110      	movs	r1, #16
 8000922:	4814      	ldr	r0, [pc, #80]	; (8000974 <z_zero+0x74>)
 8000924:	f001 fd24 	bl	8002370 <HAL_GPIO_ReadPin>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1f8      	bne.n	8000920 <z_zero+0x20>
	HAL_GPIO_WritePin(M1R_GPIO_Port,M1R_Pin,GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2101      	movs	r1, #1
 8000932:	4810      	ldr	r0, [pc, #64]	; (8000974 <z_zero+0x74>)
 8000934:	f001 fd33 	bl	800239e <HAL_GPIO_WritePin>
	osDelay(50);
 8000938:	2032      	movs	r0, #50	; 0x32
 800093a:	f003 fc03 	bl	8004144 <osDelay>
	pos_z=0;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <z_zero+0x70>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
	dir_z = 1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <z_zero+0x78>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(M1F_GPIO_Port,M1F_Pin,GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	2102      	movs	r1, #2
 800094e:	4809      	ldr	r0, [pc, #36]	; (8000974 <z_zero+0x74>)
 8000950:	f001 fd25 	bl	800239e <HAL_GPIO_WritePin>
	while(pos_z <5);
 8000954:	bf00      	nop
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <z_zero+0x70>)
 8000958:	f993 3000 	ldrsb.w	r3, [r3]
 800095c:	2b04      	cmp	r3, #4
 800095e:	ddfa      	ble.n	8000956 <z_zero+0x56>
	//osDelay(120);
	HAL_GPIO_WritePin(M1F_GPIO_Port,M1F_Pin,GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2102      	movs	r1, #2
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <z_zero+0x74>)
 8000966:	f001 fd1a 	bl	800239e <HAL_GPIO_WritePin>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000f4 	.word	0x200000f4
 8000974:	40010c00 	.word	0x40010c00
 8000978:	200000f6 	.word	0x200000f6

0800097c <stop_f>:
void stop_f()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

		HAL_GPIO_WritePin(M2R_GPIO_Port,M2R_Pin,GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2108      	movs	r1, #8
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <stop_f+0x38>)
 8000986:	f001 fd0a 	bl	800239e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	2110      	movs	r1, #16
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <stop_f+0x38>)
 8000990:	f001 fd05 	bl	800239e <HAL_GPIO_WritePin>
		osDelay(2);
 8000994:	2002      	movs	r0, #2
 8000996:	f003 fbd5 	bl	8004144 <osDelay>
		HAL_GPIO_WritePin(M2R_GPIO_Port,M2R_Pin,GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2108      	movs	r1, #8
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <stop_f+0x38>)
 80009a0:	f001 fcfd 	bl	800239e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2110      	movs	r1, #16
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <stop_f+0x38>)
 80009aa:	f001 fcf8 	bl	800239e <HAL_GPIO_WritePin>
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40010800 	.word	0x40010800

080009b8 <autofocus>:

void autofocus()
{
 80009b8:	b5b0      	push	{r4, r5, r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
	i=0;
 80009be:	4bac      	ldr	r3, [pc, #688]	; (8000c70 <autofocus+0x2b8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	801a      	strh	r2, [r3, #0]
	old_contrast = contrast;
 80009c4:	4bab      	ldr	r3, [pc, #684]	; (8000c74 <autofocus+0x2bc>)
 80009c6:	881a      	ldrh	r2, [r3, #0]
 80009c8:	4bab      	ldr	r3, [pc, #684]	; (8000c78 <autofocus+0x2c0>)
 80009ca:	801a      	strh	r2, [r3, #0]
	while (pos_f>0)
 80009cc:	e00c      	b.n	80009e8 <autofocus+0x30>
	{
		dir_f=0;
 80009ce:	4bab      	ldr	r3, [pc, #684]	; (8000c7c <autofocus+0x2c4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2110      	movs	r1, #16
 80009d8:	48a9      	ldr	r0, [pc, #676]	; (8000c80 <autofocus+0x2c8>)
 80009da:	f001 fce0 	bl	800239e <HAL_GPIO_WritePin>
		osDelay(20);
 80009de:	2014      	movs	r0, #20
 80009e0:	f003 fbb0 	bl	8004144 <osDelay>
		stop_f();
 80009e4:	f7ff ffca 	bl	800097c <stop_f>
	while (pos_f>0)
 80009e8:	4ba6      	ldr	r3, [pc, #664]	; (8000c84 <autofocus+0x2cc>)
 80009ea:	f993 3000 	ldrsb.w	r3, [r3]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	dced      	bgt.n	80009ce <autofocus+0x16>
	}
	HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2110      	movs	r1, #16
 80009f6:	48a2      	ldr	r0, [pc, #648]	; (8000c80 <autofocus+0x2c8>)
 80009f8:	f001 fcd1 	bl	800239e <HAL_GPIO_WritePin>

	while ((pos_f<=31)&&((pos_f+pos_z)<=64)&&(old_contrast <= (contrast+1))){
 80009fc:	e033      	b.n	8000a66 <autofocus+0xae>

		data[0][i]=contrast;
 80009fe:	4b9c      	ldr	r3, [pc, #624]	; (8000c70 <autofocus+0x2b8>)
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b9b      	ldr	r3, [pc, #620]	; (8000c74 <autofocus+0x2bc>)
 8000a06:	8819      	ldrh	r1, [r3, #0]
 8000a08:	4b9f      	ldr	r3, [pc, #636]	; (8000c88 <autofocus+0x2d0>)
 8000a0a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		data[1][i]=pos_f;
 8000a0e:	4b9d      	ldr	r3, [pc, #628]	; (8000c84 <autofocus+0x2cc>)
 8000a10:	f993 2000 	ldrsb.w	r2, [r3]
 8000a14:	4b96      	ldr	r3, [pc, #600]	; (8000c70 <autofocus+0x2b8>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	b291      	uxth	r1, r2
 8000a1a:	4a9b      	ldr	r2, [pc, #620]	; (8000c88 <autofocus+0x2d0>)
 8000a1c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000a20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		i++;
 8000a24:	4b92      	ldr	r3, [pc, #584]	; (8000c70 <autofocus+0x2b8>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	4b90      	ldr	r3, [pc, #576]	; (8000c70 <autofocus+0x2b8>)
 8000a2e:	801a      	strh	r2, [r3, #0]
		dir_f=1;
 8000a30:	4b92      	ldr	r3, [pc, #584]	; (8000c7c <autofocus+0x2c4>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
		old_contrast = contrast;
 8000a36:	4b8f      	ldr	r3, [pc, #572]	; (8000c74 <autofocus+0x2bc>)
 8000a38:	881a      	ldrh	r2, [r3, #0]
 8000a3a:	4b8f      	ldr	r3, [pc, #572]	; (8000c78 <autofocus+0x2c0>)
 8000a3c:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(M2R_GPIO_Port,M2R_Pin,GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2108      	movs	r1, #8
 8000a42:	488f      	ldr	r0, [pc, #572]	; (8000c80 <autofocus+0x2c8>)
 8000a44:	f001 fcab 	bl	800239e <HAL_GPIO_WritePin>
		osDelay(20);
 8000a48:	2014      	movs	r0, #20
 8000a4a:	f003 fb7b 	bl	8004144 <osDelay>
		stop_f();
 8000a4e:	f7ff ff95 	bl	800097c <stop_f>
		HAL_GPIO_WritePin(M2R_GPIO_Port,M2R_Pin,GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2108      	movs	r1, #8
 8000a56:	488a      	ldr	r0, [pc, #552]	; (8000c80 <autofocus+0x2c8>)
 8000a58:	f001 fca1 	bl	800239e <HAL_GPIO_WritePin>
		if (i>200) return;
 8000a5c:	4b84      	ldr	r3, [pc, #528]	; (8000c70 <autofocus+0x2b8>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	2bc8      	cmp	r3, #200	; 0xc8
 8000a62:	f200 80f6 	bhi.w	8000c52 <autofocus+0x29a>
	while ((pos_f<=31)&&((pos_f+pos_z)<=64)&&(old_contrast <= (contrast+1))){
 8000a66:	4b87      	ldr	r3, [pc, #540]	; (8000c84 <autofocus+0x2cc>)
 8000a68:	f993 3000 	ldrsb.w	r3, [r3]
 8000a6c:	2b1f      	cmp	r3, #31
 8000a6e:	dc47      	bgt.n	8000b00 <autofocus+0x148>
 8000a70:	4b84      	ldr	r3, [pc, #528]	; (8000c84 <autofocus+0x2cc>)
 8000a72:	f993 3000 	ldrsb.w	r3, [r3]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b84      	ldr	r3, [pc, #528]	; (8000c8c <autofocus+0x2d4>)
 8000a7a:	f993 3000 	ldrsb.w	r3, [r3]
 8000a7e:	4413      	add	r3, r2
 8000a80:	2b40      	cmp	r3, #64	; 0x40
 8000a82:	dc3d      	bgt.n	8000b00 <autofocus+0x148>
 8000a84:	4b7c      	ldr	r3, [pc, #496]	; (8000c78 <autofocus+0x2c0>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b7a      	ldr	r3, [pc, #488]	; (8000c74 <autofocus+0x2bc>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	429a      	cmp	r2, r3
 8000a92:	ddb4      	ble.n	80009fe <autofocus+0x46>

	}

	while ((pos_f>=2)&&(old_contrast <= contrast)){
 8000a94:	e034      	b.n	8000b00 <autofocus+0x148>

		data[0][i]=contrast;
 8000a96:	4b76      	ldr	r3, [pc, #472]	; (8000c70 <autofocus+0x2b8>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b75      	ldr	r3, [pc, #468]	; (8000c74 <autofocus+0x2bc>)
 8000a9e:	8819      	ldrh	r1, [r3, #0]
 8000aa0:	4b79      	ldr	r3, [pc, #484]	; (8000c88 <autofocus+0x2d0>)
 8000aa2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		data[1][i]=pos_f;
 8000aa6:	4b77      	ldr	r3, [pc, #476]	; (8000c84 <autofocus+0x2cc>)
 8000aa8:	f993 2000 	ldrsb.w	r2, [r3]
 8000aac:	4b70      	ldr	r3, [pc, #448]	; (8000c70 <autofocus+0x2b8>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	b291      	uxth	r1, r2
 8000ab2:	4a75      	ldr	r2, [pc, #468]	; (8000c88 <autofocus+0x2d0>)
 8000ab4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000ab8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		i++;
 8000abc:	4b6c      	ldr	r3, [pc, #432]	; (8000c70 <autofocus+0x2b8>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b6a      	ldr	r3, [pc, #424]	; (8000c70 <autofocus+0x2b8>)
 8000ac6:	801a      	strh	r2, [r3, #0]
		dir_f=0;
 8000ac8:	4b6c      	ldr	r3, [pc, #432]	; (8000c7c <autofocus+0x2c4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
		old_contrast = contrast;
 8000ace:	4b69      	ldr	r3, [pc, #420]	; (8000c74 <autofocus+0x2bc>)
 8000ad0:	881a      	ldrh	r2, [r3, #0]
 8000ad2:	4b69      	ldr	r3, [pc, #420]	; (8000c78 <autofocus+0x2c0>)
 8000ad4:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2110      	movs	r1, #16
 8000ada:	4869      	ldr	r0, [pc, #420]	; (8000c80 <autofocus+0x2c8>)
 8000adc:	f001 fc5f 	bl	800239e <HAL_GPIO_WritePin>
		osDelay(20);
 8000ae0:	2014      	movs	r0, #20
 8000ae2:	f003 fb2f 	bl	8004144 <osDelay>
		stop_f();
 8000ae6:	f7ff ff49 	bl	800097c <stop_f>
		HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2110      	movs	r1, #16
 8000aee:	4864      	ldr	r0, [pc, #400]	; (8000c80 <autofocus+0x2c8>)
 8000af0:	f001 fc55 	bl	800239e <HAL_GPIO_WritePin>
		if (i>400) return;
 8000af4:	4b5e      	ldr	r3, [pc, #376]	; (8000c70 <autofocus+0x2b8>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000afc:	f200 80ab 	bhi.w	8000c56 <autofocus+0x29e>
	while ((pos_f>=2)&&(old_contrast <= contrast)){
 8000b00:	4b60      	ldr	r3, [pc, #384]	; (8000c84 <autofocus+0x2cc>)
 8000b02:	f993 3000 	ldrsb.w	r3, [r3]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	dd05      	ble.n	8000b16 <autofocus+0x15e>
 8000b0a:	4b5b      	ldr	r3, [pc, #364]	; (8000c78 <autofocus+0x2c0>)
 8000b0c:	881a      	ldrh	r2, [r3, #0]
 8000b0e:	4b59      	ldr	r3, [pc, #356]	; (8000c74 <autofocus+0x2bc>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d9bf      	bls.n	8000a96 <autofocus+0xde>
	}
	int imax = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
	for (int j=0; j<i; j++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	e00e      	b.n	8000b3e <autofocus+0x186>
	{
		if (data[0][imax]<=data[0][j]) imax = j;
 8000b20:	4a59      	ldr	r2, [pc, #356]	; (8000c88 <autofocus+0x2d0>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b28:	4957      	ldr	r1, [pc, #348]	; (8000c88 <autofocus+0x2d0>)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d801      	bhi.n	8000b38 <autofocus+0x180>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	607b      	str	r3, [r7, #4]
	for (int j=0; j<i; j++)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b4c      	ldr	r3, [pc, #304]	; (8000c70 <autofocus+0x2b8>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	4293      	cmp	r3, r2
 8000b48:	dbea      	blt.n	8000b20 <autofocus+0x168>
	}

	i=0;
 8000b4a:	4b49      	ldr	r3, [pc, #292]	; (8000c70 <autofocus+0x2b8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	801a      	strh	r2, [r3, #0]
	while (pos_f >= (data[1][imax])){
 8000b50:	e01b      	b.n	8000b8a <autofocus+0x1d2>
			dir_f=0;
 8000b52:	4b4a      	ldr	r3, [pc, #296]	; (8000c7c <autofocus+0x2c4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
			old_contrast = contrast;
 8000b58:	4b46      	ldr	r3, [pc, #280]	; (8000c74 <autofocus+0x2bc>)
 8000b5a:	881a      	ldrh	r2, [r3, #0]
 8000b5c:	4b46      	ldr	r3, [pc, #280]	; (8000c78 <autofocus+0x2c0>)
 8000b5e:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2110      	movs	r1, #16
 8000b64:	4846      	ldr	r0, [pc, #280]	; (8000c80 <autofocus+0x2c8>)
 8000b66:	f001 fc1a 	bl	800239e <HAL_GPIO_WritePin>
			osDelay(20);
 8000b6a:	2014      	movs	r0, #20
 8000b6c:	f003 faea 	bl	8004144 <osDelay>
			stop_f();
 8000b70:	f7ff ff04 	bl	800097c <stop_f>
			HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2110      	movs	r1, #16
 8000b78:	4841      	ldr	r0, [pc, #260]	; (8000c80 <autofocus+0x2c8>)
 8000b7a:	f001 fc10 	bl	800239e <HAL_GPIO_WritePin>
		//	if (i>150) return;
			i++;
 8000b7e:	4b3c      	ldr	r3, [pc, #240]	; (8000c70 <autofocus+0x2b8>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <autofocus+0x2b8>)
 8000b88:	801a      	strh	r2, [r3, #0]
	while (pos_f >= (data[1][imax])){
 8000b8a:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <autofocus+0x2cc>)
 8000b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4a3d      	ldr	r2, [pc, #244]	; (8000c88 <autofocus+0x2d0>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	dad7      	bge.n	8000b52 <autofocus+0x19a>
		}
	i=0;
 8000ba2:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <autofocus+0x2b8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	801a      	strh	r2, [r3, #0]
	while ((contrast < (0.98*data[0][imax]))&&(pos_f>=2)&&(pos_f<=31)&&((pos_f+pos_z)<=64)){
 8000ba8:	e022      	b.n	8000bf0 <autofocus+0x238>
		dir_f=0;
 8000baa:	4b34      	ldr	r3, [pc, #208]	; (8000c7c <autofocus+0x2c4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
		old_contrast = contrast;
 8000bb0:	4b30      	ldr	r3, [pc, #192]	; (8000c74 <autofocus+0x2bc>)
 8000bb2:	881a      	ldrh	r2, [r3, #0]
 8000bb4:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <autofocus+0x2c0>)
 8000bb6:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2110      	movs	r1, #16
 8000bbc:	4830      	ldr	r0, [pc, #192]	; (8000c80 <autofocus+0x2c8>)
 8000bbe:	f001 fbee 	bl	800239e <HAL_GPIO_WritePin>
		osDelay(20);
 8000bc2:	2014      	movs	r0, #20
 8000bc4:	f003 fabe 	bl	8004144 <osDelay>
		stop_f();
 8000bc8:	f7ff fed8 	bl	800097c <stop_f>
		HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2110      	movs	r1, #16
 8000bd0:	482b      	ldr	r0, [pc, #172]	; (8000c80 <autofocus+0x2c8>)
 8000bd2:	f001 fbe4 	bl	800239e <HAL_GPIO_WritePin>
		osDelay(150);
 8000bd6:	2096      	movs	r0, #150	; 0x96
 8000bd8:	f003 fab4 	bl	8004144 <osDelay>
		if (i>150) return;
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <autofocus+0x2b8>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	2b96      	cmp	r3, #150	; 0x96
 8000be2:	d83a      	bhi.n	8000c5a <autofocus+0x2a2>
		i++;
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <autofocus+0x2b8>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <autofocus+0x2b8>)
 8000bee:	801a      	strh	r2, [r3, #0]
	while ((contrast < (0.98*data[0][imax]))&&(pos_f>=2)&&(pos_f<=31)&&((pos_f+pos_z)<=64)){
 8000bf0:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <autofocus+0x2bc>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fd27 	bl	8000648 <__aeabi_i2d>
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	460d      	mov	r5, r1
 8000bfe:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <autofocus+0x2d0>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fd1e 	bl	8000648 <__aeabi_i2d>
 8000c0c:	a316      	add	r3, pc, #88	; (adr r3, 8000c68 <autofocus+0x2b0>)
 8000c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c12:	f7ff fa9d 	bl	8000150 <__aeabi_dmul>
 8000c16:	4602      	mov	r2, r0
 8000c18:	460b      	mov	r3, r1
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	4629      	mov	r1, r5
 8000c1e:	f7ff fddd 	bl	80007dc <__aeabi_dcmplt>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d019      	beq.n	8000c5c <autofocus+0x2a4>
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <autofocus+0x2cc>)
 8000c2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	dd14      	ble.n	8000c5c <autofocus+0x2a4>
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <autofocus+0x2cc>)
 8000c34:	f993 3000 	ldrsb.w	r3, [r3]
 8000c38:	2b1f      	cmp	r3, #31
 8000c3a:	dc0f      	bgt.n	8000c5c <autofocus+0x2a4>
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <autofocus+0x2cc>)
 8000c3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <autofocus+0x2d4>)
 8000c46:	f993 3000 	ldrsb.w	r3, [r3]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	2b40      	cmp	r3, #64	; 0x40
 8000c4e:	ddac      	ble.n	8000baa <autofocus+0x1f2>
 8000c50:	e004      	b.n	8000c5c <autofocus+0x2a4>
		if (i>200) return;
 8000c52:	bf00      	nop
 8000c54:	e002      	b.n	8000c5c <autofocus+0x2a4>
		if (i>400) return;
 8000c56:	bf00      	nop
 8000c58:	e000      	b.n	8000c5c <autofocus+0x2a4>
		if (i>150) return;
 8000c5a:	bf00      	nop
	dir_f=1;
	osDelay(10);
	HAL_GPIO_WritePin(M2R_GPIO_Port,M2R_Pin,GPIO_PIN_RESET);
	contrast4 = contrast;*/

}
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bdb0      	pop	{r4, r5, r7, pc}
 8000c62:	bf00      	nop
 8000c64:	f3af 8000 	nop.w
 8000c68:	f5c28f5c 	.word	0xf5c28f5c
 8000c6c:	3fef5c28 	.word	0x3fef5c28
 8000c70:	2000203c 	.word	0x2000203c
 8000c74:	200000f8 	.word	0x200000f8
 8000c78:	200000fa 	.word	0x200000fa
 8000c7c:	200000f5 	.word	0x200000f5
 8000c80:	40010800 	.word	0x40010800
 8000c84:	200000f3 	.word	0x200000f3
 8000c88:	200000fc 	.word	0x200000fc
 8000c8c:	200000f4 	.word	0x200000f4

08000c90 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c94:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <MX_FREERTOS_Init+0x44>)
 8000c96:	2100      	movs	r1, #0
 8000c98:	480f      	ldr	r0, [pc, #60]	; (8000cd8 <MX_FREERTOS_Init+0x48>)
 8000c9a:	f003 f9a9 	bl	8003ff0 <osThreadNew>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <MX_FREERTOS_Init+0x4c>)
 8000ca2:	6013      	str	r3, [r2, #0]

  /* creation of communication */
  communicationHandle = osThreadNew(CommTask, NULL, &communication_attributes);
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <MX_FREERTOS_Init+0x50>)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	480e      	ldr	r0, [pc, #56]	; (8000ce4 <MX_FREERTOS_Init+0x54>)
 8000caa:	f003 f9a1 	bl	8003ff0 <osThreadNew>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <MX_FREERTOS_Init+0x58>)
 8000cb2:	6013      	str	r3, [r2, #0]

  /* creation of buttonsRead */
  buttonsReadHandle = osThreadNew(BtnReadTask, NULL, &buttonsRead_attributes);
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <MX_FREERTOS_Init+0x5c>)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <MX_FREERTOS_Init+0x60>)
 8000cba:	f003 f999 	bl	8003ff0 <osThreadNew>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <MX_FREERTOS_Init+0x64>)
 8000cc2:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of received */
  receivedHandle = osEventFlagsNew(&received_attributes);
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <MX_FREERTOS_Init+0x68>)
 8000cc6:	f003 fa6b 	bl	80041a0 <osEventFlagsNew>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <MX_FREERTOS_Init+0x6c>)
 8000cce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	08007354 	.word	0x08007354
 8000cd8:	08000d01 	.word	0x08000d01
 8000cdc:	20002040 	.word	0x20002040
 8000ce0:	08007378 	.word	0x08007378
 8000ce4:	08000d19 	.word	0x08000d19
 8000ce8:	20002044 	.word	0x20002044
 8000cec:	0800739c 	.word	0x0800739c
 8000cf0:	08000e01 	.word	0x08000e01
 8000cf4:	20002048 	.word	0x20002048
 8000cf8:	080073c0 	.word	0x080073c0
 8000cfc:	2000204c 	.word	0x2000204c

08000d00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	f_zero();
 8000d08:	f7ff fdd0 	bl	80008ac <f_zero>
	z_zero();
 8000d0c:	f7ff fdf8 	bl	8000900 <z_zero>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f003 fa17 	bl	8004144 <osDelay>
 8000d16:	e7fb      	b.n	8000d10 <StartDefaultTask+0x10>

08000d18 <CommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CommTask */
void CommTask(void *argument)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CommTask */
	osDelay(500);
 8000d20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d24:	f003 fa0e 	bl	8004144 <osDelay>
  /* Infinite loop */
  for(;;)
  {

	  	HAL_UART_AbortReceive(&huart1);
 8000d28:	482d      	ldr	r0, [pc, #180]	; (8000de0 <CommTask+0xc8>)
 8000d2a:	f002 f8ee 	bl	8002f0a <HAL_UART_AbortReceive>
	  	while(HAL_UART_Receive_DMA(&huart1, op_data_RX, 20)!=HAL_OK);
 8000d2e:	bf00      	nop
 8000d30:	2214      	movs	r2, #20
 8000d32:	492c      	ldr	r1, [pc, #176]	; (8000de4 <CommTask+0xcc>)
 8000d34:	482a      	ldr	r0, [pc, #168]	; (8000de0 <CommTask+0xc8>)
 8000d36:	f002 f8c3 	bl	8002ec0 <HAL_UART_Receive_DMA>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1f7      	bne.n	8000d30 <CommTask+0x18>
	  	osEventFlagsWait(receivedHandle, 0x01, osFlagsWaitAny, 500); //Ожидание флага приема данных
 8000d40:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <CommTask+0xd0>)
 8000d42:	6818      	ldr	r0, [r3, #0]
 8000d44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	f003 fad2 	bl	80042f4 <osEventFlagsWait>
	  	uint8_t contrast_temp;
	  	contrast_temp = (op_data_RX[3]+(op_data_RX[2]<<8))/100;
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <CommTask+0xcc>)
 8000d52:	78db      	ldrb	r3, [r3, #3]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <CommTask+0xcc>)
 8000d58:	789b      	ldrb	r3, [r3, #2]
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a23      	ldr	r2, [pc, #140]	; (8000dec <CommTask+0xd4>)
 8000d60:	fb82 1203 	smull	r1, r2, r2, r3
 8000d64:	1152      	asrs	r2, r2, #5
 8000d66:	17db      	asrs	r3, r3, #31
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	72fb      	strb	r3, [r7, #11]
	  	if (contrast_temp<100) contrast=contrast_temp;
 8000d6c:	7afb      	ldrb	r3, [r7, #11]
 8000d6e:	2b63      	cmp	r3, #99	; 0x63
 8000d70:	d803      	bhi.n	8000d7a <CommTask+0x62>
 8000d72:	7afb      	ldrb	r3, [r7, #11]
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <CommTask+0xd8>)
 8000d78:	801a      	strh	r2, [r3, #0]
	  	for (int i = 0; i<10; i++) cam_data_TX[i] = op_data_RX[i+8];
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	e00b      	b.n	8000d98 <CommTask+0x80>
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3308      	adds	r3, #8
 8000d84:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <CommTask+0xcc>)
 8000d86:	5cd1      	ldrb	r1, [r2, r3]
 8000d88:	4a1a      	ldr	r2, [pc, #104]	; (8000df4 <CommTask+0xdc>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	460a      	mov	r2, r1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	3301      	adds	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b09      	cmp	r3, #9
 8000d9c:	ddf0      	ble.n	8000d80 <CommTask+0x68>

	  	if (cam_data_TX[0] != 0)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <CommTask+0xdc>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d012      	beq.n	8000dcc <CommTask+0xb4>
	  	{
	  		if (cam_data_TX[1] == 0x10) HAL_UART_Transmit(&huart3,cam_data_TX,9,1000);
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <CommTask+0xdc>)
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	2b10      	cmp	r3, #16
 8000dac:	d107      	bne.n	8000dbe <CommTask+0xa6>
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	2209      	movs	r2, #9
 8000db4:	490f      	ldr	r1, [pc, #60]	; (8000df4 <CommTask+0xdc>)
 8000db6:	4810      	ldr	r0, [pc, #64]	; (8000df8 <CommTask+0xe0>)
 8000db8:	f001 ff8e 	bl	8002cd8 <HAL_UART_Transmit>
 8000dbc:	e006      	b.n	8000dcc <CommTask+0xb4>
	  		else HAL_UART_Transmit(&huart3,cam_data_TX,4,1000);
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	490b      	ldr	r1, [pc, #44]	; (8000df4 <CommTask+0xdc>)
 8000dc6:	480c      	ldr	r0, [pc, #48]	; (8000df8 <CommTask+0xe0>)
 8000dc8:	f001 ff86 	bl	8002cd8 <HAL_UART_Transmit>
	  	}
	  	HAL_UART_Transmit_DMA(&huart1,op_data_TX,20);
 8000dcc:	2214      	movs	r2, #20
 8000dce:	490b      	ldr	r1, [pc, #44]	; (8000dfc <CommTask+0xe4>)
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <CommTask+0xc8>)
 8000dd2:	f002 f805 	bl	8002de0 <HAL_UART_Transmit_DMA>


    osDelay(1);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f003 f9b4 	bl	8004144 <osDelay>
  {
 8000ddc:	e7a4      	b.n	8000d28 <CommTask+0x10>
 8000dde:	bf00      	nop
 8000de0:	20002050 	.word	0x20002050
 8000de4:	200000b4 	.word	0x200000b4
 8000de8:	2000204c 	.word	0x2000204c
 8000dec:	51eb851f 	.word	0x51eb851f
 8000df0:	200000f8 	.word	0x200000f8
 8000df4:	200000dc 	.word	0x200000dc
 8000df8:	20002098 	.word	0x20002098
 8000dfc:	200000c8 	.word	0x200000c8

08000e00 <BtnReadTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BtnReadTask */
void BtnReadTask(void *argument)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BtnReadTask */
	osDelay(500);
 8000e08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e0c:	f003 f99a 	bl	8004144 <osDelay>
  /* Infinite loop */
  for(;;)
  {

	  op_data_TX[0]=0xfe;
 8000e10:	4b93      	ldr	r3, [pc, #588]	; (8001060 <BtnReadTask+0x260>)
 8000e12:	22fe      	movs	r2, #254	; 0xfe
 8000e14:	701a      	strb	r2, [r3, #0]
	  op_data_TX[1]++;
 8000e16:	4b92      	ldr	r3, [pc, #584]	; (8001060 <BtnReadTask+0x260>)
 8000e18:	785b      	ldrb	r3, [r3, #1]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b90      	ldr	r3, [pc, #576]	; (8001060 <BtnReadTask+0x260>)
 8000e20:	705a      	strb	r2, [r3, #1]
	  op_data_TX[3]=0;
 8000e22:	4b8f      	ldr	r3, [pc, #572]	; (8001060 <BtnReadTask+0x260>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	70da      	strb	r2, [r3, #3]
	  op_data_TX[4]=0;
 8000e28:	4b8d      	ldr	r3, [pc, #564]	; (8001060 <BtnReadTask+0x260>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	711a      	strb	r2, [r3, #4]
	  op_data_TX[5]=0;
 8000e2e:	4b8c      	ldr	r3, [pc, #560]	; (8001060 <BtnReadTask+0x260>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	715a      	strb	r2, [r3, #5]
	  HAL_GPIO_WritePin(M1R_GPIO_Port,M1R_Pin,GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2101      	movs	r1, #1
 8000e38:	488a      	ldr	r0, [pc, #552]	; (8001064 <BtnReadTask+0x264>)
 8000e3a:	f001 fab0 	bl	800239e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M1F_GPIO_Port,M1F_Pin,GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2102      	movs	r1, #2
 8000e42:	4888      	ldr	r0, [pc, #544]	; (8001064 <BtnReadTask+0x264>)
 8000e44:	f001 faab 	bl	800239e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2R_GPIO_Port,M2R_Pin,GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	4886      	ldr	r0, [pc, #536]	; (8001068 <BtnReadTask+0x268>)
 8000e4e:	f001 faa6 	bl	800239e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2110      	movs	r1, #16
 8000e56:	4884      	ldr	r0, [pc, #528]	; (8001068 <BtnReadTask+0x268>)
 8000e58:	f001 faa1 	bl	800239e <HAL_GPIO_WritePin>

	  /*кнопки*/
	  //+focus
	  if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) ==  GPIO_PIN_RESET){
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4882      	ldr	r0, [pc, #520]	; (8001068 <BtnReadTask+0x268>)
 8000e60:	f001 fa86 	bl	8002370 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d124      	bne.n	8000eb4 <BtnReadTask+0xb4>
		  if ((pos_f<=31)&&((pos_f+pos_z)<=64)){
 8000e6a:	4b80      	ldr	r3, [pc, #512]	; (800106c <BtnReadTask+0x26c>)
 8000e6c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e70:	2b1f      	cmp	r3, #31
 8000e72:	dc1f      	bgt.n	8000eb4 <BtnReadTask+0xb4>
 8000e74:	4b7d      	ldr	r3, [pc, #500]	; (800106c <BtnReadTask+0x26c>)
 8000e76:	f993 3000 	ldrsb.w	r3, [r3]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b7c      	ldr	r3, [pc, #496]	; (8001070 <BtnReadTask+0x270>)
 8000e7e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e82:	4413      	add	r3, r2
 8000e84:	2b40      	cmp	r3, #64	; 0x40
 8000e86:	dc15      	bgt.n	8000eb4 <BtnReadTask+0xb4>
			  op_data_TX[3] += 0b00000001;
 8000e88:	4b75      	ldr	r3, [pc, #468]	; (8001060 <BtnReadTask+0x260>)
 8000e8a:	78db      	ldrb	r3, [r3, #3]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b73      	ldr	r3, [pc, #460]	; (8001060 <BtnReadTask+0x260>)
 8000e92:	70da      	strb	r2, [r3, #3]
			  dir_f = 1;
 8000e94:	4b77      	ldr	r3, [pc, #476]	; (8001074 <BtnReadTask+0x274>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(M2R_GPIO_Port,M2R_Pin,GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2108      	movs	r1, #8
 8000e9e:	4872      	ldr	r0, [pc, #456]	; (8001068 <BtnReadTask+0x268>)
 8000ea0:	f001 fa7d 	bl	800239e <HAL_GPIO_WritePin>
			  osDelay(10);
 8000ea4:	200a      	movs	r0, #10
 8000ea6:	f003 f94d 	bl	8004144 <osDelay>
			  HAL_GPIO_WritePin(M2R_GPIO_Port,M2R_Pin,GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2108      	movs	r1, #8
 8000eae:	486e      	ldr	r0, [pc, #440]	; (8001068 <BtnReadTask+0x268>)
 8000eb0:	f001 fa75 	bl	800239e <HAL_GPIO_WritePin>

		  }
	  }
	  //-focus
	  if (HAL_GPIO_ReadPin(BTN9_GPIO_Port, BTN9_Pin) ==  GPIO_PIN_RESET){
 8000eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb8:	486b      	ldr	r0, [pc, #428]	; (8001068 <BtnReadTask+0x268>)
 8000eba:	f001 fa59 	bl	8002370 <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d11a      	bne.n	8000efa <BtnReadTask+0xfa>
		  if(pos_f>0){
 8000ec4:	4b69      	ldr	r3, [pc, #420]	; (800106c <BtnReadTask+0x26c>)
 8000ec6:	f993 3000 	ldrsb.w	r3, [r3]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	dd15      	ble.n	8000efa <BtnReadTask+0xfa>
			  op_data_TX[3] += 0b00000010;
 8000ece:	4b64      	ldr	r3, [pc, #400]	; (8001060 <BtnReadTask+0x260>)
 8000ed0:	78db      	ldrb	r3, [r3, #3]
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b62      	ldr	r3, [pc, #392]	; (8001060 <BtnReadTask+0x260>)
 8000ed8:	70da      	strb	r2, [r3, #3]
			  dir_f = 0;
 8000eda:	4b66      	ldr	r3, [pc, #408]	; (8001074 <BtnReadTask+0x274>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	4860      	ldr	r0, [pc, #384]	; (8001068 <BtnReadTask+0x268>)
 8000ee6:	f001 fa5a 	bl	800239e <HAL_GPIO_WritePin>
			  osDelay(10);
 8000eea:	200a      	movs	r0, #10
 8000eec:	f003 f92a 	bl	8004144 <osDelay>
			  HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	485c      	ldr	r0, [pc, #368]	; (8001068 <BtnReadTask+0x268>)
 8000ef6:	f001 fa52 	bl	800239e <HAL_GPIO_WritePin>

		  }

	  }
	  //autofocus
	  if (HAL_GPIO_ReadPin(BTN4_GPIO_Port, BTN4_Pin) ==  GPIO_PIN_RESET){
 8000efa:	2140      	movs	r1, #64	; 0x40
 8000efc:	4859      	ldr	r0, [pc, #356]	; (8001064 <BtnReadTask+0x264>)
 8000efe:	f001 fa37 	bl	8002370 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d107      	bne.n	8000f18 <BtnReadTask+0x118>
		  op_data_TX[3] += 0b00000100;
 8000f08:	4b55      	ldr	r3, [pc, #340]	; (8001060 <BtnReadTask+0x260>)
 8000f0a:	78db      	ldrb	r3, [r3, #3]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	4b53      	ldr	r3, [pc, #332]	; (8001060 <BtnReadTask+0x260>)
 8000f12:	70da      	strb	r2, [r3, #3]
		  autofocus();
 8000f14:	f7ff fd50 	bl	80009b8 <autofocus>
	  }

	  //+zoom
	  if (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) ==  GPIO_PIN_RESET){
 8000f18:	2102      	movs	r1, #2
 8000f1a:	4853      	ldr	r0, [pc, #332]	; (8001068 <BtnReadTask+0x268>)
 8000f1c:	f001 fa28 	bl	8002370 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d11c      	bne.n	8000f60 <BtnReadTask+0x160>
		  if ((pos_z<=47)&&((pos_f+pos_z)<=64)){
 8000f26:	4b52      	ldr	r3, [pc, #328]	; (8001070 <BtnReadTask+0x270>)
 8000f28:	f993 3000 	ldrsb.w	r3, [r3]
 8000f2c:	2b2f      	cmp	r3, #47	; 0x2f
 8000f2e:	dc17      	bgt.n	8000f60 <BtnReadTask+0x160>
 8000f30:	4b4e      	ldr	r3, [pc, #312]	; (800106c <BtnReadTask+0x26c>)
 8000f32:	f993 3000 	ldrsb.w	r3, [r3]
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b4d      	ldr	r3, [pc, #308]	; (8001070 <BtnReadTask+0x270>)
 8000f3a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f3e:	4413      	add	r3, r2
 8000f40:	2b40      	cmp	r3, #64	; 0x40
 8000f42:	dc0d      	bgt.n	8000f60 <BtnReadTask+0x160>
			  op_data_TX[3] += 0b00001000;
 8000f44:	4b46      	ldr	r3, [pc, #280]	; (8001060 <BtnReadTask+0x260>)
 8000f46:	78db      	ldrb	r3, [r3, #3]
 8000f48:	3308      	adds	r3, #8
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b44      	ldr	r3, [pc, #272]	; (8001060 <BtnReadTask+0x260>)
 8000f4e:	70da      	strb	r2, [r3, #3]
			  dir_z = 1;
 8000f50:	4b49      	ldr	r3, [pc, #292]	; (8001078 <BtnReadTask+0x278>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(M1F_GPIO_Port,M1F_Pin,GPIO_PIN_SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4842      	ldr	r0, [pc, #264]	; (8001064 <BtnReadTask+0x264>)
 8000f5c:	f001 fa1f 	bl	800239e <HAL_GPIO_WritePin>
		  }

	  }
	  //-zoom
	  if (HAL_GPIO_ReadPin(BTN8_GPIO_Port, BTN8_Pin) ==  GPIO_PIN_RESET){
 8000f60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f64:	4840      	ldr	r0, [pc, #256]	; (8001068 <BtnReadTask+0x268>)
 8000f66:	f001 fa03 	bl	8002370 <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d112      	bne.n	8000f96 <BtnReadTask+0x196>
		  if (pos_z>0){
 8000f70:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <BtnReadTask+0x270>)
 8000f72:	f993 3000 	ldrsb.w	r3, [r3]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	dd0d      	ble.n	8000f96 <BtnReadTask+0x196>
			  op_data_TX[3] += 0b00010000;
 8000f7a:	4b39      	ldr	r3, [pc, #228]	; (8001060 <BtnReadTask+0x260>)
 8000f7c:	78db      	ldrb	r3, [r3, #3]
 8000f7e:	3310      	adds	r3, #16
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <BtnReadTask+0x260>)
 8000f84:	70da      	strb	r2, [r3, #3]
			  dir_z=0;
 8000f86:	4b3c      	ldr	r3, [pc, #240]	; (8001078 <BtnReadTask+0x278>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(M1R_GPIO_Port,M1R_Pin,GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4834      	ldr	r0, [pc, #208]	; (8001064 <BtnReadTask+0x264>)
 8000f92:	f001 fa04 	bl	800239e <HAL_GPIO_WritePin>
		  }
	  }
	  //L
	  if (HAL_GPIO_ReadPin(BTN7_GPIO_Port, BTN7_Pin) ==  GPIO_PIN_RESET){
 8000f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9a:	4833      	ldr	r0, [pc, #204]	; (8001068 <BtnReadTask+0x268>)
 8000f9c:	f001 f9e8 	bl	8002370 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d117      	bne.n	8000fd6 <BtnReadTask+0x1d6>
		  op_data_TX[3] += 0b00100000;
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <BtnReadTask+0x260>)
 8000fa8:	78db      	ldrb	r3, [r3, #3]
 8000faa:	3320      	adds	r3, #32
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <BtnReadTask+0x260>)
 8000fb0:	70da      	strb	r2, [r3, #3]
		  if (br_dec_old==0)
 8000fb2:	4b32      	ldr	r3, [pc, #200]	; (800107c <BtnReadTask+0x27c>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d109      	bne.n	8000fce <BtnReadTask+0x1ce>
		  {
			  HAL_UART_Transmit(&huart3,br_dec,9,1000);
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	2209      	movs	r2, #9
 8000fc0:	492f      	ldr	r1, [pc, #188]	; (8001080 <BtnReadTask+0x280>)
 8000fc2:	4830      	ldr	r0, [pc, #192]	; (8001084 <BtnReadTask+0x284>)
 8000fc4:	f001 fe88 	bl	8002cd8 <HAL_UART_Transmit>
			  osDelay(50);
 8000fc8:	2032      	movs	r0, #50	; 0x32
 8000fca:	f003 f8bb 	bl	8004144 <osDelay>
		  }
		  br_dec_old = 1;
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <BtnReadTask+0x27c>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e002      	b.n	8000fdc <BtnReadTask+0x1dc>
	  }
	  else br_dec_old = 0;
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <BtnReadTask+0x27c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
	  //R
	  if (HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin) ==  GPIO_PIN_RESET){
 8000fdc:	2104      	movs	r1, #4
 8000fde:	4822      	ldr	r0, [pc, #136]	; (8001068 <BtnReadTask+0x268>)
 8000fe0:	f001 f9c6 	bl	8002370 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d117      	bne.n	800101a <BtnReadTask+0x21a>
		  op_data_TX[3] += 0b01000000;
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <BtnReadTask+0x260>)
 8000fec:	78db      	ldrb	r3, [r3, #3]
 8000fee:	3340      	adds	r3, #64	; 0x40
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <BtnReadTask+0x260>)
 8000ff4:	70da      	strb	r2, [r3, #3]
		  if (br_inc_old==0)
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <BtnReadTask+0x288>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d109      	bne.n	8001012 <BtnReadTask+0x212>
		  {
			  HAL_UART_Transmit(&huart3,br_inc,9,1000);
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	2209      	movs	r2, #9
 8001004:	4921      	ldr	r1, [pc, #132]	; (800108c <BtnReadTask+0x28c>)
 8001006:	481f      	ldr	r0, [pc, #124]	; (8001084 <BtnReadTask+0x284>)
 8001008:	f001 fe66 	bl	8002cd8 <HAL_UART_Transmit>
			  osDelay(50);
 800100c:	2032      	movs	r0, #50	; 0x32
 800100e:	f003 f899 	bl	8004144 <osDelay>
		  }
		  br_inc_old =1;
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <BtnReadTask+0x288>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	e002      	b.n	8001020 <BtnReadTask+0x220>
	  }
	  else br_inc_old = 0;
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <BtnReadTask+0x288>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
	  //AWB
	  if (HAL_GPIO_ReadPin(BTN5_GPIO_Port, BTN5_Pin) ==  GPIO_PIN_RESET){
 8001020:	2140      	movs	r1, #64	; 0x40
 8001022:	4811      	ldr	r0, [pc, #68]	; (8001068 <BtnReadTask+0x268>)
 8001024:	f001 f9a4 	bl	8002370 <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d134      	bne.n	8001098 <BtnReadTask+0x298>
		  op_data_TX[3] += 0b10000000;
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <BtnReadTask+0x260>)
 8001030:	78db      	ldrb	r3, [r3, #3]
 8001032:	3b80      	subs	r3, #128	; 0x80
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <BtnReadTask+0x260>)
 8001038:	70da      	strb	r2, [r3, #3]
		  if (br_inc_old==0)
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <BtnReadTask+0x288>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d109      	bne.n	8001056 <BtnReadTask+0x256>
		  {
			  HAL_UART_Transmit(&huart3,awb,9,1000);
 8001042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001046:	2209      	movs	r2, #9
 8001048:	4911      	ldr	r1, [pc, #68]	; (8001090 <BtnReadTask+0x290>)
 800104a:	480e      	ldr	r0, [pc, #56]	; (8001084 <BtnReadTask+0x284>)
 800104c:	f001 fe44 	bl	8002cd8 <HAL_UART_Transmit>
			  osDelay(50);
 8001050:	2032      	movs	r0, #50	; 0x32
 8001052:	f003 f877 	bl	8004144 <osDelay>
		  }
		  awb_old = 1;
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <BtnReadTask+0x294>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e01f      	b.n	800109e <BtnReadTask+0x29e>
 800105e:	bf00      	nop
 8001060:	200000c8 	.word	0x200000c8
 8001064:	40010c00 	.word	0x40010c00
 8001068:	40010800 	.word	0x40010800
 800106c:	200000f3 	.word	0x200000f3
 8001070:	200000f4 	.word	0x200000f4
 8001074:	200000f5 	.word	0x200000f5
 8001078:	200000f6 	.word	0x200000f6
 800107c:	200000f1 	.word	0x200000f1
 8001080:	2000000c 	.word	0x2000000c
 8001084:	20002098 	.word	0x20002098
 8001088:	200000f0 	.word	0x200000f0
 800108c:	20000000 	.word	0x20000000
 8001090:	20000018 	.word	0x20000018
 8001094:	200000f2 	.word	0x200000f2
	  }
	  else awb_old = 0;
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <BtnReadTask+0x32c>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
	  //Snapshot
	  if (HAL_GPIO_ReadPin(BTN6_GPIO_Port, BTN6_Pin) ==  GPIO_PIN_RESET){
 800109e:	2180      	movs	r1, #128	; 0x80
 80010a0:	4823      	ldr	r0, [pc, #140]	; (8001130 <BtnReadTask+0x330>)
 80010a2:	f001 f965 	bl	8002370 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d105      	bne.n	80010b8 <BtnReadTask+0x2b8>
		  op_data_TX[4] += 0b00000001;
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <BtnReadTask+0x334>)
 80010ae:	791b      	ldrb	r3, [r3, #4]
 80010b0:	3301      	adds	r3, #1
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <BtnReadTask+0x334>)
 80010b6:	711a      	strb	r2, [r3, #4]




	  /* датчики положения оптические*/
	  if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin) ==  GPIO_PIN_RESET){
 80010b8:	2108      	movs	r1, #8
 80010ba:	481f      	ldr	r0, [pc, #124]	; (8001138 <BtnReadTask+0x338>)
 80010bc:	f001 f958 	bl	8002370 <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d105      	bne.n	80010d2 <BtnReadTask+0x2d2>
		  op_data_TX[5] += 0b00000001;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <BtnReadTask+0x334>)
 80010c8:	795b      	ldrb	r3, [r3, #5]
 80010ca:	3301      	adds	r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <BtnReadTask+0x334>)
 80010d0:	715a      	strb	r2, [r3, #5]
	  }
	  if (HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin) ==  GPIO_PIN_RESET){
 80010d2:	2120      	movs	r1, #32
 80010d4:	4818      	ldr	r0, [pc, #96]	; (8001138 <BtnReadTask+0x338>)
 80010d6:	f001 f94b 	bl	8002370 <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d105      	bne.n	80010ec <BtnReadTask+0x2ec>
		  op_data_TX[5] += 0b00000010;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <BtnReadTask+0x334>)
 80010e2:	795b      	ldrb	r3, [r3, #5]
 80010e4:	3302      	adds	r3, #2
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <BtnReadTask+0x334>)
 80010ea:	715a      	strb	r2, [r3, #5]
	  }
	  if (HAL_GPIO_ReadPin(END1_GPIO_Port, END1_Pin) ==  GPIO_PIN_RESET){
 80010ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f0:	480f      	ldr	r0, [pc, #60]	; (8001130 <BtnReadTask+0x330>)
 80010f2:	f001 f93d 	bl	8002370 <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d105      	bne.n	8001108 <BtnReadTask+0x308>
	  	  op_data_TX[5] += 0b00000100;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <BtnReadTask+0x334>)
 80010fe:	795b      	ldrb	r3, [r3, #5]
 8001100:	3304      	adds	r3, #4
 8001102:	b2da      	uxtb	r2, r3
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <BtnReadTask+0x334>)
 8001106:	715a      	strb	r2, [r3, #5]
	  }
	  if (HAL_GPIO_ReadPin(END2_GPIO_Port, END2_Pin) ==  GPIO_PIN_RESET){
 8001108:	2110      	movs	r1, #16
 800110a:	480b      	ldr	r0, [pc, #44]	; (8001138 <BtnReadTask+0x338>)
 800110c:	f001 f930 	bl	8002370 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d105      	bne.n	8001122 <BtnReadTask+0x322>
	  	  op_data_TX[5] += 0b00001000;
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <BtnReadTask+0x334>)
 8001118:	795b      	ldrb	r3, [r3, #5]
 800111a:	3308      	adds	r3, #8
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <BtnReadTask+0x334>)
 8001120:	715a      	strb	r2, [r3, #5]
	  }

	  osDelay(10);
 8001122:	200a      	movs	r0, #10
 8001124:	f003 f80e 	bl	8004144 <osDelay>
	  op_data_TX[0]=0xfe;
 8001128:	e672      	b.n	8000e10 <BtnReadTask+0x10>
 800112a:	bf00      	nop
 800112c:	200000f2 	.word	0x200000f2
 8001130:	40010800 	.word	0x40010800
 8001134:	200000c8 	.word	0x200000c8
 8001138:	40010c00 	.word	0x40010c00

0800113c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001150:	4b41      	ldr	r3, [pc, #260]	; (8001258 <MX_GPIO_Init+0x11c>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a40      	ldr	r2, [pc, #256]	; (8001258 <MX_GPIO_Init+0x11c>)
 8001156:	f043 0320 	orr.w	r3, r3, #32
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <MX_GPIO_Init+0x11c>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0320 	and.w	r3, r3, #32
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <MX_GPIO_Init+0x11c>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a3a      	ldr	r2, [pc, #232]	; (8001258 <MX_GPIO_Init+0x11c>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b38      	ldr	r3, [pc, #224]	; (8001258 <MX_GPIO_Init+0x11c>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001180:	4b35      	ldr	r3, [pc, #212]	; (8001258 <MX_GPIO_Init+0x11c>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a34      	ldr	r2, [pc, #208]	; (8001258 <MX_GPIO_Init+0x11c>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <MX_GPIO_Init+0x11c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M2R_Pin|M2F_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2118      	movs	r1, #24
 800119c:	482f      	ldr	r0, [pc, #188]	; (800125c <MX_GPIO_Init+0x120>)
 800119e:	f001 f8fe 	bl	800239e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1R_Pin|M1F_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2103      	movs	r1, #3
 80011a6:	482e      	ldr	r0, [pc, #184]	; (8001260 <MX_GPIO_Init+0x124>)
 80011a8:	f001 f8f9 	bl	800239e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin|BTN5_Pin
 80011ac:	f649 13c7 	movw	r3, #39367	; 0x99c7
 80011b0:	613b      	str	r3, [r7, #16]
                          |BTN6_Pin|BTN7_Pin|BTN8_Pin|BTN9_Pin
                          |END1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4619      	mov	r1, r3
 80011c0:	4826      	ldr	r0, [pc, #152]	; (800125c <MX_GPIO_Init+0x120>)
 80011c2:	f000 ff51 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = M2R_Pin|M2F_Pin;
 80011c6:	2318      	movs	r3, #24
 80011c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4619      	mov	r1, r3
 80011dc:	481f      	ldr	r0, [pc, #124]	; (800125c <MX_GPIO_Init+0x120>)
 80011de:	f000 ff43 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = M1R_Pin|M1F_Pin;
 80011e2:	2303      	movs	r3, #3
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4619      	mov	r1, r3
 80011f8:	4819      	ldr	r0, [pc, #100]	; (8001260 <MX_GPIO_Init+0x124>)
 80011fa:	f000 ff35 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENC1_Pin|ENC2_Pin;
 80011fe:	2328      	movs	r3, #40	; 0x28
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_GPIO_Init+0x128>)
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4619      	mov	r1, r3
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <MX_GPIO_Init+0x124>)
 8001212:	f000 ff29 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = END2_Pin|BTN4_Pin;
 8001216:	2350      	movs	r3, #80	; 0x50
 8001218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	4619      	mov	r1, r3
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <MX_GPIO_Init+0x124>)
 800122a:	f000 ff1d 	bl	8002068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2105      	movs	r1, #5
 8001232:	2009      	movs	r0, #9
 8001234:	f000 fc35 	bl	8001aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001238:	2009      	movs	r0, #9
 800123a:	f000 fc4e 	bl	8001ada <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2105      	movs	r1, #5
 8001242:	2017      	movs	r0, #23
 8001244:	f000 fc2d 	bl	8001aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001248:	2017      	movs	r0, #23
 800124a:	f000 fc46 	bl	8001ada <HAL_NVIC_EnableIRQ>

}
 800124e:	bf00      	nop
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	40010800 	.word	0x40010800
 8001260:	40010c00 	.word	0x40010c00
 8001264:	10310000 	.word	0x10310000

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126c:	f000 fae0 	bl	8001830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001270:	f000 f80f 	bl	8001292 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001274:	f7ff ff62 	bl	800113c <MX_GPIO_Init>
  MX_DMA_Init();
 8001278:	f7ff fad8 	bl	800082c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800127c:	f000 f970 	bl	8001560 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001280:	f000 f998 	bl	80015b4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001284:	f002 fe4e 	bl	8003f24 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001288:	f7ff fd02 	bl	8000c90 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800128c:	f002 fe7c 	bl	8003f88 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001290:	e7fe      	b.n	8001290 <main+0x28>

08001292 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b090      	sub	sp, #64	; 0x40
 8001296:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001298:	f107 0318 	add.w	r3, r7, #24
 800129c:	2228      	movs	r2, #40	; 0x28
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f005 ff5f 	bl	8007164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012bc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c2:	2301      	movs	r3, #1
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c6:	2302      	movs	r3, #2
 80012c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80012d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 f89a 	bl	8002414 <HAL_RCC_OscConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012e6:	f000 f819 	bl	800131c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ea:	230f      	movs	r3, #15
 80012ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ee:	2302      	movs	r3, #2
 80012f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2102      	movs	r1, #2
 8001304:	4618      	mov	r0, r3
 8001306:	f001 fb07 	bl	8002918 <HAL_RCC_ClockConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001310:	f000 f804 	bl	800131c <Error_Handler>
  }
}
 8001314:	bf00      	nop
 8001316:	3740      	adds	r7, #64	; 0x40
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	e7fe      	b.n	8001324 <Error_Handler+0x8>
	...

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_MspInit+0x68>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_MspInit+0x68>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6193      	str	r3, [r2, #24]
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_MspInit+0x68>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_MspInit+0x68>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <HAL_MspInit+0x68>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	61d3      	str	r3, [r2, #28]
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_MspInit+0x68>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	210f      	movs	r1, #15
 8001362:	f06f 0001 	mvn.w	r0, #1
 8001366:	f000 fb9c 	bl	8001aa2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_MspInit+0x6c>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_MspInit+0x6c>)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800139c:	e7fe      	b.n	800139c <NMI_Handler+0x4>

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler+0x4>

080013aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c6:	f000 fa79 	bl	80018bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013ca:	f004 fea1 	bl	8006110 <xTaskGetSchedulerState>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d001      	beq.n	80013d8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013d4:	f005 fc38 	bl	8006c48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_Pin);
 80013e0:	2008      	movs	r0, #8
 80013e2:	f000 fff5 	bl	80023d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  if (dir_f == 1) {
 80013e6:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <EXTI3_IRQHandler+0x84>)
 80013e8:	f993 3000 	ldrsb.w	r3, [r3]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d11c      	bne.n	800142a <EXTI3_IRQHandler+0x4e>
	  pos_f++;
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <EXTI3_IRQHandler+0x88>)
 80013f2:	f993 3000 	ldrsb.w	r3, [r3]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	3301      	adds	r3, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	b25a      	sxtb	r2, r3
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <EXTI3_IRQHandler+0x88>)
 8001400:	701a      	strb	r2, [r3, #0]
	  if ((pos_f>31)||((pos_f+pos_z)>64)) HAL_GPIO_WritePin(M2R_GPIO_Port,M2R_Pin,GPIO_PIN_RESET);
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <EXTI3_IRQHandler+0x88>)
 8001404:	f993 3000 	ldrsb.w	r3, [r3]
 8001408:	2b1f      	cmp	r3, #31
 800140a:	dc09      	bgt.n	8001420 <EXTI3_IRQHandler+0x44>
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <EXTI3_IRQHandler+0x88>)
 800140e:	f993 3000 	ldrsb.w	r3, [r3]
 8001412:	461a      	mov	r2, r3
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <EXTI3_IRQHandler+0x8c>)
 8001416:	f993 3000 	ldrsb.w	r3, [r3]
 800141a:	4413      	add	r3, r2
 800141c:	2b40      	cmp	r3, #64	; 0x40
 800141e:	dd04      	ble.n	800142a <EXTI3_IRQHandler+0x4e>
 8001420:	2200      	movs	r2, #0
 8001422:	2108      	movs	r1, #8
 8001424:	4811      	ldr	r0, [pc, #68]	; (800146c <EXTI3_IRQHandler+0x90>)
 8001426:	f000 ffba 	bl	800239e <HAL_GPIO_WritePin>
  }
  if (dir_f == 0){
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <EXTI3_IRQHandler+0x84>)
 800142c:	f993 3000 	ldrsb.w	r3, [r3]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d112      	bne.n	800145a <EXTI3_IRQHandler+0x7e>
	  pos_f--;
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <EXTI3_IRQHandler+0x88>)
 8001436:	f993 3000 	ldrsb.w	r3, [r3]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	3b01      	subs	r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	b25a      	sxtb	r2, r3
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <EXTI3_IRQHandler+0x88>)
 8001444:	701a      	strb	r2, [r3, #0]
	  if (pos_f<1) HAL_GPIO_WritePin(M2F_GPIO_Port,M2F_Pin,GPIO_PIN_RESET);
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <EXTI3_IRQHandler+0x88>)
 8001448:	f993 3000 	ldrsb.w	r3, [r3]
 800144c:	2b00      	cmp	r3, #0
 800144e:	dc04      	bgt.n	800145a <EXTI3_IRQHandler+0x7e>
 8001450:	2200      	movs	r2, #0
 8001452:	2110      	movs	r1, #16
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <EXTI3_IRQHandler+0x90>)
 8001456:	f000 ffa2 	bl	800239e <HAL_GPIO_WritePin>
  }
  /* USER CODE END EXTI3_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200000f5 	.word	0x200000f5
 8001464:	200000f3 	.word	0x200000f3
 8001468:	200000f4 	.word	0x200000f4
 800146c:	40010800 	.word	0x40010800

08001470 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <DMA1_Channel4_IRQHandler+0x10>)
 8001476:	f000 fcb9 	bl	8001dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20002124 	.word	0x20002124

08001484 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <DMA1_Channel5_IRQHandler+0x10>)
 800148a:	f000 fcaf 	bl	8001dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200020e0 	.word	0x200020e0

08001498 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2_Pin);
 800149c:	2020      	movs	r0, #32
 800149e:	f000 ff97 	bl	80023d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  if (dir_z == 1) {
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <EXTI9_5_IRQHandler+0x84>)
 80014a4:	f993 3000 	ldrsb.w	r3, [r3]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d11c      	bne.n	80014e6 <EXTI9_5_IRQHandler+0x4e>
  	  pos_z++;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <EXTI9_5_IRQHandler+0x88>)
 80014ae:	f993 3000 	ldrsb.w	r3, [r3]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	b25a      	sxtb	r2, r3
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <EXTI9_5_IRQHandler+0x88>)
 80014bc:	701a      	strb	r2, [r3, #0]
  	  if ((pos_z>47)||((pos_f+pos_z)>64)) HAL_GPIO_WritePin(M1F_GPIO_Port,M1F_Pin,GPIO_PIN_RESET);
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <EXTI9_5_IRQHandler+0x88>)
 80014c0:	f993 3000 	ldrsb.w	r3, [r3]
 80014c4:	2b2f      	cmp	r3, #47	; 0x2f
 80014c6:	dc09      	bgt.n	80014dc <EXTI9_5_IRQHandler+0x44>
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <EXTI9_5_IRQHandler+0x8c>)
 80014ca:	f993 3000 	ldrsb.w	r3, [r3]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <EXTI9_5_IRQHandler+0x88>)
 80014d2:	f993 3000 	ldrsb.w	r3, [r3]
 80014d6:	4413      	add	r3, r2
 80014d8:	2b40      	cmp	r3, #64	; 0x40
 80014da:	dd04      	ble.n	80014e6 <EXTI9_5_IRQHandler+0x4e>
 80014dc:	2200      	movs	r2, #0
 80014de:	2102      	movs	r1, #2
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <EXTI9_5_IRQHandler+0x90>)
 80014e2:	f000 ff5c 	bl	800239e <HAL_GPIO_WritePin>
    }
    if (dir_z == 0){
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <EXTI9_5_IRQHandler+0x84>)
 80014e8:	f993 3000 	ldrsb.w	r3, [r3]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d112      	bne.n	8001516 <EXTI9_5_IRQHandler+0x7e>
  	  pos_z--;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <EXTI9_5_IRQHandler+0x88>)
 80014f2:	f993 3000 	ldrsb.w	r3, [r3]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	3b01      	subs	r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	b25a      	sxtb	r2, r3
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <EXTI9_5_IRQHandler+0x88>)
 8001500:	701a      	strb	r2, [r3, #0]
  	  if (pos_z<1) HAL_GPIO_WritePin(M1R_GPIO_Port,M1R_Pin,GPIO_PIN_RESET);
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <EXTI9_5_IRQHandler+0x88>)
 8001504:	f993 3000 	ldrsb.w	r3, [r3]
 8001508:	2b00      	cmp	r3, #0
 800150a:	dc04      	bgt.n	8001516 <EXTI9_5_IRQHandler+0x7e>
 800150c:	2200      	movs	r2, #0
 800150e:	2101      	movs	r1, #1
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <EXTI9_5_IRQHandler+0x90>)
 8001512:	f000 ff44 	bl	800239e <HAL_GPIO_WritePin>
    }
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200000f6 	.word	0x200000f6
 8001520:	200000f4 	.word	0x200000f4
 8001524:	200000f3 	.word	0x200000f3
 8001528:	40010c00 	.word	0x40010c00

0800152c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <USART1_IRQHandler+0x10>)
 8001532:	f001 fd8d 	bl	8003050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20002050 	.word	0x20002050

08001540 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <USART3_IRQHandler+0x10>)
 8001546:	f001 fd83 	bl	8003050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20002098 	.word	0x20002098

08001554 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_USART1_UART_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 800156c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001570:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 8001598:	f001 fb4e 	bl	8002c38 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f7ff febb 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20002050 	.word	0x20002050
 80015b0:	40013800 	.word	0x40013800

080015b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_USART3_UART_Init+0x4c>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <MX_USART3_UART_Init+0x50>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <MX_USART3_UART_Init+0x4c>)
 80015c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_USART3_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_USART3_UART_Init+0x4c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MX_USART3_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_USART3_UART_Init+0x4c>)
 80015da:	220c      	movs	r2, #12
 80015dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <MX_USART3_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_USART3_UART_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_USART3_UART_Init+0x4c>)
 80015ec:	f001 fb24 	bl	8002c38 <HAL_UART_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015f6:	f7ff fe91 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20002098 	.word	0x20002098
 8001604:	40004800 	.word	0x40004800

08001608 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0318 	add.w	r3, r7, #24
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a67      	ldr	r2, [pc, #412]	; (80017c0 <HAL_UART_MspInit+0x1b8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	f040 8087 	bne.w	8001738 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800162a:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <HAL_UART_MspInit+0x1bc>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	4a65      	ldr	r2, [pc, #404]	; (80017c4 <HAL_UART_MspInit+0x1bc>)
 8001630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001634:	6193      	str	r3, [r2, #24]
 8001636:	4b63      	ldr	r3, [pc, #396]	; (80017c4 <HAL_UART_MspInit+0x1bc>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	4b60      	ldr	r3, [pc, #384]	; (80017c4 <HAL_UART_MspInit+0x1bc>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	4a5f      	ldr	r2, [pc, #380]	; (80017c4 <HAL_UART_MspInit+0x1bc>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6193      	str	r3, [r2, #24]
 800164e:	4b5d      	ldr	r3, [pc, #372]	; (80017c4 <HAL_UART_MspInit+0x1bc>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800165a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0318 	add.w	r3, r7, #24
 800166c:	4619      	mov	r1, r3
 800166e:	4856      	ldr	r0, [pc, #344]	; (80017c8 <HAL_UART_MspInit+0x1c0>)
 8001670:	f000 fcfa 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0318 	add.w	r3, r7, #24
 8001686:	4619      	mov	r1, r3
 8001688:	484f      	ldr	r0, [pc, #316]	; (80017c8 <HAL_UART_MspInit+0x1c0>)
 800168a:	f000 fced 	bl	8002068 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800168e:	4b4f      	ldr	r3, [pc, #316]	; (80017cc <HAL_UART_MspInit+0x1c4>)
 8001690:	4a4f      	ldr	r2, [pc, #316]	; (80017d0 <HAL_UART_MspInit+0x1c8>)
 8001692:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001694:	4b4d      	ldr	r3, [pc, #308]	; (80017cc <HAL_UART_MspInit+0x1c4>)
 8001696:	2200      	movs	r2, #0
 8001698:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800169a:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <HAL_UART_MspInit+0x1c4>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016a0:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <HAL_UART_MspInit+0x1c4>)
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016a6:	4b49      	ldr	r3, [pc, #292]	; (80017cc <HAL_UART_MspInit+0x1c4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ac:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_UART_MspInit+0x1c4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80016b2:	4b46      	ldr	r3, [pc, #280]	; (80017cc <HAL_UART_MspInit+0x1c4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016b8:	4b44      	ldr	r3, [pc, #272]	; (80017cc <HAL_UART_MspInit+0x1c4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016be:	4843      	ldr	r0, [pc, #268]	; (80017cc <HAL_UART_MspInit+0x1c4>)
 80016c0:	f000 fa26 	bl	8001b10 <HAL_DMA_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80016ca:	f7ff fe27 	bl	800131c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a3e      	ldr	r2, [pc, #248]	; (80017cc <HAL_UART_MspInit+0x1c4>)
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80016d4:	4a3d      	ldr	r2, [pc, #244]	; (80017cc <HAL_UART_MspInit+0x1c4>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80016da:	4b3e      	ldr	r3, [pc, #248]	; (80017d4 <HAL_UART_MspInit+0x1cc>)
 80016dc:	4a3e      	ldr	r2, [pc, #248]	; (80017d8 <HAL_UART_MspInit+0x1d0>)
 80016de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e0:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <HAL_UART_MspInit+0x1cc>)
 80016e2:	2210      	movs	r2, #16
 80016e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e6:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <HAL_UART_MspInit+0x1cc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ec:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <HAL_UART_MspInit+0x1cc>)
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f2:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <HAL_UART_MspInit+0x1cc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f8:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <HAL_UART_MspInit+0x1cc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80016fe:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_UART_MspInit+0x1cc>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001704:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <HAL_UART_MspInit+0x1cc>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800170a:	4832      	ldr	r0, [pc, #200]	; (80017d4 <HAL_UART_MspInit+0x1cc>)
 800170c:	f000 fa00 	bl	8001b10 <HAL_DMA_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001716:	f7ff fe01 	bl	800131c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a2d      	ldr	r2, [pc, #180]	; (80017d4 <HAL_UART_MspInit+0x1cc>)
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
 8001720:	4a2c      	ldr	r2, [pc, #176]	; (80017d4 <HAL_UART_MspInit+0x1cc>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2105      	movs	r1, #5
 800172a:	2025      	movs	r0, #37	; 0x25
 800172c:	f000 f9b9 	bl	8001aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001730:	2025      	movs	r0, #37	; 0x25
 8001732:	f000 f9d2 	bl	8001ada <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001736:	e03e      	b.n	80017b6 <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a27      	ldr	r2, [pc, #156]	; (80017dc <HAL_UART_MspInit+0x1d4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d139      	bne.n	80017b6 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <HAL_UART_MspInit+0x1bc>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <HAL_UART_MspInit+0x1bc>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	61d3      	str	r3, [r2, #28]
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_UART_MspInit+0x1bc>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_UART_MspInit+0x1bc>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_UART_MspInit+0x1bc>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	6193      	str	r3, [r2, #24]
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_UART_MspInit+0x1bc>)
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 0318 	add.w	r3, r7, #24
 8001784:	4619      	mov	r1, r3
 8001786:	4816      	ldr	r0, [pc, #88]	; (80017e0 <HAL_UART_MspInit+0x1d8>)
 8001788:	f000 fc6e 	bl	8002068 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800178c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 0318 	add.w	r3, r7, #24
 800179e:	4619      	mov	r1, r3
 80017a0:	480f      	ldr	r0, [pc, #60]	; (80017e0 <HAL_UART_MspInit+0x1d8>)
 80017a2:	f000 fc61 	bl	8002068 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2105      	movs	r1, #5
 80017aa:	2027      	movs	r0, #39	; 0x27
 80017ac:	f000 f979 	bl	8001aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017b0:	2027      	movs	r0, #39	; 0x27
 80017b2:	f000 f992 	bl	8001ada <HAL_NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	; 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40013800 	.word	0x40013800
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010800 	.word	0x40010800
 80017cc:	200020e0 	.word	0x200020e0
 80017d0:	40020058 	.word	0x40020058
 80017d4:	20002124 	.word	0x20002124
 80017d8:	40020044 	.word	0x40020044
 80017dc:	40004800 	.word	0x40004800
 80017e0:	40010c00 	.word	0x40010c00

080017e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e4:	f7ff feb6 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e8:	480b      	ldr	r0, [pc, #44]	; (8001818 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ea:	490c      	ldr	r1, [pc, #48]	; (800181c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017ec:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a09      	ldr	r2, [pc, #36]	; (8001824 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001800:	4c09      	ldr	r4, [pc, #36]	; (8001828 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800180e:	f005 fc75 	bl	80070fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001812:	f7ff fd29 	bl	8001268 <main>
  bx lr
 8001816:	4770      	bx	lr
  ldr r0, =_sdata
 8001818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800181c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001820:	08007464 	.word	0x08007464
  ldr r2, =_sbss
 8001824:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001828:	20003b7c 	.word	0x20003b7c

0800182c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC1_2_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_Init+0x28>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_Init+0x28>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 f923 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001846:	200f      	movs	r0, #15
 8001848:	f000 f808 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184c:	f7ff fd6c 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40022000 	.word	0x40022000

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x54>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x58>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001872:	fbb3 f3f1 	udiv	r3, r3, r1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f93b 	bl	8001af6 <HAL_SYSTICK_Config>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00e      	b.n	80018a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	d80a      	bhi.n	80018a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001898:	f000 f903 	bl	8001aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <HAL_InitTick+0x5c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000024 	.word	0x20000024
 80018b4:	2000002c 	.word	0x2000002c
 80018b8:	20000028 	.word	0x20000028

080018bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_IncTick+0x1c>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x20>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a03      	ldr	r2, [pc, #12]	; (80018dc <HAL_IncTick+0x20>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	2000002c 	.word	0x2000002c
 80018dc:	20002168 	.word	0x20002168

080018e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <HAL_GetTick+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20002168 	.word	0x20002168

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4906      	ldr	r1, [pc, #24]	; (800198c <__NVIC_EnableIRQ+0x34>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	e000e100 	.word	0xe000e100

08001990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db0a      	blt.n	80019ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	490c      	ldr	r1, [pc, #48]	; (80019dc <__NVIC_SetPriority+0x4c>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	440b      	add	r3, r1
 80019b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b8:	e00a      	b.n	80019d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4908      	ldr	r1, [pc, #32]	; (80019e0 <__NVIC_SetPriority+0x50>)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3b04      	subs	r3, #4
 80019c8:	0112      	lsls	r2, r2, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	761a      	strb	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f1c3 0307 	rsb	r3, r3, #7
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	bf28      	it	cs
 8001a02:	2304      	movcs	r3, #4
 8001a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d902      	bls.n	8001a14 <NVIC_EncodePriority+0x30>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3b03      	subs	r3, #3
 8001a12:	e000      	b.n	8001a16 <NVIC_EncodePriority+0x32>
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	401a      	ands	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	4313      	orrs	r3, r2
         );
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	; 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a58:	d301      	bcc.n	8001a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00f      	b.n	8001a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <SysTick_Config+0x40>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a66:	210f      	movs	r1, #15
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a6c:	f7ff ff90 	bl	8001990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <SysTick_Config+0x40>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a76:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <SysTick_Config+0x40>)
 8001a78:	2207      	movs	r2, #7
 8001a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff2d 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab4:	f7ff ff42 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	6978      	ldr	r0, [r7, #20]
 8001ac0:	f7ff ff90 	bl	80019e4 <NVIC_EncodePriority>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff5f 	bl	8001990 <__NVIC_SetPriority>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff35 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffa2 	bl	8001a48 <SysTick_Config>
 8001b04:	4603      	mov	r3, r0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e043      	b.n	8001bae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <HAL_DMA_Init+0xa8>)
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a22      	ldr	r2, [pc, #136]	; (8001bbc <HAL_DMA_Init+0xac>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	009a      	lsls	r2, r3, #2
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <HAL_DMA_Init+0xb0>)
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	bffdfff8 	.word	0xbffdfff8
 8001bbc:	cccccccd 	.word	0xcccccccd
 8001bc0:	40020000 	.word	0x40020000

08001bc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <HAL_DMA_Start_IT+0x20>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e04b      	b.n	8001c7c <HAL_DMA_Start_IT+0xb8>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d13a      	bne.n	8001c6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0201 	bic.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 f9f6 	bl	800200e <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d008      	beq.n	8001c3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 020e 	orr.w	r2, r2, #14
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e00f      	b.n	8001c5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0204 	bic.w	r2, r2, #4
 8001c4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 020a 	orr.w	r2, r2, #10
 8001c5a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e005      	b.n	8001c7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c76:	2302      	movs	r3, #2
 8001c78:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d008      	beq.n	8001cae <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e020      	b.n	8001cf0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 020e 	bic.w	r2, r2, #14
 8001cbc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cdc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d005      	beq.n	8001d20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2204      	movs	r2, #4
 8001d18:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	73fb      	strb	r3, [r7, #15]
 8001d1e:	e051      	b.n	8001dc4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 020e 	bic.w	r2, r2, #14
 8001d2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0201 	bic.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <HAL_DMA_Abort_IT+0xd4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d029      	beq.n	8001d9e <HAL_DMA_Abort_IT+0xa2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <HAL_DMA_Abort_IT+0xd8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d022      	beq.n	8001d9a <HAL_DMA_Abort_IT+0x9e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <HAL_DMA_Abort_IT+0xdc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01a      	beq.n	8001d94 <HAL_DMA_Abort_IT+0x98>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <HAL_DMA_Abort_IT+0xe0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d012      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x92>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <HAL_DMA_Abort_IT+0xe4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00a      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x8c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_DMA_Abort_IT+0xe8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d102      	bne.n	8001d82 <HAL_DMA_Abort_IT+0x86>
 8001d7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d80:	e00e      	b.n	8001da0 <HAL_DMA_Abort_IT+0xa4>
 8001d82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d86:	e00b      	b.n	8001da0 <HAL_DMA_Abort_IT+0xa4>
 8001d88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d8c:	e008      	b.n	8001da0 <HAL_DMA_Abort_IT+0xa4>
 8001d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d92:	e005      	b.n	8001da0 <HAL_DMA_Abort_IT+0xa4>
 8001d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d98:	e002      	b.n	8001da0 <HAL_DMA_Abort_IT+0xa4>
 8001d9a:	2310      	movs	r3, #16
 8001d9c:	e000      	b.n	8001da0 <HAL_DMA_Abort_IT+0xa4>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HAL_DMA_Abort_IT+0xec>)
 8001da2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
    } 
  }
  return status;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40020008 	.word	0x40020008
 8001dd4:	4002001c 	.word	0x4002001c
 8001dd8:	40020030 	.word	0x40020030
 8001ddc:	40020044 	.word	0x40020044
 8001de0:	40020058 	.word	0x40020058
 8001de4:	4002006c 	.word	0x4002006c
 8001de8:	40020000 	.word	0x40020000

08001dec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	2204      	movs	r2, #4
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d04f      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0xc8>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d04a      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0204 	bic.w	r2, r2, #4
 8001e3a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a66      	ldr	r2, [pc, #408]	; (8001fdc <HAL_DMA_IRQHandler+0x1f0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d029      	beq.n	8001e9a <HAL_DMA_IRQHandler+0xae>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a65      	ldr	r2, [pc, #404]	; (8001fe0 <HAL_DMA_IRQHandler+0x1f4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d022      	beq.n	8001e96 <HAL_DMA_IRQHandler+0xaa>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a63      	ldr	r2, [pc, #396]	; (8001fe4 <HAL_DMA_IRQHandler+0x1f8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d01a      	beq.n	8001e90 <HAL_DMA_IRQHandler+0xa4>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a62      	ldr	r2, [pc, #392]	; (8001fe8 <HAL_DMA_IRQHandler+0x1fc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d012      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x9e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a60      	ldr	r2, [pc, #384]	; (8001fec <HAL_DMA_IRQHandler+0x200>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00a      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x98>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a5f      	ldr	r2, [pc, #380]	; (8001ff0 <HAL_DMA_IRQHandler+0x204>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d102      	bne.n	8001e7e <HAL_DMA_IRQHandler+0x92>
 8001e78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e7c:	e00e      	b.n	8001e9c <HAL_DMA_IRQHandler+0xb0>
 8001e7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e82:	e00b      	b.n	8001e9c <HAL_DMA_IRQHandler+0xb0>
 8001e84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e88:	e008      	b.n	8001e9c <HAL_DMA_IRQHandler+0xb0>
 8001e8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e8e:	e005      	b.n	8001e9c <HAL_DMA_IRQHandler+0xb0>
 8001e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e94:	e002      	b.n	8001e9c <HAL_DMA_IRQHandler+0xb0>
 8001e96:	2340      	movs	r3, #64	; 0x40
 8001e98:	e000      	b.n	8001e9c <HAL_DMA_IRQHandler+0xb0>
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	4a55      	ldr	r2, [pc, #340]	; (8001ff4 <HAL_DMA_IRQHandler+0x208>)
 8001e9e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8094 	beq.w	8001fd2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001eb2:	e08e      	b.n	8001fd2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	2202      	movs	r2, #2
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d056      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x186>
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d051      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10b      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 020a 	bic.w	r2, r2, #10
 8001eea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a38      	ldr	r2, [pc, #224]	; (8001fdc <HAL_DMA_IRQHandler+0x1f0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d029      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x166>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a37      	ldr	r2, [pc, #220]	; (8001fe0 <HAL_DMA_IRQHandler+0x1f4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d022      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x162>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a35      	ldr	r2, [pc, #212]	; (8001fe4 <HAL_DMA_IRQHandler+0x1f8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01a      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x15c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a34      	ldr	r2, [pc, #208]	; (8001fe8 <HAL_DMA_IRQHandler+0x1fc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d012      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x156>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a32      	ldr	r2, [pc, #200]	; (8001fec <HAL_DMA_IRQHandler+0x200>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00a      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x150>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a31      	ldr	r2, [pc, #196]	; (8001ff0 <HAL_DMA_IRQHandler+0x204>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d102      	bne.n	8001f36 <HAL_DMA_IRQHandler+0x14a>
 8001f30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f34:	e00e      	b.n	8001f54 <HAL_DMA_IRQHandler+0x168>
 8001f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3a:	e00b      	b.n	8001f54 <HAL_DMA_IRQHandler+0x168>
 8001f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f40:	e008      	b.n	8001f54 <HAL_DMA_IRQHandler+0x168>
 8001f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f46:	e005      	b.n	8001f54 <HAL_DMA_IRQHandler+0x168>
 8001f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f4c:	e002      	b.n	8001f54 <HAL_DMA_IRQHandler+0x168>
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e000      	b.n	8001f54 <HAL_DMA_IRQHandler+0x168>
 8001f52:	2302      	movs	r3, #2
 8001f54:	4a27      	ldr	r2, [pc, #156]	; (8001ff4 <HAL_DMA_IRQHandler+0x208>)
 8001f56:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d034      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f70:	e02f      	b.n	8001fd2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	2208      	movs	r2, #8
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d028      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x1e8>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d023      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 020e 	bic.w	r2, r2, #14
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001faa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d004      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
    }
  }
  return;
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
}
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40020008 	.word	0x40020008
 8001fe0:	4002001c 	.word	0x4002001c
 8001fe4:	40020030 	.word	0x40020030
 8001fe8:	40020044 	.word	0x40020044
 8001fec:	40020058 	.word	0x40020058
 8001ff0:	4002006c 	.word	0x4002006c
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr

0800200e <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800200e:	b480      	push	{r7}
 8002010:	b085      	sub	sp, #20
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f202 	lsl.w	r2, r1, r2
 800202a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b10      	cmp	r3, #16
 800203a:	d108      	bne.n	800204e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800204c:	e007      	b.n	800205e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	60da      	str	r2, [r3, #12]
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002068:	b480      	push	{r7}
 800206a:	b08b      	sub	sp, #44	; 0x2c
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207a:	e169      	b.n	8002350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800207c:	2201      	movs	r2, #1
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	429a      	cmp	r2, r3
 8002096:	f040 8158 	bne.w	800234a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a9a      	ldr	r2, [pc, #616]	; (8002308 <HAL_GPIO_Init+0x2a0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d05e      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020a4:	4a98      	ldr	r2, [pc, #608]	; (8002308 <HAL_GPIO_Init+0x2a0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d875      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020aa:	4a98      	ldr	r2, [pc, #608]	; (800230c <HAL_GPIO_Init+0x2a4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d058      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020b0:	4a96      	ldr	r2, [pc, #600]	; (800230c <HAL_GPIO_Init+0x2a4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d86f      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020b6:	4a96      	ldr	r2, [pc, #600]	; (8002310 <HAL_GPIO_Init+0x2a8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d052      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020bc:	4a94      	ldr	r2, [pc, #592]	; (8002310 <HAL_GPIO_Init+0x2a8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d869      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020c2:	4a94      	ldr	r2, [pc, #592]	; (8002314 <HAL_GPIO_Init+0x2ac>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d04c      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020c8:	4a92      	ldr	r2, [pc, #584]	; (8002314 <HAL_GPIO_Init+0x2ac>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d863      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020ce:	4a92      	ldr	r2, [pc, #584]	; (8002318 <HAL_GPIO_Init+0x2b0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d046      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020d4:	4a90      	ldr	r2, [pc, #576]	; (8002318 <HAL_GPIO_Init+0x2b0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d85d      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020da:	2b12      	cmp	r3, #18
 80020dc:	d82a      	bhi.n	8002134 <HAL_GPIO_Init+0xcc>
 80020de:	2b12      	cmp	r3, #18
 80020e0:	d859      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020e2:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <HAL_GPIO_Init+0x80>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	08002163 	.word	0x08002163
 80020ec:	0800213d 	.word	0x0800213d
 80020f0:	0800214f 	.word	0x0800214f
 80020f4:	08002191 	.word	0x08002191
 80020f8:	08002197 	.word	0x08002197
 80020fc:	08002197 	.word	0x08002197
 8002100:	08002197 	.word	0x08002197
 8002104:	08002197 	.word	0x08002197
 8002108:	08002197 	.word	0x08002197
 800210c:	08002197 	.word	0x08002197
 8002110:	08002197 	.word	0x08002197
 8002114:	08002197 	.word	0x08002197
 8002118:	08002197 	.word	0x08002197
 800211c:	08002197 	.word	0x08002197
 8002120:	08002197 	.word	0x08002197
 8002124:	08002197 	.word	0x08002197
 8002128:	08002197 	.word	0x08002197
 800212c:	08002145 	.word	0x08002145
 8002130:	08002159 	.word	0x08002159
 8002134:	4a79      	ldr	r2, [pc, #484]	; (800231c <HAL_GPIO_Init+0x2b4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800213a:	e02c      	b.n	8002196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e029      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	3304      	adds	r3, #4
 800214a:	623b      	str	r3, [r7, #32]
          break;
 800214c:	e024      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	3308      	adds	r3, #8
 8002154:	623b      	str	r3, [r7, #32]
          break;
 8002156:	e01f      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	330c      	adds	r3, #12
 800215e:	623b      	str	r3, [r7, #32]
          break;
 8002160:	e01a      	b.n	8002198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800216a:	2304      	movs	r3, #4
 800216c:	623b      	str	r3, [r7, #32]
          break;
 800216e:	e013      	b.n	8002198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002178:	2308      	movs	r3, #8
 800217a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	611a      	str	r2, [r3, #16]
          break;
 8002182:	e009      	b.n	8002198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002184:	2308      	movs	r3, #8
 8002186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	615a      	str	r2, [r3, #20]
          break;
 800218e:	e003      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
          break;
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x130>
          break;
 8002196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2bff      	cmp	r3, #255	; 0xff
 800219c:	d801      	bhi.n	80021a2 <HAL_GPIO_Init+0x13a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	e001      	b.n	80021a6 <HAL_GPIO_Init+0x13e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3304      	adds	r3, #4
 80021a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2bff      	cmp	r3, #255	; 0xff
 80021ac:	d802      	bhi.n	80021b4 <HAL_GPIO_Init+0x14c>
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	e002      	b.n	80021ba <HAL_GPIO_Init+0x152>
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	3b08      	subs	r3, #8
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	210f      	movs	r1, #15
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	401a      	ands	r2, r3
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	431a      	orrs	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80b1 	beq.w	800234a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021e8:	4b4d      	ldr	r3, [pc, #308]	; (8002320 <HAL_GPIO_Init+0x2b8>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4a4c      	ldr	r2, [pc, #304]	; (8002320 <HAL_GPIO_Init+0x2b8>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6193      	str	r3, [r2, #24]
 80021f4:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_GPIO_Init+0x2b8>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002200:	4a48      	ldr	r2, [pc, #288]	; (8002324 <HAL_GPIO_Init+0x2bc>)
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	220f      	movs	r2, #15
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4013      	ands	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a40      	ldr	r2, [pc, #256]	; (8002328 <HAL_GPIO_Init+0x2c0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <HAL_GPIO_Init+0x1ec>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3f      	ldr	r2, [pc, #252]	; (800232c <HAL_GPIO_Init+0x2c4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00d      	beq.n	8002250 <HAL_GPIO_Init+0x1e8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a3e      	ldr	r2, [pc, #248]	; (8002330 <HAL_GPIO_Init+0x2c8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d007      	beq.n	800224c <HAL_GPIO_Init+0x1e4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3d      	ldr	r2, [pc, #244]	; (8002334 <HAL_GPIO_Init+0x2cc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_GPIO_Init+0x1e0>
 8002244:	2303      	movs	r3, #3
 8002246:	e006      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002248:	2304      	movs	r3, #4
 800224a:	e004      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 800224c:	2302      	movs	r3, #2
 800224e:	e002      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002254:	2300      	movs	r3, #0
 8002256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002258:	f002 0203 	and.w	r2, r2, #3
 800225c:	0092      	lsls	r2, r2, #2
 800225e:	4093      	lsls	r3, r2
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002266:	492f      	ldr	r1, [pc, #188]	; (8002324 <HAL_GPIO_Init+0x2bc>)
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002280:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	492c      	ldr	r1, [pc, #176]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	608b      	str	r3, [r1, #8]
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800228e:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	43db      	mvns	r3, r3
 8002296:	4928      	ldr	r1, [pc, #160]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 8002298:	4013      	ands	r3, r2
 800229a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022a8:	4b23      	ldr	r3, [pc, #140]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	4922      	ldr	r1, [pc, #136]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60cb      	str	r3, [r1, #12]
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	43db      	mvns	r3, r3
 80022be:	491e      	ldr	r1, [pc, #120]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	4918      	ldr	r1, [pc, #96]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4914      	ldr	r1, [pc, #80]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d021      	beq.n	800233c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	490e      	ldr	r1, [pc, #56]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
 8002304:	e021      	b.n	800234a <HAL_GPIO_Init+0x2e2>
 8002306:	bf00      	nop
 8002308:	10320000 	.word	0x10320000
 800230c:	10310000 	.word	0x10310000
 8002310:	10220000 	.word	0x10220000
 8002314:	10210000 	.word	0x10210000
 8002318:	10120000 	.word	0x10120000
 800231c:	10110000 	.word	0x10110000
 8002320:	40021000 	.word	0x40021000
 8002324:	40010000 	.word	0x40010000
 8002328:	40010800 	.word	0x40010800
 800232c:	40010c00 	.word	0x40010c00
 8002330:	40011000 	.word	0x40011000
 8002334:	40011400 	.word	0x40011400
 8002338:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_GPIO_Init+0x304>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	43db      	mvns	r3, r3
 8002344:	4909      	ldr	r1, [pc, #36]	; (800236c <HAL_GPIO_Init+0x304>)
 8002346:	4013      	ands	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	3301      	adds	r3, #1
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	fa22 f303 	lsr.w	r3, r2, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	f47f ae8e 	bne.w	800207c <HAL_GPIO_Init+0x14>
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	372c      	adds	r7, #44	; 0x2c
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	40010400 	.word	0x40010400

08002370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	887b      	ldrh	r3, [r7, #2]
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	e001      	b.n	8002392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	807b      	strh	r3, [r7, #2]
 80023aa:	4613      	mov	r3, r2
 80023ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ae:	787b      	ldrb	r3, [r7, #1]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023ba:	e003      	b.n	80023c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	041a      	lsls	r2, r3, #16
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	611a      	str	r2, [r3, #16]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d006      	beq.n	80023f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f806 	bl	8002400 <HAL_GPIO_EXTI_Callback>
  }
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40010400 	.word	0x40010400

08002400 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e272      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8087 	beq.w	8002542 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002434:	4b92      	ldr	r3, [pc, #584]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b04      	cmp	r3, #4
 800243e:	d00c      	beq.n	800245a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002440:	4b8f      	ldr	r3, [pc, #572]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	d112      	bne.n	8002472 <HAL_RCC_OscConfig+0x5e>
 800244c:	4b8c      	ldr	r3, [pc, #560]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d10b      	bne.n	8002472 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245a:	4b89      	ldr	r3, [pc, #548]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d06c      	beq.n	8002540 <HAL_RCC_OscConfig+0x12c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d168      	bne.n	8002540 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e24c      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x76>
 800247c:	4b80      	ldr	r3, [pc, #512]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a7f      	ldr	r2, [pc, #508]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	e02e      	b.n	80024e8 <HAL_RCC_OscConfig+0xd4>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x98>
 8002492:	4b7b      	ldr	r3, [pc, #492]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a7a      	ldr	r2, [pc, #488]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b78      	ldr	r3, [pc, #480]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a77      	ldr	r2, [pc, #476]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e01d      	b.n	80024e8 <HAL_RCC_OscConfig+0xd4>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0xbc>
 80024b6:	4b72      	ldr	r3, [pc, #456]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a71      	ldr	r2, [pc, #452]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a6e      	ldr	r2, [pc, #440]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e00b      	b.n	80024e8 <HAL_RCC_OscConfig+0xd4>
 80024d0:	4b6b      	ldr	r3, [pc, #428]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a6a      	ldr	r2, [pc, #424]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b68      	ldr	r3, [pc, #416]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a67      	ldr	r2, [pc, #412]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d013      	beq.n	8002518 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7ff f9f6 	bl	80018e0 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7ff f9f2 	bl	80018e0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e200      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	4b5d      	ldr	r3, [pc, #372]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0xe4>
 8002516:	e014      	b.n	8002542 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff f9e2 	bl	80018e0 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7ff f9de 	bl	80018e0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1ec      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	4b53      	ldr	r3, [pc, #332]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x10c>
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d063      	beq.n	8002616 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800254e:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800255a:	4b49      	ldr	r3, [pc, #292]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b08      	cmp	r3, #8
 8002564:	d11c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x18c>
 8002566:	4b46      	ldr	r3, [pc, #280]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d116      	bne.n	80025a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	4b43      	ldr	r3, [pc, #268]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_RCC_OscConfig+0x176>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e1c0      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258a:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4939      	ldr	r1, [pc, #228]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	e03a      	b.n	8002616 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a8:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7ff f997 	bl	80018e0 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b6:	f7ff f993 	bl	80018e0 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e1a1      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c8:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d4:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4927      	ldr	r1, [pc, #156]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]
 80025e8:	e015      	b.n	8002616 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7ff f976 	bl	80018e0 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f8:	f7ff f972 	bl	80018e0 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e180      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d03a      	beq.n	8002698 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d019      	beq.n	800265e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002630:	f7ff f956 	bl	80018e0 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002638:	f7ff f952 	bl	80018e0 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e160      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002656:	2001      	movs	r0, #1
 8002658:	f000 fad0 	bl	8002bfc <RCC_Delay>
 800265c:	e01c      	b.n	8002698 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002664:	f7ff f93c 	bl	80018e0 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266a:	e00f      	b.n	800268c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266c:	f7ff f938 	bl	80018e0 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d908      	bls.n	800268c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e146      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	42420000 	.word	0x42420000
 8002688:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	4b92      	ldr	r3, [pc, #584]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1e9      	bne.n	800266c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80a6 	beq.w	80027f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026aa:	4b8b      	ldr	r3, [pc, #556]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10d      	bne.n	80026d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	4b88      	ldr	r3, [pc, #544]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4a87      	ldr	r2, [pc, #540]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c0:	61d3      	str	r3, [r2, #28]
 80026c2:	4b85      	ldr	r3, [pc, #532]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ce:	2301      	movs	r3, #1
 80026d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d2:	4b82      	ldr	r3, [pc, #520]	; (80028dc <HAL_RCC_OscConfig+0x4c8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d118      	bne.n	8002710 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026de:	4b7f      	ldr	r3, [pc, #508]	; (80028dc <HAL_RCC_OscConfig+0x4c8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7e      	ldr	r2, [pc, #504]	; (80028dc <HAL_RCC_OscConfig+0x4c8>)
 80026e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ea:	f7ff f8f9 	bl	80018e0 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f2:	f7ff f8f5 	bl	80018e0 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	; 0x64
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e103      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	4b75      	ldr	r3, [pc, #468]	; (80028dc <HAL_RCC_OscConfig+0x4c8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x312>
 8002718:	4b6f      	ldr	r3, [pc, #444]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a6e      	ldr	r2, [pc, #440]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6213      	str	r3, [r2, #32]
 8002724:	e02d      	b.n	8002782 <HAL_RCC_OscConfig+0x36e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0x334>
 800272e:	4b6a      	ldr	r3, [pc, #424]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4a69      	ldr	r2, [pc, #420]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	6213      	str	r3, [r2, #32]
 800273a:	4b67      	ldr	r3, [pc, #412]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4a66      	ldr	r2, [pc, #408]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	f023 0304 	bic.w	r3, r3, #4
 8002744:	6213      	str	r3, [r2, #32]
 8002746:	e01c      	b.n	8002782 <HAL_RCC_OscConfig+0x36e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b05      	cmp	r3, #5
 800274e:	d10c      	bne.n	800276a <HAL_RCC_OscConfig+0x356>
 8002750:	4b61      	ldr	r3, [pc, #388]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4a60      	ldr	r2, [pc, #384]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	f043 0304 	orr.w	r3, r3, #4
 800275a:	6213      	str	r3, [r2, #32]
 800275c:	4b5e      	ldr	r3, [pc, #376]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4a5d      	ldr	r2, [pc, #372]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6213      	str	r3, [r2, #32]
 8002768:	e00b      	b.n	8002782 <HAL_RCC_OscConfig+0x36e>
 800276a:	4b5b      	ldr	r3, [pc, #364]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	4a5a      	ldr	r2, [pc, #360]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	6213      	str	r3, [r2, #32]
 8002776:	4b58      	ldr	r3, [pc, #352]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	4a57      	ldr	r2, [pc, #348]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	f023 0304 	bic.w	r3, r3, #4
 8002780:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d015      	beq.n	80027b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278a:	f7ff f8a9 	bl	80018e0 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7ff f8a5 	bl	80018e0 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e0b1      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a8:	4b4b      	ldr	r3, [pc, #300]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0ee      	beq.n	8002792 <HAL_RCC_OscConfig+0x37e>
 80027b4:	e014      	b.n	80027e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b6:	f7ff f893 	bl	80018e0 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7ff f88f 	bl	80018e0 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e09b      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d4:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ee      	bne.n	80027be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d105      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e6:	4b3c      	ldr	r3, [pc, #240]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	4a3b      	ldr	r2, [pc, #236]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8087 	beq.w	800290a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027fc:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 030c 	and.w	r3, r3, #12
 8002804:	2b08      	cmp	r3, #8
 8002806:	d061      	beq.n	80028cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d146      	bne.n	800289e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002810:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <HAL_RCC_OscConfig+0x4cc>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7ff f863 	bl	80018e0 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281e:	f7ff f85f 	bl	80018e0 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e06d      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002830:	4b29      	ldr	r3, [pc, #164]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002844:	d108      	bne.n	8002858 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002846:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	4921      	ldr	r1, [pc, #132]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002858:	4b1f      	ldr	r3, [pc, #124]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a19      	ldr	r1, [r3, #32]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	430b      	orrs	r3, r1
 800286a:	491b      	ldr	r1, [pc, #108]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x4cc>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7ff f833 	bl	80018e0 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287e:	f7ff f82f 	bl	80018e0 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e03d      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x46a>
 800289c:	e035      	b.n	800290a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_RCC_OscConfig+0x4cc>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7ff f81c 	bl	80018e0 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ac:	f7ff f818 	bl	80018e0 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e026      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x498>
 80028ca:	e01e      	b.n	800290a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e019      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40007000 	.word	0x40007000
 80028e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_RCC_OscConfig+0x500>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d001      	beq.n	800290a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000

08002918 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0d0      	b.n	8002ace <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800292c:	4b6a      	ldr	r3, [pc, #424]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d910      	bls.n	800295c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b67      	ldr	r3, [pc, #412]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 0207 	bic.w	r2, r3, #7
 8002942:	4965      	ldr	r1, [pc, #404]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b63      	ldr	r3, [pc, #396]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0b8      	b.n	8002ace <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002974:	4b59      	ldr	r3, [pc, #356]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a58      	ldr	r2, [pc, #352]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800297e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800298c:	4b53      	ldr	r3, [pc, #332]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4a52      	ldr	r2, [pc, #328]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002996:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002998:	4b50      	ldr	r3, [pc, #320]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	494d      	ldr	r1, [pc, #308]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d040      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	4b47      	ldr	r3, [pc, #284]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d115      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e07f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d6:	4b41      	ldr	r3, [pc, #260]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e073      	b.n	8002ace <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e6:	4b3d      	ldr	r3, [pc, #244]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e06b      	b.n	8002ace <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f6:	4b39      	ldr	r3, [pc, #228]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f023 0203 	bic.w	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4936      	ldr	r1, [pc, #216]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a08:	f7fe ff6a 	bl	80018e0 <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a10:	f7fe ff66 	bl	80018e0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e053      	b.n	8002ace <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 020c 	and.w	r2, r3, #12
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d1eb      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a38:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d210      	bcs.n	8002a68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 0207 	bic.w	r2, r3, #7
 8002a4e:	4922      	ldr	r1, [pc, #136]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e032      	b.n	8002ace <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a74:	4b19      	ldr	r3, [pc, #100]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4916      	ldr	r1, [pc, #88]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	490e      	ldr	r1, [pc, #56]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aa6:	f000 f821 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	490a      	ldr	r1, [pc, #40]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab8:	5ccb      	ldrb	r3, [r1, r3]
 8002aba:	fa22 f303 	lsr.w	r3, r2, r3
 8002abe:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fec8 	bl	800185c <HAL_InitTick>

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40022000 	.word	0x40022000
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	080073d0 	.word	0x080073d0
 8002ae4:	20000024 	.word	0x20000024
 8002ae8:	20000028 	.word	0x20000028

08002aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	2300      	movs	r3, #0
 8002b00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b06:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d002      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x30>
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d003      	beq.n	8002b22 <HAL_RCC_GetSysClockFreq+0x36>
 8002b1a:	e027      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b1e:	613b      	str	r3, [r7, #16]
      break;
 8002b20:	e027      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	0c9b      	lsrs	r3, r3, #18
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	4a17      	ldr	r2, [pc, #92]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b2c:	5cd3      	ldrb	r3, [r2, r3]
 8002b2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d010      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	0c5b      	lsrs	r3, r3, #17
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a0d      	ldr	r2, [pc, #52]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b4e:	fb03 f202 	mul.w	r2, r3, r2
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	e004      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a0c      	ldr	r2, [pc, #48]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	613b      	str	r3, [r7, #16]
      break;
 8002b6a:	e002      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002b6e:	613b      	str	r3, [r7, #16]
      break;
 8002b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b72:	693b      	ldr	r3, [r7, #16]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	00f42400 	.word	0x00f42400
 8002b88:	080073e8 	.word	0x080073e8
 8002b8c:	080073f8 	.word	0x080073f8
 8002b90:	003d0900 	.word	0x003d0900
 8002b94:	007a1200 	.word	0x007a1200

08002b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b9c:	4b02      	ldr	r3, [pc, #8]	; (8002ba8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	20000024 	.word	0x20000024

08002bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bb0:	f7ff fff2 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	4903      	ldr	r1, [pc, #12]	; (8002bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	080073e0 	.word	0x080073e0

08002bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bd8:	f7ff ffde 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	0adb      	lsrs	r3, r3, #11
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4903      	ldr	r1, [pc, #12]	; (8002bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	080073e0 	.word	0x080073e0

08002bfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <RCC_Delay+0x34>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <RCC_Delay+0x38>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	0a5b      	lsrs	r3, r3, #9
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	fb02 f303 	mul.w	r3, r2, r3
 8002c16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c18:	bf00      	nop
  }
  while (Delay --);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1e5a      	subs	r2, r3, #1
 8002c1e:	60fa      	str	r2, [r7, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f9      	bne.n	8002c18 <RCC_Delay+0x1c>
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	20000024 	.word	0x20000024
 8002c34:	10624dd3 	.word	0x10624dd3

08002c38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e042      	b.n	8002cd0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe fcd2 	bl	8001608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	; 0x24
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f001 f8c3 	bl	8003e08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d16d      	bne.n	8002dd4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_UART_Transmit+0x2c>
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e066      	b.n	8002dd6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2221      	movs	r2, #33	; 0x21
 8002d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d16:	f7fe fde3 	bl	80018e0 <HAL_GetTick>
 8002d1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	88fa      	ldrh	r2, [r7, #6]
 8002d20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	88fa      	ldrh	r2, [r7, #6]
 8002d26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d30:	d108      	bne.n	8002d44 <HAL_UART_Transmit+0x6c>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d104      	bne.n	8002d44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	e003      	b.n	8002d4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d4c:	e02a      	b.n	8002da4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2200      	movs	r2, #0
 8002d56:	2180      	movs	r1, #128	; 0x80
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fd8a 	bl	8003872 <UART_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e036      	b.n	8002dd6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10b      	bne.n	8002d86 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	3302      	adds	r3, #2
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	e007      	b.n	8002d96 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	3301      	adds	r3, #1
 8002d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1cf      	bne.n	8002d4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2140      	movs	r1, #64	; 0x40
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 fd5a 	bl	8003872 <UART_WaitOnFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e006      	b.n	8002dd6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e000      	b.n	8002dd6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08c      	sub	sp, #48	; 0x30
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d156      	bne.n	8002ea8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_UART_Transmit_DMA+0x26>
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e04f      	b.n	8002eaa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	88fa      	ldrh	r2, [r7, #6]
 8002e14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2221      	movs	r2, #33	; 0x21
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <HAL_UART_Transmit_DMA+0xd4>)
 8002e30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <HAL_UART_Transmit_DMA+0xd8>)
 8002e38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <HAL_UART_Transmit_DMA+0xdc>)
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	2200      	movs	r2, #0
 8002e48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002e4a:	f107 0308 	add.w	r3, r7, #8
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	461a      	mov	r2, r3
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	f7fe feaf 	bl	8001bc4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3314      	adds	r3, #20
 8002e76:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	617b      	str	r3, [r7, #20]
   return(result);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3314      	adds	r3, #20
 8002e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e90:	627a      	str	r2, [r7, #36]	; 0x24
 8002e92:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	6a39      	ldr	r1, [r7, #32]
 8002e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e98:	e841 2300 	strex	r3, r2, [r1]
 8002e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e5      	bne.n	8002e70 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e000      	b.n	8002eaa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002ea8:	2302      	movs	r3, #2
  }
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3730      	adds	r7, #48	; 0x30
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	080035c1 	.word	0x080035c1
 8002eb8:	0800365b 	.word	0x0800365b
 8002ebc:	080037df 	.word	0x080037df

08002ec0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	d112      	bne.n	8002f00 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_UART_Receive_DMA+0x26>
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00b      	b.n	8002f02 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fd2a 	bl	8003950 <UART_Start_Receive_DMA>
 8002efc:	4603      	mov	r3, r0
 8002efe:	e000      	b.n	8002f02 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b09a      	sub	sp, #104	; 0x68
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	330c      	adds	r3, #12
 8002f18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f28:	667b      	str	r3, [r7, #100]	; 0x64
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	330c      	adds	r3, #12
 8002f30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002f32:	657a      	str	r2, [r7, #84]	; 0x54
 8002f34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002f38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e5      	bne.n	8002f12 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3314      	adds	r3, #20
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f50:	e853 3f00 	ldrex	r3, [r3]
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3314      	adds	r3, #20
 8002f64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f66:	643a      	str	r2, [r7, #64]	; 0x40
 8002f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1e5      	bne.n	8002f46 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d119      	bne.n	8002fb6 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	330c      	adds	r3, #12
 8002f88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	e853 3f00 	ldrex	r3, [r3]
 8002f90:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f023 0310 	bic.w	r3, r3, #16
 8002f98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	330c      	adds	r3, #12
 8002fa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002faa:	e841 2300 	strex	r3, r2, [r1]
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1e5      	bne.n	8002f82 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d036      	beq.n	8003032 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3314      	adds	r3, #20
 8002fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	e853 3f00 	ldrex	r3, [r3]
 8002fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fda:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3314      	adds	r3, #20
 8002fe2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fe4:	61ba      	str	r2, [r7, #24]
 8002fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe8:	6979      	ldr	r1, [r7, #20]
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	e841 2300 	strex	r3, r2, [r1]
 8002ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e5      	bne.n	8002fc4 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d018      	beq.n	8003032 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	2200      	movs	r2, #0
 8003006:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe fe39 	bl	8001c84 <HAL_DMA_Abort>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00c      	beq.n	8003032 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe ffeb 	bl	8001ff8 <HAL_DMA_GetError>
 8003022:	4603      	mov	r3, r0
 8003024:	2b20      	cmp	r3, #32
 8003026:	d104      	bne.n	8003032 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2210      	movs	r2, #16
 800302c:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e00a      	b.n	8003048 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3768      	adds	r7, #104	; 0x68
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b0ba      	sub	sp, #232	; 0xe8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800308e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10f      	bne.n	80030b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_UART_IRQHandler+0x66>
 80030a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fdec 	bl	8003c8c <UART_Receive_IT>
      return;
 80030b4:	e25b      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80de 	beq.w	800327c <HAL_UART_IRQHandler+0x22c>
 80030c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d106      	bne.n	80030da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80d1 	beq.w	800327c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_UART_IRQHandler+0xae>
 80030e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_UART_IRQHandler+0xd2>
 800310a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f043 0202 	orr.w	r2, r3, #2
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_UART_IRQHandler+0xf6>
 800312e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d011      	beq.n	8003176 <HAL_UART_IRQHandler+0x126>
 8003152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800315e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	f043 0208 	orr.w	r2, r3, #8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 81f2 	beq.w	8003564 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_UART_IRQHandler+0x14e>
 800318c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fd77 	bl	8003c8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf14      	ite	ne
 80031ac:	2301      	movne	r3, #1
 80031ae:	2300      	moveq	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <HAL_UART_IRQHandler+0x17a>
 80031c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d04f      	beq.n	800326a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fc81 	bl	8003ad2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d041      	beq.n	8003262 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3314      	adds	r3, #20
 80031e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3314      	adds	r3, #20
 8003206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800320a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800320e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1d9      	bne.n	80031de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d013      	beq.n	800325a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	4a7e      	ldr	r2, [pc, #504]	; (8003430 <HAL_UART_IRQHandler+0x3e0>)
 8003238:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fd5c 	bl	8001cfc <HAL_DMA_Abort_IT>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d016      	beq.n	8003278 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003254:	4610      	mov	r0, r2
 8003256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	e00e      	b.n	8003278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f99c 	bl	8003598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003260:	e00a      	b.n	8003278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f998 	bl	8003598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	e006      	b.n	8003278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f994 	bl	8003598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003276:	e175      	b.n	8003564 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003278:	bf00      	nop
    return;
 800327a:	e173      	b.n	8003564 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	2b01      	cmp	r3, #1
 8003282:	f040 814f 	bne.w	8003524 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8148 	beq.w	8003524 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8141 	beq.w	8003524 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80b6 	beq.w	8003434 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8145 	beq.w	8003568 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032e6:	429a      	cmp	r2, r3
 80032e8:	f080 813e 	bcs.w	8003568 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	f000 8088 	beq.w	8003410 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	330c      	adds	r3, #12
 8003306:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800330e:	e853 3f00 	ldrex	r3, [r3]
 8003312:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003316:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800331a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800331e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	330c      	adds	r3, #12
 8003328:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800332c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003330:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003334:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003338:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800333c:	e841 2300 	strex	r3, r2, [r1]
 8003340:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1d9      	bne.n	8003300 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3314      	adds	r3, #20
 8003352:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003356:	e853 3f00 	ldrex	r3, [r3]
 800335a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800335c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3314      	adds	r3, #20
 800336c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003370:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003374:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003378:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e1      	bne.n	800334c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3314      	adds	r3, #20
 800338e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800339a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800339e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3314      	adds	r3, #20
 80033a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033b4:	e841 2300 	strex	r3, r2, [r1]
 80033b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e3      	bne.n	8003388 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e0:	f023 0310 	bic.w	r3, r3, #16
 80033e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80033f4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e3      	bne.n	80033ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe fc3a 	bl	8001c84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800341e:	b29b      	uxth	r3, r3
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	b29b      	uxth	r3, r3
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8bf 	bl	80035aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800342c:	e09c      	b.n	8003568 <HAL_UART_IRQHandler+0x518>
 800342e:	bf00      	nop
 8003430:	08003b97 	.word	0x08003b97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800343c:	b29b      	uxth	r3, r3
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 808e 	beq.w	800356c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8089 	beq.w	800356c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003470:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800347e:	647a      	str	r2, [r7, #68]	; 0x44
 8003480:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800348c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e3      	bne.n	800345a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3314      	adds	r3, #20
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	623b      	str	r3, [r7, #32]
   return(result);
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3314      	adds	r3, #20
 80034b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034b6:	633a      	str	r2, [r7, #48]	; 0x30
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e3      	bne.n	8003492 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0310 	bic.w	r3, r3, #16
 80034ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	330c      	adds	r3, #12
 80034f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034fc:	61fa      	str	r2, [r7, #28]
 80034fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	69b9      	ldr	r1, [r7, #24]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	617b      	str	r3, [r7, #20]
   return(result);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e3      	bne.n	80034d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003516:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800351a:	4619      	mov	r1, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f844 	bl	80035aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003522:	e023      	b.n	800356c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <HAL_UART_IRQHandler+0x4f4>
 8003530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fb3e 	bl	8003bbe <UART_Transmit_IT>
    return;
 8003542:	e014      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <HAL_UART_IRQHandler+0x51e>
 8003550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fb7d 	bl	8003c5c <UART_EndTransmit_IT>
    return;
 8003562:	e004      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
    return;
 8003564:	bf00      	nop
 8003566:	e002      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
      return;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
      return;
 800356c:	bf00      	nop
  }
}
 800356e:	37e8      	adds	r7, #232	; 0xe8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b090      	sub	sp, #64	; 0x40
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d137      	bne.n	800364c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80035dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035de:	2200      	movs	r2, #0
 80035e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80035e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3314      	adds	r3, #20
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	e853 3f00 	ldrex	r3, [r3]
 80035f0:	623b      	str	r3, [r7, #32]
   return(result);
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80035fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3314      	adds	r3, #20
 8003600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003602:	633a      	str	r2, [r7, #48]	; 0x30
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360a:	e841 2300 	strex	r3, r2, [r1]
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e5      	bne.n	80035e2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	60fb      	str	r3, [r7, #12]
   return(result);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800362c:	637b      	str	r3, [r7, #52]	; 0x34
 800362e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003636:	61fa      	str	r2, [r7, #28]
 8003638:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	69b9      	ldr	r1, [r7, #24]
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	617b      	str	r3, [r7, #20]
   return(result);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e5      	bne.n	8003616 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800364a:	e002      	b.n	8003652 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800364c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800364e:	f7fd f923 	bl	8000898 <HAL_UART_TxCpltCallback>
}
 8003652:	bf00      	nop
 8003654:	3740      	adds	r7, #64	; 0x40
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7ff ff83 	bl	8003574 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b09c      	sub	sp, #112	; 0x70
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d172      	bne.n	8003778 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003694:	2200      	movs	r2, #0
 8003696:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	330c      	adds	r3, #12
 800369e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80036b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	330c      	adds	r3, #12
 80036b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80036ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e5      	bne.n	8003698 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3314      	adds	r3, #20
 80036d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	667b      	str	r3, [r7, #100]	; 0x64
 80036e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3314      	adds	r3, #20
 80036ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80036ec:	647a      	str	r2, [r7, #68]	; 0x44
 80036ee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3314      	adds	r3, #20
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	623b      	str	r3, [r7, #32]
   return(result);
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003716:	663b      	str	r3, [r7, #96]	; 0x60
 8003718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3314      	adds	r3, #20
 800371e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003720:	633a      	str	r2, [r7, #48]	; 0x30
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e5      	bne.n	8003700 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	2b01      	cmp	r3, #1
 8003742:	d119      	bne.n	8003778 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	330c      	adds	r3, #12
 800374a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	60fb      	str	r3, [r7, #12]
   return(result);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0310 	bic.w	r3, r3, #16
 800375a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800375c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003764:	61fa      	str	r2, [r7, #28]
 8003766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003768:	69b9      	ldr	r1, [r7, #24]
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	e841 2300 	strex	r3, r2, [r1]
 8003770:	617b      	str	r3, [r7, #20]
   return(result);
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e5      	bne.n	8003744 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377a:	2200      	movs	r2, #0
 800377c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800377e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	2b01      	cmp	r3, #1
 8003784:	d106      	bne.n	8003794 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003788:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800378a:	4619      	mov	r1, r3
 800378c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800378e:	f7ff ff0c 	bl	80035aa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003792:	e002      	b.n	800379a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003794:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003796:	f7fd f86f 	bl	8000878 <HAL_UART_RxCpltCallback>
}
 800379a:	bf00      	nop
 800379c:	3770      	adds	r7, #112	; 0x70
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d108      	bne.n	80037d0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	4619      	mov	r1, r3
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff feee 	bl	80035aa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037ce:	e002      	b.n	80037d6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7ff fed8 	bl	8003586 <HAL_UART_RxHalfCpltCallback>
}
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf14      	ite	ne
 80037fe:	2301      	movne	r3, #1
 8003800:	2300      	moveq	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b21      	cmp	r3, #33	; 0x21
 8003810:	d108      	bne.n	8003824 <UART_DMAError+0x46>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2200      	movs	r2, #0
 800381c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800381e:	68b8      	ldr	r0, [r7, #8]
 8003820:	f000 f930 	bl	8003a84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	bf14      	ite	ne
 8003832:	2301      	movne	r3, #1
 8003834:	2300      	moveq	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b22      	cmp	r3, #34	; 0x22
 8003844:	d108      	bne.n	8003858 <UART_DMAError+0x7a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2200      	movs	r2, #0
 8003850:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003852:	68b8      	ldr	r0, [r7, #8]
 8003854:	f000 f93d 	bl	8003ad2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	f043 0210 	orr.w	r2, r3, #16
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003864:	68b8      	ldr	r0, [r7, #8]
 8003866:	f7ff fe97 	bl	8003598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b090      	sub	sp, #64	; 0x40
 8003876:	af00      	add	r7, sp, #0
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	4613      	mov	r3, r2
 8003880:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003882:	e050      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800388a:	d04c      	beq.n	8003926 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800388c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003892:	f7fe f825 	bl	80018e0 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800389e:	429a      	cmp	r2, r3
 80038a0:	d241      	bcs.n	8003926 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	330c      	adds	r3, #12
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	330c      	adds	r3, #12
 80038c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038c2:	637a      	str	r2, [r7, #52]	; 0x34
 80038c4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e5      	bne.n	80038a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3314      	adds	r3, #20
 80038dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	613b      	str	r3, [r7, #16]
   return(result);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3314      	adds	r3, #20
 80038f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038f6:	623a      	str	r2, [r7, #32]
 80038f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	69f9      	ldr	r1, [r7, #28]
 80038fc:	6a3a      	ldr	r2, [r7, #32]
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	61bb      	str	r3, [r7, #24]
   return(result);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e5      	bne.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e00f      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4013      	ands	r3, r2
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	429a      	cmp	r2, r3
 8003934:	bf0c      	ite	eq
 8003936:	2301      	moveq	r3, #1
 8003938:	2300      	movne	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	429a      	cmp	r2, r3
 8003942:	d09f      	beq.n	8003884 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3740      	adds	r7, #64	; 0x40
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b098      	sub	sp, #96	; 0x60
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	4613      	mov	r3, r2
 800395c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2222      	movs	r2, #34	; 0x22
 8003974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397c:	4a3e      	ldr	r2, [pc, #248]	; (8003a78 <UART_Start_Receive_DMA+0x128>)
 800397e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003984:	4a3d      	ldr	r2, [pc, #244]	; (8003a7c <UART_Start_Receive_DMA+0x12c>)
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	4a3c      	ldr	r2, [pc, #240]	; (8003a80 <UART_Start_Receive_DMA+0x130>)
 800398e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003994:	2200      	movs	r2, #0
 8003996:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003998:	f107 0308 	add.w	r3, r7, #8
 800399c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	f7fe f908 	bl	8001bc4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80039b4:	2300      	movs	r3, #0
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d019      	beq.n	8003a06 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039f2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80039f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80039f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e5      	bne.n	80039d2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3314      	adds	r3, #20
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	657b      	str	r3, [r7, #84]	; 0x54
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3314      	adds	r3, #20
 8003a24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a26:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e5      	bne.n	8003a06 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3314      	adds	r3, #20
 8003a40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	617b      	str	r3, [r7, #20]
   return(result);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a50:	653b      	str	r3, [r7, #80]	; 0x50
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3314      	adds	r3, #20
 8003a58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a5a:	627a      	str	r2, [r7, #36]	; 0x24
 8003a5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6a39      	ldr	r1, [r7, #32]
 8003a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e5      	bne.n	8003a3a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3760      	adds	r7, #96	; 0x60
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	08003677 	.word	0x08003677
 8003a7c:	080037a3 	.word	0x080037a3
 8003a80:	080037df 	.word	0x080037df

08003a84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	; 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	61ba      	str	r2, [r7, #24]
 8003aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab0:	6979      	ldr	r1, [r7, #20]
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	e841 2300 	strex	r3, r2, [r1]
 8003ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e5      	bne.n	8003a8c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003ac8:	bf00      	nop
 8003aca:	3724      	adds	r7, #36	; 0x24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr

08003ad2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b095      	sub	sp, #84	; 0x54
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	330c      	adds	r3, #12
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003af0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	330c      	adds	r3, #12
 8003af8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003afa:	643a      	str	r2, [r7, #64]	; 0x40
 8003afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e5      	bne.n	8003ada <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3314      	adds	r3, #20
 8003b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3314      	adds	r3, #20
 8003b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e5      	bne.n	8003b0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d119      	bne.n	8003b7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	330c      	adds	r3, #12
 8003b50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f023 0310 	bic.w	r3, r3, #16
 8003b60:	647b      	str	r3, [r7, #68]	; 0x44
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	330c      	adds	r3, #12
 8003b68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b6a:	61ba      	str	r2, [r7, #24]
 8003b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	6979      	ldr	r1, [r7, #20]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	613b      	str	r3, [r7, #16]
   return(result);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e5      	bne.n	8003b4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b8c:	bf00      	nop
 8003b8e:	3754      	adds	r7, #84	; 0x54
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7ff fcf1 	bl	8003598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b21      	cmp	r3, #33	; 0x21
 8003bd0:	d13e      	bne.n	8003c50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bda:	d114      	bne.n	8003c06 <UART_Transmit_IT+0x48>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d110      	bne.n	8003c06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	1c9a      	adds	r2, r3, #2
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	621a      	str	r2, [r3, #32]
 8003c04:	e008      	b.n	8003c18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	1c59      	adds	r1, r3, #1
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6211      	str	r1, [r2, #32]
 8003c10:	781a      	ldrb	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4619      	mov	r1, r3
 8003c26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10f      	bne.n	8003c4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7fc fe0b 	bl	8000898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08c      	sub	sp, #48	; 0x30
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b22      	cmp	r3, #34	; 0x22
 8003c9e:	f040 80ae 	bne.w	8003dfe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003caa:	d117      	bne.n	8003cdc <UART_Receive_IT+0x50>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d113      	bne.n	8003cdc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	1c9a      	adds	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	629a      	str	r2, [r3, #40]	; 0x28
 8003cda:	e026      	b.n	8003d2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cee:	d007      	beq.n	8003d00 <UART_Receive_IT+0x74>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <UART_Receive_IT+0x82>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d106      	bne.n	8003d0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e008      	b.n	8003d20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	4619      	mov	r1, r3
 8003d38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d15d      	bne.n	8003dfa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0220 	bic.w	r2, r2, #32
 8003d4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d135      	bne.n	8003df0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	613b      	str	r3, [r7, #16]
   return(result);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f023 0310 	bic.w	r3, r3, #16
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003daa:	623a      	str	r2, [r7, #32]
 8003dac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	69f9      	ldr	r1, [r7, #28]
 8003db0:	6a3a      	ldr	r2, [r7, #32]
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e5      	bne.n	8003d8a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d10a      	bne.n	8003de2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff fbde 	bl	80035aa <HAL_UARTEx_RxEventCallback>
 8003dee:	e002      	b.n	8003df6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7fc fd41 	bl	8000878 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	e002      	b.n	8003e00 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e000      	b.n	8003e00 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003dfe:	2302      	movs	r3, #2
  }
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3730      	adds	r7, #48	; 0x30
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e42:	f023 030c 	bic.w	r3, r3, #12
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a2c      	ldr	r2, [pc, #176]	; (8003f1c <UART_SetConfig+0x114>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d103      	bne.n	8003e78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e70:	f7fe feb0 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	e002      	b.n	8003e7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e78:	f7fe fe98 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8003e7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	009a      	lsls	r2, r3, #2
 8003e88:	441a      	add	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	4a22      	ldr	r2, [pc, #136]	; (8003f20 <UART_SetConfig+0x118>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	0119      	lsls	r1, r3, #4
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009a      	lsls	r2, r3, #2
 8003ea8:	441a      	add	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb4:	4b1a      	ldr	r3, [pc, #104]	; (8003f20 <UART_SetConfig+0x118>)
 8003eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	2064      	movs	r0, #100	; 0x64
 8003ebe:	fb00 f303 	mul.w	r3, r0, r3
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	3332      	adds	r3, #50	; 0x32
 8003ec8:	4a15      	ldr	r2, [pc, #84]	; (8003f20 <UART_SetConfig+0x118>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed4:	4419      	add	r1, r3
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009a      	lsls	r2, r3, #2
 8003ee0:	441a      	add	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eec:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <UART_SetConfig+0x118>)
 8003eee:	fba3 0302 	umull	r0, r3, r3, r2
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2064      	movs	r0, #100	; 0x64
 8003ef6:	fb00 f303 	mul.w	r3, r0, r3
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	3332      	adds	r3, #50	; 0x32
 8003f00:	4a07      	ldr	r2, [pc, #28]	; (8003f20 <UART_SetConfig+0x118>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	f003 020f 	and.w	r2, r3, #15
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	440a      	add	r2, r1
 8003f12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40013800 	.word	0x40013800
 8003f20:	51eb851f 	.word	0x51eb851f

08003f24 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f2a:	f3ef 8305 	mrs	r3, IPSR
 8003f2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10f      	bne.n	8003f56 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f36:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3a:	607b      	str	r3, [r7, #4]
  return(result);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <osKernelInitialize+0x32>
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <osKernelInitialize+0x60>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d109      	bne.n	8003f5e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f4a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f4e:	603b      	str	r3, [r7, #0]
  return(result);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003f56:	f06f 0305 	mvn.w	r3, #5
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	e00c      	b.n	8003f78 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <osKernelInitialize+0x60>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d105      	bne.n	8003f72 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <osKernelInitialize+0x60>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	e002      	b.n	8003f78 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f78:	68fb      	ldr	r3, [r7, #12]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr
 8003f84:	2000216c 	.word	0x2000216c

08003f88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f8e:	f3ef 8305 	mrs	r3, IPSR
 8003f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10f      	bne.n	8003fba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f9e:	607b      	str	r3, [r7, #4]
  return(result);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <osKernelStart+0x32>
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <osKernelStart+0x64>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d109      	bne.n	8003fc2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fae:	f3ef 8311 	mrs	r3, BASEPRI
 8003fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003fba:	f06f 0305 	mvn.w	r3, #5
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e00e      	b.n	8003fe0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <osKernelStart+0x64>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d107      	bne.n	8003fda <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003fca:	4b08      	ldr	r3, [pc, #32]	; (8003fec <osKernelStart+0x64>)
 8003fcc:	2202      	movs	r2, #2
 8003fce:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003fd0:	f001 fb9e 	bl	8005710 <vTaskStartScheduler>
      stat = osOK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e002      	b.n	8003fe0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fde:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	2000216c 	.word	0x2000216c

08003ff0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b092      	sub	sp, #72	; 0x48
 8003ff4:	af04      	add	r7, sp, #16
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004000:	f3ef 8305 	mrs	r3, IPSR
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004008:	2b00      	cmp	r3, #0
 800400a:	f040 8094 	bne.w	8004136 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400e:	f3ef 8310 	mrs	r3, PRIMASK
 8004012:	623b      	str	r3, [r7, #32]
  return(result);
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f040 808d 	bne.w	8004136 <osThreadNew+0x146>
 800401c:	4b48      	ldr	r3, [pc, #288]	; (8004140 <osThreadNew+0x150>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d106      	bne.n	8004032 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004024:	f3ef 8311 	mrs	r3, BASEPRI
 8004028:	61fb      	str	r3, [r7, #28]
  return(result);
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	2b00      	cmp	r3, #0
 800402e:	f040 8082 	bne.w	8004136 <osThreadNew+0x146>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d07e      	beq.n	8004136 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800403c:	2318      	movs	r3, #24
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004040:	2300      	movs	r3, #0
 8004042:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004044:	f107 031b 	add.w	r3, r7, #27
 8004048:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800404a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d045      	beq.n	80040e2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <osThreadNew+0x74>
        name = attr->name;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <osThreadNew+0x9a>
 8004078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407a:	2b38      	cmp	r3, #56	; 0x38
 800407c:	d805      	bhi.n	800408a <osThreadNew+0x9a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <osThreadNew+0x9e>
        return (NULL);
 800408a:	2300      	movs	r3, #0
 800408c:	e054      	b.n	8004138 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	089b      	lsrs	r3, r3, #2
 800409c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00e      	beq.n	80040c4 <osThreadNew+0xd4>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2bbb      	cmp	r3, #187	; 0xbb
 80040ac:	d90a      	bls.n	80040c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d006      	beq.n	80040c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <osThreadNew+0xd4>
        mem = 1;
 80040be:	2301      	movs	r3, #1
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c2:	e010      	b.n	80040e6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10c      	bne.n	80040e6 <osThreadNew+0xf6>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d108      	bne.n	80040e6 <osThreadNew+0xf6>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d104      	bne.n	80040e6 <osThreadNew+0xf6>
          mem = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e0:	e001      	b.n	80040e6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d110      	bne.n	800410e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040f4:	9202      	str	r2, [sp, #8]
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004100:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f001 f920 	bl	8005348 <xTaskCreateStatic>
 8004108:	4603      	mov	r3, r0
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	e013      	b.n	8004136 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	2b00      	cmp	r3, #0
 8004112:	d110      	bne.n	8004136 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	b29a      	uxth	r2, r3
 8004118:	f107 0314 	add.w	r3, r7, #20
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f001 f96a 	bl	8005400 <xTaskCreate>
 800412c:	4603      	mov	r3, r0
 800412e:	2b01      	cmp	r3, #1
 8004130:	d001      	beq.n	8004136 <osThreadNew+0x146>
          hTask = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004136:	697b      	ldr	r3, [r7, #20]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3738      	adds	r7, #56	; 0x38
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	2000216c 	.word	0x2000216c

08004144 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800414c:	f3ef 8305 	mrs	r3, IPSR
 8004150:	613b      	str	r3, [r7, #16]
  return(result);
 8004152:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10f      	bne.n	8004178 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004158:	f3ef 8310 	mrs	r3, PRIMASK
 800415c:	60fb      	str	r3, [r7, #12]
  return(result);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <osDelay+0x34>
 8004164:	4b0d      	ldr	r3, [pc, #52]	; (800419c <osDelay+0x58>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d109      	bne.n	8004180 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800416c:	f3ef 8311 	mrs	r3, BASEPRI
 8004170:	60bb      	str	r3, [r7, #8]
  return(result);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <osDelay+0x3c>
    stat = osErrorISR;
 8004178:	f06f 0305 	mvn.w	r3, #5
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e007      	b.n	8004190 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <osDelay+0x4c>
      vTaskDelay(ticks);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f001 fa8c 	bl	80056a8 <vTaskDelay>
    }
  }

  return (stat);
 8004190:	697b      	ldr	r3, [r7, #20]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	2000216c 	.word	0x2000216c

080041a0 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041ac:	f3ef 8305 	mrs	r3, IPSR
 80041b0:	617b      	str	r3, [r7, #20]
  return(result);
 80041b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d13d      	bne.n	8004234 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b8:	f3ef 8310 	mrs	r3, PRIMASK
 80041bc:	613b      	str	r3, [r7, #16]
  return(result);
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d137      	bne.n	8004234 <osEventFlagsNew+0x94>
 80041c4:	4b1e      	ldr	r3, [pc, #120]	; (8004240 <osEventFlagsNew+0xa0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d105      	bne.n	80041d8 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041cc:	f3ef 8311 	mrs	r3, BASEPRI
 80041d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d12d      	bne.n	8004234 <osEventFlagsNew+0x94>
    mem = -1;
 80041d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d015      	beq.n	8004210 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d006      	beq.n	80041fa <osEventFlagsNew+0x5a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	2b1f      	cmp	r3, #31
 80041f2:	d902      	bls.n	80041fa <osEventFlagsNew+0x5a>
        mem = 1;
 80041f4:	2301      	movs	r3, #1
 80041f6:	61bb      	str	r3, [r7, #24]
 80041f8:	e00c      	b.n	8004214 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <osEventFlagsNew+0x74>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d104      	bne.n	8004214 <osEventFlagsNew+0x74>
          mem = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	e001      	b.n	8004214 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d106      	bne.n	8004228 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f910 	bl	8004444 <xEventGroupCreateStatic>
 8004224:	61f8      	str	r0, [r7, #28]
 8004226:	e005      	b.n	8004234 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800422e:	f000 f940 	bl	80044b2 <xEventGroupCreate>
 8004232:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004234:	69fb      	ldr	r3, [r7, #28]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	2000216c 	.word	0x2000216c

08004244 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d004      	beq.n	8004262 <osEventFlagsSet+0x1e>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004262:	f06f 0303 	mvn.w	r3, #3
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e03a      	b.n	80042e0 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800426a:	f3ef 8305 	mrs	r3, IPSR
 800426e:	617b      	str	r3, [r7, #20]
  return(result);
 8004270:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004276:	f3ef 8310 	mrs	r3, PRIMASK
 800427a:	613b      	str	r3, [r7, #16]
  return(result);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <osEventFlagsSet+0x52>
 8004282:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <osEventFlagsSet+0xa8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d123      	bne.n	80042d2 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800428a:	f3ef 8311 	mrs	r3, BASEPRI
 800428e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d01d      	beq.n	80042d2 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800429a:	f107 0308 	add.w	r3, r7, #8
 800429e:	461a      	mov	r2, r3
 80042a0:	6839      	ldr	r1, [r7, #0]
 80042a2:	69b8      	ldr	r0, [r7, #24]
 80042a4:	f000 faa8 	bl	80047f8 <xEventGroupSetBitsFromISR>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 80042ae:	f06f 0302 	mvn.w	r3, #2
 80042b2:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80042b4:	e013      	b.n	80042de <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00e      	beq.n	80042de <osEventFlagsSet+0x9a>
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <osEventFlagsSet+0xac>)
 80042c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80042d0:	e005      	b.n	80042de <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80042d2:	6839      	ldr	r1, [r7, #0]
 80042d4:	69b8      	ldr	r0, [r7, #24]
 80042d6:	f000 f9d5 	bl	8004684 <xEventGroupSetBits>
 80042da:	61f8      	str	r0, [r7, #28]
 80042dc:	e000      	b.n	80042e0 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80042de:	bf00      	nop
  }

  return (rflags);
 80042e0:	69fb      	ldr	r3, [r7, #28]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3720      	adds	r7, #32
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	2000216c 	.word	0x2000216c
 80042f0:	e000ed04 	.word	0xe000ed04

080042f4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08e      	sub	sp, #56	; 0x38
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d004      	beq.n	8004316 <osEventFlagsWait+0x22>
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8004316:	f06f 0303 	mvn.w	r3, #3
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
 800431c:	e059      	b.n	80043d2 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800431e:	f3ef 8305 	mrs	r3, IPSR
 8004322:	61fb      	str	r3, [r7, #28]
  return(result);
 8004324:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10f      	bne.n	800434a <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800432a:	f3ef 8310 	mrs	r3, PRIMASK
 800432e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <osEventFlagsWait+0x56>
 8004336:	4b29      	ldr	r3, [pc, #164]	; (80043dc <osEventFlagsWait+0xe8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d109      	bne.n	8004352 <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800433e:	f3ef 8311 	mrs	r3, BASEPRI
 8004342:	617b      	str	r3, [r7, #20]
  return(result);
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 800434a:	f06f 0305 	mvn.w	r3, #5
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
 8004350:	e03f      	b.n	80043d2 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 800435c:	2301      	movs	r3, #1
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004360:	e001      	b.n	8004366 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8004362:	2300      	movs	r3, #0
 8004364:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8004370:	2300      	movs	r3, #0
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
 8004374:	e001      	b.n	800437a <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8004376:	2301      	movs	r3, #1
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	6a38      	ldr	r0, [r7, #32]
 8004386:	f000 f8af 	bl	80044e8 <xEventGroupWaitBits>
 800438a:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00e      	beq.n	80043b4 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	429a      	cmp	r2, r3
 800439c:	d019      	beq.n	80043d2 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 80043a4:	f06f 0301 	mvn.w	r3, #1
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
 80043aa:	e012      	b.n	80043d2 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80043ac:	f06f 0302 	mvn.w	r3, #2
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
 80043b2:	e00e      	b.n	80043d2 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 80043c4:	f06f 0301 	mvn.w	r3, #1
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ca:	e002      	b.n	80043d2 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80043cc:	f06f 0302 	mvn.w	r3, #2
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3730      	adds	r7, #48	; 0x30
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	2000216c 	.word	0x2000216c

080043e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4a06      	ldr	r2, [pc, #24]	; (8004408 <vApplicationGetIdleTaskMemory+0x28>)
 80043f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4a05      	ldr	r2, [pc, #20]	; (800440c <vApplicationGetIdleTaskMemory+0x2c>)
 80043f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2280      	movs	r2, #128	; 0x80
 80043fc:	601a      	str	r2, [r3, #0]
}
 80043fe:	bf00      	nop
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	20002170 	.word	0x20002170
 800440c:	2000222c 	.word	0x2000222c

08004410 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4a07      	ldr	r2, [pc, #28]	; (800443c <vApplicationGetTimerTaskMemory+0x2c>)
 8004420:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4a06      	ldr	r2, [pc, #24]	; (8004440 <vApplicationGetTimerTaskMemory+0x30>)
 8004426:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800442e:	601a      	str	r2, [r3, #0]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	2000242c 	.word	0x2000242c
 8004440:	200024e8 	.word	0x200024e8

08004444 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004468:	2320      	movs	r3, #32
 800446a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b20      	cmp	r3, #32
 8004470:	d00a      	beq.n	8004488 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	60fb      	str	r3, [r7, #12]
}
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	3304      	adds	r3, #4
 800449c:	4618      	mov	r0, r3
 800449e:	f000 f9bf 	bl	8004820 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2201      	movs	r2, #1
 80044a6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80044a8:	697b      	ldr	r3, [r7, #20]
	}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80044b8:	2020      	movs	r0, #32
 80044ba:	f002 fc47 	bl	8006d4c <pvPortMalloc>
 80044be:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 f9a5 	bl	8004820 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80044dc:	687b      	ldr	r3, [r7, #4]
	}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b090      	sub	sp, #64	; 0x40
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80044fe:	2300      	movs	r3, #0
 8004500:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <xEventGroupWaitBits+0x36>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	623b      	str	r3, [r7, #32]
}
 800451a:	bf00      	nop
 800451c:	e7fe      	b.n	800451c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <xEventGroupWaitBits+0x56>
	__asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	61fb      	str	r3, [r7, #28]
}
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <xEventGroupWaitBits+0x72>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	61bb      	str	r3, [r7, #24]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800455a:	f001 fdd9 	bl	8006110 <xTaskGetSchedulerState>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <xEventGroupWaitBits+0x82>
 8004564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <xEventGroupWaitBits+0x86>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <xEventGroupWaitBits+0x88>
 800456e:	2300      	movs	r3, #0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	617b      	str	r3, [r7, #20]
}
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800458a:	f001 f931 	bl	80057f0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800458e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800459a:	f000 f90b 	bl	80047b4 <prvTestWaitCondition>
 800459e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00e      	beq.n	80045c4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d028      	beq.n	8004606 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80045b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	43db      	mvns	r3, r3
 80045bc:	401a      	ands	r2, r3
 80045be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e020      	b.n	8004606 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80045c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d104      	bne.n	80045d4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80045ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045cc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80045ce:	2301      	movs	r3, #1
 80045d0:	633b      	str	r3, [r7, #48]	; 0x30
 80045d2:	e018      	b.n	8004606 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80045e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045ee:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80045f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f2:	1d18      	adds	r0, r3, #4
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f8:	4313      	orrs	r3, r2
 80045fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045fc:	4619      	mov	r1, r3
 80045fe:	f001 faf7 	bl	8005bf0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004606:	f001 f901 	bl	800580c <xTaskResumeAll>
 800460a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800460c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460e:	2b00      	cmp	r3, #0
 8004610:	d031      	beq.n	8004676 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d107      	bne.n	8004628 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004618:	4b19      	ldr	r3, [pc, #100]	; (8004680 <xEventGroupWaitBits+0x198>)
 800461a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004628:	f001 fdfe 	bl	8006228 <uxTaskResetEventItemValue>
 800462c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800462e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11a      	bne.n	800466e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004638:	f002 fa88 	bl	8006b4c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800463c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004648:	f000 f8b4 	bl	80047b4 <prvTestWaitCondition>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d009      	beq.n	8004666 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d006      	beq.n	8004666 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	43db      	mvns	r3, r3
 8004660:	401a      	ands	r2, r3
 8004662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004664:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004666:	2301      	movs	r3, #1
 8004668:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800466a:	f002 fa9f 	bl	8006bac <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800466e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004670:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004674:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004678:	4618      	mov	r0, r3
 800467a:	3740      	adds	r7, #64	; 0x40
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08e      	sub	sp, #56	; 0x38
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800468e:	2300      	movs	r3, #0
 8004690:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004696:	2300      	movs	r3, #0
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <xEventGroupSetBits+0x32>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	613b      	str	r3, [r7, #16]
}
 80046b2:	bf00      	nop
 80046b4:	e7fe      	b.n	80046b4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <xEventGroupSetBits+0x52>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	60fb      	str	r3, [r7, #12]
}
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80046d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d8:	3304      	adds	r3, #4
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	3308      	adds	r3, #8
 80046e0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80046e2:	f001 f885 	bl	80057f0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80046f8:	e03c      	b.n	8004774 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80046fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004706:	2300      	movs	r3, #0
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004710:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004718:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d108      	bne.n	8004736 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00b      	beq.n	8004748 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004730:	2301      	movs	r3, #1
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004734:	e008      	b.n	8004748 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	429a      	cmp	r2, r3
 8004742:	d101      	bne.n	8004748 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004744:	2301      	movs	r3, #1
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d010      	beq.n	8004770 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	4313      	orrs	r3, r2
 800475e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004768:	4619      	mov	r1, r3
 800476a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800476c:	f001 fb0c 	bl	8005d88 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	429a      	cmp	r2, r3
 800477a:	d1be      	bne.n	80046fa <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	43db      	mvns	r3, r3
 8004784:	401a      	ands	r2, r3
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800478a:	f001 f83f 	bl	800580c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	681b      	ldr	r3, [r3, #0]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3738      	adds	r7, #56	; 0x38
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80047a4:	6839      	ldr	r1, [r7, #0]
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff ff6c 	bl	8004684 <xEventGroupSetBits>
}
 80047ac:	bf00      	nop
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d107      	bne.n	80047da <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80047d4:	2301      	movs	r3, #1
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	e007      	b.n	80047ea <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4013      	ands	r3, r2
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d101      	bne.n	80047ea <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80047e6:	2301      	movs	r3, #1
 80047e8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80047ea:	697b      	ldr	r3, [r7, #20]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
	...

080047f8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	68f9      	ldr	r1, [r7, #12]
 800480a:	4804      	ldr	r0, [pc, #16]	; (800481c <xEventGroupSetBitsFromISR+0x24>)
 800480c:	f002 f88a 	bl	8006924 <xTimerPendFunctionCallFromISR>
 8004810:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004812:	697b      	ldr	r3, [r7, #20]
	}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	0800479b 	.word	0x0800479b

08004820 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f103 0208 	add.w	r2, r3, #8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004838:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f103 0208 	add.w	r2, r3, #8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f103 0208 	add.w	r2, r3, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr

0800485e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr

08004876 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	601a      	str	r2, [r3, #0]
}
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048d2:	d103      	bne.n	80048dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e00c      	b.n	80048f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3308      	adds	r3, #8
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	e002      	b.n	80048ea <vListInsert+0x2e>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d2f6      	bcs.n	80048e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	601a      	str	r2, [r3, #0]
}
 8004922:	bf00      	nop
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6892      	ldr	r2, [r2, #8]
 8004942:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6852      	ldr	r2, [r2, #4]
 800494c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d103      	bne.n	8004960 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	1e5a      	subs	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr
	...

08004980 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <xQueueGenericReset+0x2a>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	60bb      	str	r3, [r7, #8]
}
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049aa:	f002 f8cf 	bl	8006b4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b6:	68f9      	ldr	r1, [r7, #12]
 80049b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	441a      	add	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049da:	3b01      	subs	r3, #1
 80049dc:	68f9      	ldr	r1, [r7, #12]
 80049de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	441a      	add	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	22ff      	movs	r2, #255	; 0xff
 80049ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	22ff      	movs	r2, #255	; 0xff
 80049f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d114      	bne.n	8004a2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01a      	beq.n	8004a3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3310      	adds	r3, #16
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f001 f957 	bl	8005cc0 <xTaskRemoveFromEventList>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d012      	beq.n	8004a3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <xQueueGenericReset+0xcc>)
 8004a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	e009      	b.n	8004a3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3310      	adds	r3, #16
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff fef6 	bl	8004820 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3324      	adds	r3, #36	; 0x24
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff fef1 	bl	8004820 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a3e:	f002 f8b5 	bl	8006bac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a42:	2301      	movs	r3, #1
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	e000ed04 	.word	0xe000ed04

08004a50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08e      	sub	sp, #56	; 0x38
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a76:	bf00      	nop
 8004a78:	e7fe      	b.n	8004a78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <xQueueGenericCreateStatic+0x52>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <xQueueGenericCreateStatic+0x56>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <xQueueGenericCreateStatic+0x58>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	623b      	str	r3, [r7, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	e7fe      	b.n	8004ac0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <xQueueGenericCreateStatic+0x7e>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <xQueueGenericCreateStatic+0x82>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <xQueueGenericCreateStatic+0x84>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	61fb      	str	r3, [r7, #28]
}
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004aee:	2350      	movs	r3, #80	; 0x50
 8004af0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b50      	cmp	r3, #80	; 0x50
 8004af6:	d00a      	beq.n	8004b0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	61bb      	str	r3, [r7, #24]
}
 8004b0a:	bf00      	nop
 8004b0c:	e7fe      	b.n	8004b0c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00d      	beq.n	8004b34 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b20:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f805 	bl	8004b3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3730      	adds	r7, #48	; 0x30
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	607a      	str	r2, [r7, #4]
 8004b4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d103      	bne.n	8004b5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e002      	b.n	8004b60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	69b8      	ldr	r0, [r7, #24]
 8004b70:	f7ff ff06 	bl	8004980 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08e      	sub	sp, #56	; 0x38
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b92:	2300      	movs	r3, #0
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <xQueueGenericSend+0x32>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bb2:	bf00      	nop
 8004bb4:	e7fe      	b.n	8004bb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d103      	bne.n	8004bc4 <xQueueGenericSend+0x40>
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <xQueueGenericSend+0x44>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <xQueueGenericSend+0x46>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <xQueueGenericSend+0x60>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d103      	bne.n	8004bf2 <xQueueGenericSend+0x6e>
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <xQueueGenericSend+0x72>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <xQueueGenericSend+0x74>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <xQueueGenericSend+0x8e>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	623b      	str	r3, [r7, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	e7fe      	b.n	8004c10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c12:	f001 fa7d 	bl	8006110 <xTaskGetSchedulerState>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d102      	bne.n	8004c22 <xQueueGenericSend+0x9e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <xQueueGenericSend+0xa2>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <xQueueGenericSend+0xa4>
 8004c26:	2300      	movs	r3, #0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xQueueGenericSend+0xbe>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	61fb      	str	r3, [r7, #28]
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c42:	f001 ff83 	bl	8006b4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d302      	bcc.n	8004c58 <xQueueGenericSend+0xd4>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d129      	bne.n	8004cac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c5e:	f000 fa07 	bl	8005070 <prvCopyDataToQueue>
 8004c62:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d010      	beq.n	8004c8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	3324      	adds	r3, #36	; 0x24
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 f825 	bl	8005cc0 <xTaskRemoveFromEventList>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d013      	beq.n	8004ca4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c7c:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <xQueueGenericSend+0x1f8>)
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	e00a      	b.n	8004ca4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c94:	4b39      	ldr	r3, [pc, #228]	; (8004d7c <xQueueGenericSend+0x1f8>)
 8004c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ca4:	f001 ff82 	bl	8006bac <vPortExitCritical>
				return pdPASS;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e063      	b.n	8004d74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d103      	bne.n	8004cba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cb2:	f001 ff7b 	bl	8006bac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e05c      	b.n	8004d74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d106      	bne.n	8004cce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cc0:	f107 0314 	add.w	r3, r7, #20
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 f8c1 	bl	8005e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cce:	f001 ff6d 	bl	8006bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cd2:	f000 fd8d 	bl	80057f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cd6:	f001 ff39 	bl	8006b4c <vPortEnterCritical>
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ce0:	b25b      	sxtb	r3, r3
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ce6:	d103      	bne.n	8004cf0 <xQueueGenericSend+0x16c>
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cf6:	b25b      	sxtb	r3, r3
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cfc:	d103      	bne.n	8004d06 <xQueueGenericSend+0x182>
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d06:	f001 ff51 	bl	8006bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d0a:	1d3a      	adds	r2, r7, #4
 8004d0c:	f107 0314 	add.w	r3, r7, #20
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f001 f8b0 	bl	8005e78 <xTaskCheckForTimeOut>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d124      	bne.n	8004d68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d20:	f000 fa9e 	bl	8005260 <prvIsQueueFull>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d018      	beq.n	8004d5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	3310      	adds	r3, #16
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 ff38 	bl	8005ba8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d3a:	f000 fa29 	bl	8005190 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d3e:	f000 fd65 	bl	800580c <xTaskResumeAll>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f47f af7c 	bne.w	8004c42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d4a:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <xQueueGenericSend+0x1f8>)
 8004d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	e772      	b.n	8004c42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d5e:	f000 fa17 	bl	8005190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d62:	f000 fd53 	bl	800580c <xTaskResumeAll>
 8004d66:	e76c      	b.n	8004c42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d6a:	f000 fa11 	bl	8005190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d6e:	f000 fd4d 	bl	800580c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d72:	2300      	movs	r3, #0
		}
	}
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3738      	adds	r7, #56	; 0x38
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	e000ed04 	.word	0xe000ed04

08004d80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08e      	sub	sp, #56	; 0x38
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d103      	bne.n	8004dbc <xQueueGenericSendFromISR+0x3c>
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <xQueueGenericSendFromISR+0x40>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <xQueueGenericSendFromISR+0x42>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	623b      	str	r3, [r7, #32]
}
 8004dd8:	bf00      	nop
 8004dda:	e7fe      	b.n	8004dda <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d103      	bne.n	8004dea <xQueueGenericSendFromISR+0x6a>
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <xQueueGenericSendFromISR+0x6e>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <xQueueGenericSendFromISR+0x70>
 8004dee:	2300      	movs	r3, #0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	61fb      	str	r3, [r7, #28]
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e0a:	f001 ff61 	bl	8006cd0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e0e:	f3ef 8211 	mrs	r2, BASEPRI
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	61ba      	str	r2, [r7, #24]
 8004e24:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e26:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d302      	bcc.n	8004e3c <xQueueGenericSendFromISR+0xbc>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d12c      	bne.n	8004e96 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e4c:	f000 f910 	bl	8005070 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e50:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e58:	d112      	bne.n	8004e80 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d016      	beq.n	8004e90 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	3324      	adds	r3, #36	; 0x24
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 ff2a 	bl	8005cc0 <xTaskRemoveFromEventList>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00e      	beq.n	8004e90 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00b      	beq.n	8004e90 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e007      	b.n	8004e90 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e84:	3301      	adds	r3, #1
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	b25a      	sxtb	r2, r3
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e90:	2301      	movs	r3, #1
 8004e92:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004e94:	e001      	b.n	8004e9a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ea4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3738      	adds	r7, #56	; 0x38
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08c      	sub	sp, #48	; 0x30
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <xQueueReceive+0x30>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	623b      	str	r3, [r7, #32]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <xQueueReceive+0x3e>
 8004ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <xQueueReceive+0x42>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <xQueueReceive+0x44>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <xQueueReceive+0x5e>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	61fb      	str	r3, [r7, #28]
}
 8004f0a:	bf00      	nop
 8004f0c:	e7fe      	b.n	8004f0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f0e:	f001 f8ff 	bl	8006110 <xTaskGetSchedulerState>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d102      	bne.n	8004f1e <xQueueReceive+0x6e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <xQueueReceive+0x72>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <xQueueReceive+0x74>
 8004f22:	2300      	movs	r3, #0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <xQueueReceive+0x8e>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	61bb      	str	r3, [r7, #24]
}
 8004f3a:	bf00      	nop
 8004f3c:	e7fe      	b.n	8004f3c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f3e:	f001 fe05 	bl	8006b4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d01f      	beq.n	8004f8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f52:	f000 f8f7 	bl	8005144 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	1e5a      	subs	r2, r3, #1
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00f      	beq.n	8004f86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	3310      	adds	r3, #16
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fea8 	bl	8005cc0 <xTaskRemoveFromEventList>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f76:	4b3d      	ldr	r3, [pc, #244]	; (800506c <xQueueReceive+0x1bc>)
 8004f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f86:	f001 fe11 	bl	8006bac <vPortExitCritical>
				return pdPASS;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e069      	b.n	8005062 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d103      	bne.n	8004f9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f94:	f001 fe0a 	bl	8006bac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e062      	b.n	8005062 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fa2:	f107 0310 	add.w	r3, r7, #16
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 ff50 	bl	8005e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fac:	2301      	movs	r3, #1
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fb0:	f001 fdfc 	bl	8006bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fb4:	f000 fc1c 	bl	80057f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fb8:	f001 fdc8 	bl	8006b4c <vPortEnterCritical>
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc2:	b25b      	sxtb	r3, r3
 8004fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fc8:	d103      	bne.n	8004fd2 <xQueueReceive+0x122>
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fd8:	b25b      	sxtb	r3, r3
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fde:	d103      	bne.n	8004fe8 <xQueueReceive+0x138>
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fe8:	f001 fde0 	bl	8006bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fec:	1d3a      	adds	r2, r7, #4
 8004fee:	f107 0310 	add.w	r3, r7, #16
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 ff3f 	bl	8005e78 <xTaskCheckForTimeOut>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d123      	bne.n	8005048 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005002:	f000 f917 	bl	8005234 <prvIsQueueEmpty>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d017      	beq.n	800503c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	3324      	adds	r3, #36	; 0x24
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fdc7 	bl	8005ba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800501a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800501c:	f000 f8b8 	bl	8005190 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005020:	f000 fbf4 	bl	800580c <xTaskResumeAll>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d189      	bne.n	8004f3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800502a:	4b10      	ldr	r3, [pc, #64]	; (800506c <xQueueReceive+0x1bc>)
 800502c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	e780      	b.n	8004f3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800503c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800503e:	f000 f8a7 	bl	8005190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005042:	f000 fbe3 	bl	800580c <xTaskResumeAll>
 8005046:	e77a      	b.n	8004f3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800504a:	f000 f8a1 	bl	8005190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800504e:	f000 fbdd 	bl	800580c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005054:	f000 f8ee 	bl	8005234 <prvIsQueueEmpty>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	f43f af6f 	beq.w	8004f3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005060:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005062:	4618      	mov	r0, r3
 8005064:	3730      	adds	r7, #48	; 0x30
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	e000ed04 	.word	0xe000ed04

08005070 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10d      	bne.n	80050aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d14d      	bne.n	8005132 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	4618      	mov	r0, r3
 800509c:	f001 f856 	bl	800614c <xTaskPriorityDisinherit>
 80050a0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	605a      	str	r2, [r3, #4]
 80050a8:	e043      	b.n	8005132 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d119      	bne.n	80050e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6898      	ldr	r0, [r3, #8]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	461a      	mov	r2, r3
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	f002 f844 	bl	8007148 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	441a      	add	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d32b      	bcc.n	8005132 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	609a      	str	r2, [r3, #8]
 80050e2:	e026      	b.n	8005132 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	68d8      	ldr	r0, [r3, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	461a      	mov	r2, r3
 80050ee:	68b9      	ldr	r1, [r7, #8]
 80050f0:	f002 f82a 	bl	8007148 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	425b      	negs	r3, r3
 80050fe:	441a      	add	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d207      	bcs.n	8005120 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	425b      	negs	r3, r3
 800511a:	441a      	add	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d105      	bne.n	8005132 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	3b01      	subs	r3, #1
 8005130:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800513a:	697b      	ldr	r3, [r7, #20]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d018      	beq.n	8005188 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	441a      	add	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	429a      	cmp	r2, r3
 800516e:	d303      	bcc.n	8005178 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68d9      	ldr	r1, [r3, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	461a      	mov	r2, r3
 8005182:	6838      	ldr	r0, [r7, #0]
 8005184:	f001 ffe0 	bl	8007148 <memcpy>
	}
}
 8005188:	bf00      	nop
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005198:	f001 fcd8 	bl	8006b4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051a4:	e011      	b.n	80051ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d012      	beq.n	80051d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3324      	adds	r3, #36	; 0x24
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fd84 	bl	8005cc0 <xTaskRemoveFromEventList>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051be:	f000 febd 	bl	8005f3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	dce9      	bgt.n	80051a6 <prvUnlockQueue+0x16>
 80051d2:	e000      	b.n	80051d6 <prvUnlockQueue+0x46>
					break;
 80051d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	22ff      	movs	r2, #255	; 0xff
 80051da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80051de:	f001 fce5 	bl	8006bac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051e2:	f001 fcb3 	bl	8006b4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051ee:	e011      	b.n	8005214 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d012      	beq.n	800521e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3310      	adds	r3, #16
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fd5f 	bl	8005cc0 <xTaskRemoveFromEventList>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005208:	f000 fe98 	bl	8005f3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800520c:	7bbb      	ldrb	r3, [r7, #14]
 800520e:	3b01      	subs	r3, #1
 8005210:	b2db      	uxtb	r3, r3
 8005212:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005218:	2b00      	cmp	r3, #0
 800521a:	dce9      	bgt.n	80051f0 <prvUnlockQueue+0x60>
 800521c:	e000      	b.n	8005220 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800521e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	22ff      	movs	r2, #255	; 0xff
 8005224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005228:	f001 fcc0 	bl	8006bac <vPortExitCritical>
}
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800523c:	f001 fc86 	bl	8006b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	d102      	bne.n	800524e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005248:	2301      	movs	r3, #1
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	e001      	b.n	8005252 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005252:	f001 fcab 	bl	8006bac <vPortExitCritical>

	return xReturn;
 8005256:	68fb      	ldr	r3, [r7, #12]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005268:	f001 fc70 	bl	8006b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005274:	429a      	cmp	r2, r3
 8005276:	d102      	bne.n	800527e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005278:	2301      	movs	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e001      	b.n	8005282 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005282:	f001 fc93 	bl	8006bac <vPortExitCritical>

	return xReturn;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	e014      	b.n	80052ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052a0:	4a0e      	ldr	r2, [pc, #56]	; (80052dc <vQueueAddToRegistry+0x4c>)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10b      	bne.n	80052c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052ac:	490b      	ldr	r1, [pc, #44]	; (80052dc <vQueueAddToRegistry+0x4c>)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052b6:	4a09      	ldr	r2, [pc, #36]	; (80052dc <vQueueAddToRegistry+0x4c>)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	4413      	add	r3, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052c2:	e006      	b.n	80052d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3301      	adds	r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b07      	cmp	r3, #7
 80052ce:	d9e7      	bls.n	80052a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052d0:	bf00      	nop
 80052d2:	bf00      	nop
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr
 80052dc:	200028e8 	.word	0x200028e8

080052e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052f0:	f001 fc2c 	bl	8006b4c <vPortEnterCritical>
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052fa:	b25b      	sxtb	r3, r3
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005300:	d103      	bne.n	800530a <vQueueWaitForMessageRestricted+0x2a>
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005310:	b25b      	sxtb	r3, r3
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005316:	d103      	bne.n	8005320 <vQueueWaitForMessageRestricted+0x40>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005320:	f001 fc44 	bl	8006bac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	2b00      	cmp	r3, #0
 800532a:	d106      	bne.n	800533a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	3324      	adds	r3, #36	; 0x24
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fc97 	bl	8005c68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800533a:	6978      	ldr	r0, [r7, #20]
 800533c:	f7ff ff28 	bl	8005190 <prvUnlockQueue>
	}
 8005340:	bf00      	nop
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08e      	sub	sp, #56	; 0x38
 800534c:	af04      	add	r7, sp, #16
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <xTaskCreateStatic+0x2a>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	623b      	str	r3, [r7, #32]
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10a      	bne.n	800538e <xTaskCreateStatic+0x46>
	__asm volatile
 8005378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	61fb      	str	r3, [r7, #28]
}
 800538a:	bf00      	nop
 800538c:	e7fe      	b.n	800538c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800538e:	23bc      	movs	r3, #188	; 0xbc
 8005390:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2bbc      	cmp	r3, #188	; 0xbc
 8005396:	d00a      	beq.n	80053ae <xTaskCreateStatic+0x66>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	61bb      	str	r3, [r7, #24]
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01e      	beq.n	80053f2 <xTaskCreateStatic+0xaa>
 80053b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01b      	beq.n	80053f2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053cc:	2300      	movs	r3, #0
 80053ce:	9303      	str	r3, [sp, #12]
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	9302      	str	r3, [sp, #8]
 80053d4:	f107 0314 	add.w	r3, r7, #20
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f851 	bl	800548c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ec:	f000 f8ec 	bl	80055c8 <prvAddNewTaskToReadyList>
 80053f0:	e001      	b.n	80053f6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053f6:	697b      	ldr	r3, [r7, #20]
	}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3728      	adds	r7, #40	; 0x28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08c      	sub	sp, #48	; 0x30
 8005404:	af04      	add	r7, sp, #16
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	4613      	mov	r3, r2
 800540e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4618      	mov	r0, r3
 8005416:	f001 fc99 	bl	8006d4c <pvPortMalloc>
 800541a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00e      	beq.n	8005440 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005422:	20bc      	movs	r0, #188	; 0xbc
 8005424:	f001 fc92 	bl	8006d4c <pvPortMalloc>
 8005428:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	631a      	str	r2, [r3, #48]	; 0x30
 8005436:	e005      	b.n	8005444 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005438:	6978      	ldr	r0, [r7, #20]
 800543a:	f001 fd4b 	bl	8006ed4 <vPortFree>
 800543e:	e001      	b.n	8005444 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d017      	beq.n	800547a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005452:	88fa      	ldrh	r2, [r7, #6]
 8005454:	2300      	movs	r3, #0
 8005456:	9303      	str	r3, [sp, #12]
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	9302      	str	r3, [sp, #8]
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f80f 	bl	800548c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800546e:	69f8      	ldr	r0, [r7, #28]
 8005470:	f000 f8aa 	bl	80055c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005474:	2301      	movs	r3, #1
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	e002      	b.n	8005480 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800547a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800547e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005480:	69bb      	ldr	r3, [r7, #24]
	}
 8005482:	4618      	mov	r0, r3
 8005484:	3720      	adds	r7, #32
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	461a      	mov	r2, r3
 80054a4:	21a5      	movs	r1, #165	; 0xa5
 80054a6:	f001 fe5d 	bl	8007164 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054b4:	3b01      	subs	r3, #1
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	f023 0307 	bic.w	r3, r3, #7
 80054c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	617b      	str	r3, [r7, #20]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054e4:	2300      	movs	r3, #0
 80054e6:	61fb      	str	r3, [r7, #28]
 80054e8:	e012      	b.n	8005510 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	4413      	add	r3, r2
 80054f0:	7819      	ldrb	r1, [r3, #0]
 80054f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	3334      	adds	r3, #52	; 0x34
 80054fa:	460a      	mov	r2, r1
 80054fc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	4413      	add	r3, r2
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d006      	beq.n	8005518 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3301      	adds	r3, #1
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	2b0f      	cmp	r3, #15
 8005514:	d9e9      	bls.n	80054ea <prvInitialiseNewTask+0x5e>
 8005516:	e000      	b.n	800551a <prvInitialiseNewTask+0x8e>
		{
			break;
 8005518:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	2b37      	cmp	r3, #55	; 0x37
 8005526:	d901      	bls.n	800552c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005528:	2337      	movs	r3, #55	; 0x37
 800552a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005530:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005536:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	2200      	movs	r2, #0
 800553c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	3304      	adds	r3, #4
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff f98b 	bl	800485e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	3318      	adds	r3, #24
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff f986 	bl	800485e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005556:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005566:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	2200      	movs	r2, #0
 800556c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	2200      	movs	r2, #0
 8005574:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	3354      	adds	r3, #84	; 0x54
 800557c:	2260      	movs	r2, #96	; 0x60
 800557e:	2100      	movs	r1, #0
 8005580:	4618      	mov	r0, r3
 8005582:	f001 fdef 	bl	8007164 <memset>
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	4a0c      	ldr	r2, [pc, #48]	; (80055bc <prvInitialiseNewTask+0x130>)
 800558a:	659a      	str	r2, [r3, #88]	; 0x58
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	4a0c      	ldr	r2, [pc, #48]	; (80055c0 <prvInitialiseNewTask+0x134>)
 8005590:	65da      	str	r2, [r3, #92]	; 0x5c
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	4a0b      	ldr	r2, [pc, #44]	; (80055c4 <prvInitialiseNewTask+0x138>)
 8005596:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	68f9      	ldr	r1, [r7, #12]
 800559c:	69b8      	ldr	r0, [r7, #24]
 800559e:	f001 f9e1 	bl	8006964 <pxPortInitialiseStack>
 80055a2:	4602      	mov	r2, r0
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055b4:	bf00      	nop
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	0800741c 	.word	0x0800741c
 80055c0:	0800743c 	.word	0x0800743c
 80055c4:	080073fc 	.word	0x080073fc

080055c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055d0:	f001 fabc 	bl	8006b4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055d4:	4b2d      	ldr	r3, [pc, #180]	; (800568c <prvAddNewTaskToReadyList+0xc4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	4a2c      	ldr	r2, [pc, #176]	; (800568c <prvAddNewTaskToReadyList+0xc4>)
 80055dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055de:	4b2c      	ldr	r3, [pc, #176]	; (8005690 <prvAddNewTaskToReadyList+0xc8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055e6:	4a2a      	ldr	r2, [pc, #168]	; (8005690 <prvAddNewTaskToReadyList+0xc8>)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055ec:	4b27      	ldr	r3, [pc, #156]	; (800568c <prvAddNewTaskToReadyList+0xc4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d110      	bne.n	8005616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055f4:	f000 fcc6 	bl	8005f84 <prvInitialiseTaskLists>
 80055f8:	e00d      	b.n	8005616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055fa:	4b26      	ldr	r3, [pc, #152]	; (8005694 <prvAddNewTaskToReadyList+0xcc>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005602:	4b23      	ldr	r3, [pc, #140]	; (8005690 <prvAddNewTaskToReadyList+0xc8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	429a      	cmp	r2, r3
 800560e:	d802      	bhi.n	8005616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005610:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <prvAddNewTaskToReadyList+0xc8>)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005616:	4b20      	ldr	r3, [pc, #128]	; (8005698 <prvAddNewTaskToReadyList+0xd0>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3301      	adds	r3, #1
 800561c:	4a1e      	ldr	r2, [pc, #120]	; (8005698 <prvAddNewTaskToReadyList+0xd0>)
 800561e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005620:	4b1d      	ldr	r3, [pc, #116]	; (8005698 <prvAddNewTaskToReadyList+0xd0>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	4b1b      	ldr	r3, [pc, #108]	; (800569c <prvAddNewTaskToReadyList+0xd4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d903      	bls.n	800563c <prvAddNewTaskToReadyList+0x74>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	4a18      	ldr	r2, [pc, #96]	; (800569c <prvAddNewTaskToReadyList+0xd4>)
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <prvAddNewTaskToReadyList+0xd8>)
 800564a:	441a      	add	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3304      	adds	r3, #4
 8005650:	4619      	mov	r1, r3
 8005652:	4610      	mov	r0, r2
 8005654:	f7ff f90f 	bl	8004876 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005658:	f001 faa8 	bl	8006bac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800565c:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <prvAddNewTaskToReadyList+0xcc>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00e      	beq.n	8005682 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005664:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <prvAddNewTaskToReadyList+0xc8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	429a      	cmp	r2, r3
 8005670:	d207      	bcs.n	8005682 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005672:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <prvAddNewTaskToReadyList+0xdc>)
 8005674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20002dfc 	.word	0x20002dfc
 8005690:	20002928 	.word	0x20002928
 8005694:	20002e08 	.word	0x20002e08
 8005698:	20002e18 	.word	0x20002e18
 800569c:	20002e04 	.word	0x20002e04
 80056a0:	2000292c 	.word	0x2000292c
 80056a4:	e000ed04 	.word	0xe000ed04

080056a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d017      	beq.n	80056ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056ba:	4b13      	ldr	r3, [pc, #76]	; (8005708 <vTaskDelay+0x60>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <vTaskDelay+0x30>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	60bb      	str	r3, [r7, #8]
}
 80056d4:	bf00      	nop
 80056d6:	e7fe      	b.n	80056d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056d8:	f000 f88a 	bl	80057f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056dc:	2100      	movs	r1, #0
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fdba 	bl	8006258 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056e4:	f000 f892 	bl	800580c <xTaskResumeAll>
 80056e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d107      	bne.n	8005700 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <vTaskDelay+0x64>)
 80056f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20002e24 	.word	0x20002e24
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	; 0x28
 8005714:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005716:	2300      	movs	r3, #0
 8005718:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800571e:	463a      	mov	r2, r7
 8005720:	1d39      	adds	r1, r7, #4
 8005722:	f107 0308 	add.w	r3, r7, #8
 8005726:	4618      	mov	r0, r3
 8005728:	f7fe fe5a 	bl	80043e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	9202      	str	r2, [sp, #8]
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	2300      	movs	r3, #0
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	2300      	movs	r3, #0
 800573c:	460a      	mov	r2, r1
 800573e:	4924      	ldr	r1, [pc, #144]	; (80057d0 <vTaskStartScheduler+0xc0>)
 8005740:	4824      	ldr	r0, [pc, #144]	; (80057d4 <vTaskStartScheduler+0xc4>)
 8005742:	f7ff fe01 	bl	8005348 <xTaskCreateStatic>
 8005746:	4603      	mov	r3, r0
 8005748:	4a23      	ldr	r2, [pc, #140]	; (80057d8 <vTaskStartScheduler+0xc8>)
 800574a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800574c:	4b22      	ldr	r3, [pc, #136]	; (80057d8 <vTaskStartScheduler+0xc8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005754:	2301      	movs	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	e001      	b.n	800575e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d102      	bne.n	800576a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005764:	f000 fdcc 	bl	8006300 <xTimerCreateTimerTask>
 8005768:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d11b      	bne.n	80057a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	613b      	str	r3, [r7, #16]
}
 8005782:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005784:	4b15      	ldr	r3, [pc, #84]	; (80057dc <vTaskStartScheduler+0xcc>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3354      	adds	r3, #84	; 0x54
 800578a:	4a15      	ldr	r2, [pc, #84]	; (80057e0 <vTaskStartScheduler+0xd0>)
 800578c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800578e:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <vTaskStartScheduler+0xd4>)
 8005790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005794:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005796:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <vTaskStartScheduler+0xd8>)
 8005798:	2201      	movs	r2, #1
 800579a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800579c:	4b13      	ldr	r3, [pc, #76]	; (80057ec <vTaskStartScheduler+0xdc>)
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057a2:	f001 f961 	bl	8006a68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057a6:	e00e      	b.n	80057c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ae:	d10a      	bne.n	80057c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	60fb      	str	r3, [r7, #12]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <vTaskStartScheduler+0xb4>
}
 80057c6:	bf00      	nop
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	0800733c 	.word	0x0800733c
 80057d4:	08005f55 	.word	0x08005f55
 80057d8:	20002e20 	.word	0x20002e20
 80057dc:	20002928 	.word	0x20002928
 80057e0:	20000034 	.word	0x20000034
 80057e4:	20002e1c 	.word	0x20002e1c
 80057e8:	20002e08 	.word	0x20002e08
 80057ec:	20002e00 	.word	0x20002e00

080057f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057f4:	4b04      	ldr	r3, [pc, #16]	; (8005808 <vTaskSuspendAll+0x18>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3301      	adds	r3, #1
 80057fa:	4a03      	ldr	r2, [pc, #12]	; (8005808 <vTaskSuspendAll+0x18>)
 80057fc:	6013      	str	r3, [r2, #0]
}
 80057fe:	bf00      	nop
 8005800:	46bd      	mov	sp, r7
 8005802:	bc80      	pop	{r7}
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	20002e24 	.word	0x20002e24

0800580c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005816:	2300      	movs	r3, #0
 8005818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800581a:	4b42      	ldr	r3, [pc, #264]	; (8005924 <xTaskResumeAll+0x118>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <xTaskResumeAll+0x2c>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	603b      	str	r3, [r7, #0]
}
 8005834:	bf00      	nop
 8005836:	e7fe      	b.n	8005836 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005838:	f001 f988 	bl	8006b4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800583c:	4b39      	ldr	r3, [pc, #228]	; (8005924 <xTaskResumeAll+0x118>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3b01      	subs	r3, #1
 8005842:	4a38      	ldr	r2, [pc, #224]	; (8005924 <xTaskResumeAll+0x118>)
 8005844:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005846:	4b37      	ldr	r3, [pc, #220]	; (8005924 <xTaskResumeAll+0x118>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d162      	bne.n	8005914 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800584e:	4b36      	ldr	r3, [pc, #216]	; (8005928 <xTaskResumeAll+0x11c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d05e      	beq.n	8005914 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005856:	e02f      	b.n	80058b8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005858:	4b34      	ldr	r3, [pc, #208]	; (800592c <xTaskResumeAll+0x120>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3318      	adds	r3, #24
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff f861 	bl	800492c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3304      	adds	r3, #4
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff f85c 	bl	800492c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005878:	4b2d      	ldr	r3, [pc, #180]	; (8005930 <xTaskResumeAll+0x124>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d903      	bls.n	8005888 <xTaskResumeAll+0x7c>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	4a2a      	ldr	r2, [pc, #168]	; (8005930 <xTaskResumeAll+0x124>)
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4a27      	ldr	r2, [pc, #156]	; (8005934 <xTaskResumeAll+0x128>)
 8005896:	441a      	add	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3304      	adds	r3, #4
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f7fe ffe9 	bl	8004876 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a8:	4b23      	ldr	r3, [pc, #140]	; (8005938 <xTaskResumeAll+0x12c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d302      	bcc.n	80058b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80058b2:	4b22      	ldr	r3, [pc, #136]	; (800593c <xTaskResumeAll+0x130>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058b8:	4b1c      	ldr	r3, [pc, #112]	; (800592c <xTaskResumeAll+0x120>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1cb      	bne.n	8005858 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058c6:	f000 fbff 	bl	80060c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058ca:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <xTaskResumeAll+0x134>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d010      	beq.n	80058f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058d6:	f000 f845 	bl	8005964 <xTaskIncrementTick>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80058e0:	4b16      	ldr	r3, [pc, #88]	; (800593c <xTaskResumeAll+0x130>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f1      	bne.n	80058d6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80058f2:	4b13      	ldr	r3, [pc, #76]	; (8005940 <xTaskResumeAll+0x134>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058f8:	4b10      	ldr	r3, [pc, #64]	; (800593c <xTaskResumeAll+0x130>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d009      	beq.n	8005914 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005900:	2301      	movs	r3, #1
 8005902:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005904:	4b0f      	ldr	r3, [pc, #60]	; (8005944 <xTaskResumeAll+0x138>)
 8005906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005914:	f001 f94a 	bl	8006bac <vPortExitCritical>

	return xAlreadyYielded;
 8005918:	68bb      	ldr	r3, [r7, #8]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	20002e24 	.word	0x20002e24
 8005928:	20002dfc 	.word	0x20002dfc
 800592c:	20002dbc 	.word	0x20002dbc
 8005930:	20002e04 	.word	0x20002e04
 8005934:	2000292c 	.word	0x2000292c
 8005938:	20002928 	.word	0x20002928
 800593c:	20002e10 	.word	0x20002e10
 8005940:	20002e0c 	.word	0x20002e0c
 8005944:	e000ed04 	.word	0xe000ed04

08005948 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800594e:	4b04      	ldr	r3, [pc, #16]	; (8005960 <xTaskGetTickCount+0x18>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005954:	687b      	ldr	r3, [r7, #4]
}
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr
 8005960:	20002e00 	.word	0x20002e00

08005964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800596e:	4b51      	ldr	r3, [pc, #324]	; (8005ab4 <xTaskIncrementTick+0x150>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	f040 808e 	bne.w	8005a94 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005978:	4b4f      	ldr	r3, [pc, #316]	; (8005ab8 <xTaskIncrementTick+0x154>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3301      	adds	r3, #1
 800597e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005980:	4a4d      	ldr	r2, [pc, #308]	; (8005ab8 <xTaskIncrementTick+0x154>)
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d120      	bne.n	80059ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800598c:	4b4b      	ldr	r3, [pc, #300]	; (8005abc <xTaskIncrementTick+0x158>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <xTaskIncrementTick+0x48>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	603b      	str	r3, [r7, #0]
}
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <xTaskIncrementTick+0x46>
 80059ac:	4b43      	ldr	r3, [pc, #268]	; (8005abc <xTaskIncrementTick+0x158>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	4b43      	ldr	r3, [pc, #268]	; (8005ac0 <xTaskIncrementTick+0x15c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a41      	ldr	r2, [pc, #260]	; (8005abc <xTaskIncrementTick+0x158>)
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4a41      	ldr	r2, [pc, #260]	; (8005ac0 <xTaskIncrementTick+0x15c>)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	4b40      	ldr	r3, [pc, #256]	; (8005ac4 <xTaskIncrementTick+0x160>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3301      	adds	r3, #1
 80059c6:	4a3f      	ldr	r2, [pc, #252]	; (8005ac4 <xTaskIncrementTick+0x160>)
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	f000 fb7d 	bl	80060c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059ce:	4b3e      	ldr	r3, [pc, #248]	; (8005ac8 <xTaskIncrementTick+0x164>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d34e      	bcc.n	8005a76 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059d8:	4b38      	ldr	r3, [pc, #224]	; (8005abc <xTaskIncrementTick+0x158>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <xTaskIncrementTick+0x82>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e000      	b.n	80059e8 <xTaskIncrementTick+0x84>
 80059e6:	2300      	movs	r3, #0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d004      	beq.n	80059f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ec:	4b36      	ldr	r3, [pc, #216]	; (8005ac8 <xTaskIncrementTick+0x164>)
 80059ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059f2:	601a      	str	r2, [r3, #0]
					break;
 80059f4:	e03f      	b.n	8005a76 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059f6:	4b31      	ldr	r3, [pc, #196]	; (8005abc <xTaskIncrementTick+0x158>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d203      	bcs.n	8005a16 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a0e:	4a2e      	ldr	r2, [pc, #184]	; (8005ac8 <xTaskIncrementTick+0x164>)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6013      	str	r3, [r2, #0]
						break;
 8005a14:	e02f      	b.n	8005a76 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fe ff86 	bl	800492c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d004      	beq.n	8005a32 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	3318      	adds	r3, #24
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe ff7d 	bl	800492c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a36:	4b25      	ldr	r3, [pc, #148]	; (8005acc <xTaskIncrementTick+0x168>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d903      	bls.n	8005a46 <xTaskIncrementTick+0xe2>
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	4a22      	ldr	r2, [pc, #136]	; (8005acc <xTaskIncrementTick+0x168>)
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4a1f      	ldr	r2, [pc, #124]	; (8005ad0 <xTaskIncrementTick+0x16c>)
 8005a54:	441a      	add	r2, r3
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	f7fe ff0a 	bl	8004876 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a66:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <xTaskIncrementTick+0x170>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d3b3      	bcc.n	80059d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a70:	2301      	movs	r3, #1
 8005a72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a74:	e7b0      	b.n	80059d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a76:	4b17      	ldr	r3, [pc, #92]	; (8005ad4 <xTaskIncrementTick+0x170>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7c:	4914      	ldr	r1, [pc, #80]	; (8005ad0 <xTaskIncrementTick+0x16c>)
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	440b      	add	r3, r1
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d907      	bls.n	8005a9e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	e004      	b.n	8005a9e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a94:	4b10      	ldr	r3, [pc, #64]	; (8005ad8 <xTaskIncrementTick+0x174>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	4a0f      	ldr	r2, [pc, #60]	; (8005ad8 <xTaskIncrementTick+0x174>)
 8005a9c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a9e:	4b0f      	ldr	r3, [pc, #60]	; (8005adc <xTaskIncrementTick+0x178>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005aaa:	697b      	ldr	r3, [r7, #20]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20002e24 	.word	0x20002e24
 8005ab8:	20002e00 	.word	0x20002e00
 8005abc:	20002db4 	.word	0x20002db4
 8005ac0:	20002db8 	.word	0x20002db8
 8005ac4:	20002e14 	.word	0x20002e14
 8005ac8:	20002e1c 	.word	0x20002e1c
 8005acc:	20002e04 	.word	0x20002e04
 8005ad0:	2000292c 	.word	0x2000292c
 8005ad4:	20002928 	.word	0x20002928
 8005ad8:	20002e0c 	.word	0x20002e0c
 8005adc:	20002e10 	.word	0x20002e10

08005ae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ae6:	4b2a      	ldr	r3, [pc, #168]	; (8005b90 <vTaskSwitchContext+0xb0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005aee:	4b29      	ldr	r3, [pc, #164]	; (8005b94 <vTaskSwitchContext+0xb4>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005af4:	e046      	b.n	8005b84 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005af6:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <vTaskSwitchContext+0xb4>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005afc:	4b26      	ldr	r3, [pc, #152]	; (8005b98 <vTaskSwitchContext+0xb8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	e010      	b.n	8005b26 <vTaskSwitchContext+0x46>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10a      	bne.n	8005b20 <vTaskSwitchContext+0x40>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	607b      	str	r3, [r7, #4]
}
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <vTaskSwitchContext+0x3e>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	491d      	ldr	r1, [pc, #116]	; (8005b9c <vTaskSwitchContext+0xbc>)
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	440b      	add	r3, r1
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0e4      	beq.n	8005b04 <vTaskSwitchContext+0x24>
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <vTaskSwitchContext+0xbc>)
 8005b46:	4413      	add	r3, r2
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	605a      	str	r2, [r3, #4]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	3308      	adds	r3, #8
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d104      	bne.n	8005b6a <vTaskSwitchContext+0x8a>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4a0b      	ldr	r2, [pc, #44]	; (8005ba0 <vTaskSwitchContext+0xc0>)
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <vTaskSwitchContext+0xb8>)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b7a:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <vTaskSwitchContext+0xc0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3354      	adds	r3, #84	; 0x54
 8005b80:	4a08      	ldr	r2, [pc, #32]	; (8005ba4 <vTaskSwitchContext+0xc4>)
 8005b82:	6013      	str	r3, [r2, #0]
}
 8005b84:	bf00      	nop
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc80      	pop	{r7}
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	20002e24 	.word	0x20002e24
 8005b94:	20002e10 	.word	0x20002e10
 8005b98:	20002e04 	.word	0x20002e04
 8005b9c:	2000292c 	.word	0x2000292c
 8005ba0:	20002928 	.word	0x20002928
 8005ba4:	20000034 	.word	0x20000034

08005ba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10a      	bne.n	8005bce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	60fb      	str	r3, [r7, #12]
}
 8005bca:	bf00      	nop
 8005bcc:	e7fe      	b.n	8005bcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bce:	4b07      	ldr	r3, [pc, #28]	; (8005bec <vTaskPlaceOnEventList+0x44>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3318      	adds	r3, #24
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fe fe70 	bl	80048bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bdc:	2101      	movs	r1, #1
 8005bde:	6838      	ldr	r0, [r7, #0]
 8005be0:	f000 fb3a 	bl	8006258 <prvAddCurrentTaskToDelayedList>
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20002928 	.word	0x20002928

08005bf0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10a      	bne.n	8005c18 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	617b      	str	r3, [r7, #20]
}
 8005c14:	bf00      	nop
 8005c16:	e7fe      	b.n	8005c16 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005c18:	4b11      	ldr	r3, [pc, #68]	; (8005c60 <vTaskPlaceOnUnorderedEventList+0x70>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	613b      	str	r3, [r7, #16]
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005c36:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005c40:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c42:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3318      	adds	r3, #24
 8005c48:	4619      	mov	r1, r3
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7fe fe13 	bl	8004876 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c50:	2101      	movs	r1, #1
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fb00 	bl	8006258 <prvAddCurrentTaskToDelayedList>
}
 8005c58:	bf00      	nop
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20002e24 	.word	0x20002e24
 8005c64:	20002928 	.word	0x20002928

08005c68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	617b      	str	r3, [r7, #20]
}
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c90:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <vTaskPlaceOnEventListRestricted+0x54>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3318      	adds	r3, #24
 8005c96:	4619      	mov	r1, r3
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7fe fdec 	bl	8004876 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ca8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	68b8      	ldr	r0, [r7, #8]
 8005cae:	f000 fad3 	bl	8006258 <prvAddCurrentTaskToDelayedList>
	}
 8005cb2:	bf00      	nop
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20002928 	.word	0x20002928

08005cc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	60fb      	str	r3, [r7, #12]
}
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	3318      	adds	r3, #24
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fe fe1b 	bl	800492c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf6:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <xTaskRemoveFromEventList+0xb0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d11d      	bne.n	8005d3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	3304      	adds	r3, #4
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe fe12 	bl	800492c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0c:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <xTaskRemoveFromEventList+0xb4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d903      	bls.n	8005d1c <xTaskRemoveFromEventList+0x5c>
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	4a16      	ldr	r2, [pc, #88]	; (8005d74 <xTaskRemoveFromEventList+0xb4>)
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4a13      	ldr	r2, [pc, #76]	; (8005d78 <xTaskRemoveFromEventList+0xb8>)
 8005d2a:	441a      	add	r2, r3
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f7fe fd9f 	bl	8004876 <vListInsertEnd>
 8005d38:	e005      	b.n	8005d46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	3318      	adds	r3, #24
 8005d3e:	4619      	mov	r1, r3
 8005d40:	480e      	ldr	r0, [pc, #56]	; (8005d7c <xTaskRemoveFromEventList+0xbc>)
 8005d42:	f7fe fd98 	bl	8004876 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4a:	4b0d      	ldr	r3, [pc, #52]	; (8005d80 <xTaskRemoveFromEventList+0xc0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d905      	bls.n	8005d60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d54:	2301      	movs	r3, #1
 8005d56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <xTaskRemoveFromEventList+0xc4>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	e001      	b.n	8005d64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005d64:	697b      	ldr	r3, [r7, #20]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20002e24 	.word	0x20002e24
 8005d74:	20002e04 	.word	0x20002e04
 8005d78:	2000292c 	.word	0x2000292c
 8005d7c:	20002dbc 	.word	0x20002dbc
 8005d80:	20002928 	.word	0x20002928
 8005d84:	20002e10 	.word	0x20002e10

08005d88 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005d92:	4b29      	ldr	r3, [pc, #164]	; (8005e38 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10a      	bne.n	8005db0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	613b      	str	r3, [r7, #16]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10a      	bne.n	8005ddc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	60fb      	str	r3, [r7, #12]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7fe fda5 	bl	800492c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe fda0 	bl	800492c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df0:	4b12      	ldr	r3, [pc, #72]	; (8005e3c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d903      	bls.n	8005e00 <vTaskRemoveFromUnorderedEventList+0x78>
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	4a0f      	ldr	r2, [pc, #60]	; (8005e3c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4a0c      	ldr	r2, [pc, #48]	; (8005e40 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005e0e:	441a      	add	r2, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f7fe fd2d 	bl	8004876 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e20:	4b08      	ldr	r3, [pc, #32]	; (8005e44 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d902      	bls.n	8005e30 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005e2a:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
	}
}
 8005e30:	bf00      	nop
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20002e24 	.word	0x20002e24
 8005e3c:	20002e04 	.word	0x20002e04
 8005e40:	2000292c 	.word	0x2000292c
 8005e44:	20002928 	.word	0x20002928
 8005e48:	20002e10 	.word	0x20002e10

08005e4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <vTaskInternalSetTimeOutState+0x24>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <vTaskInternalSetTimeOutState+0x28>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	605a      	str	r2, [r3, #4]
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bc80      	pop	{r7}
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20002e14 	.word	0x20002e14
 8005e74:	20002e00 	.word	0x20002e00

08005e78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	613b      	str	r3, [r7, #16]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	60fb      	str	r3, [r7, #12]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005eba:	f000 fe47 	bl	8006b4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ebe:	4b1d      	ldr	r3, [pc, #116]	; (8005f34 <xTaskCheckForTimeOut+0xbc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ed6:	d102      	bne.n	8005ede <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	e023      	b.n	8005f26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <xTaskCheckForTimeOut+0xc0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d007      	beq.n	8005efa <xTaskCheckForTimeOut+0x82>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d302      	bcc.n	8005efa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	e015      	b.n	8005f26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d20b      	bcs.n	8005f1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	1ad2      	subs	r2, r2, r3
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff ff9b 	bl	8005e4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f16:	2300      	movs	r3, #0
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	e004      	b.n	8005f26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f22:	2301      	movs	r3, #1
 8005f24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f26:	f000 fe41 	bl	8006bac <vPortExitCritical>

	return xReturn;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3720      	adds	r7, #32
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20002e00 	.word	0x20002e00
 8005f38:	20002e14 	.word	0x20002e14

08005f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f40:	4b03      	ldr	r3, [pc, #12]	; (8005f50 <vTaskMissedYield+0x14>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	601a      	str	r2, [r3, #0]
}
 8005f46:	bf00      	nop
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20002e10 	.word	0x20002e10

08005f54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f5c:	f000 f852 	bl	8006004 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f60:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <prvIdleTask+0x28>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d9f9      	bls.n	8005f5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f68:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <prvIdleTask+0x2c>)
 8005f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f78:	e7f0      	b.n	8005f5c <prvIdleTask+0x8>
 8005f7a:	bf00      	nop
 8005f7c:	2000292c 	.word	0x2000292c
 8005f80:	e000ed04 	.word	0xe000ed04

08005f84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	607b      	str	r3, [r7, #4]
 8005f8e:	e00c      	b.n	8005faa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4a12      	ldr	r2, [pc, #72]	; (8005fe4 <prvInitialiseTaskLists+0x60>)
 8005f9c:	4413      	add	r3, r2
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe fc3e 	bl	8004820 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	607b      	str	r3, [r7, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b37      	cmp	r3, #55	; 0x37
 8005fae:	d9ef      	bls.n	8005f90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fb0:	480d      	ldr	r0, [pc, #52]	; (8005fe8 <prvInitialiseTaskLists+0x64>)
 8005fb2:	f7fe fc35 	bl	8004820 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fb6:	480d      	ldr	r0, [pc, #52]	; (8005fec <prvInitialiseTaskLists+0x68>)
 8005fb8:	f7fe fc32 	bl	8004820 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fbc:	480c      	ldr	r0, [pc, #48]	; (8005ff0 <prvInitialiseTaskLists+0x6c>)
 8005fbe:	f7fe fc2f 	bl	8004820 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fc2:	480c      	ldr	r0, [pc, #48]	; (8005ff4 <prvInitialiseTaskLists+0x70>)
 8005fc4:	f7fe fc2c 	bl	8004820 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fc8:	480b      	ldr	r0, [pc, #44]	; (8005ff8 <prvInitialiseTaskLists+0x74>)
 8005fca:	f7fe fc29 	bl	8004820 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fce:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <prvInitialiseTaskLists+0x78>)
 8005fd0:	4a05      	ldr	r2, [pc, #20]	; (8005fe8 <prvInitialiseTaskLists+0x64>)
 8005fd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <prvInitialiseTaskLists+0x7c>)
 8005fd6:	4a05      	ldr	r2, [pc, #20]	; (8005fec <prvInitialiseTaskLists+0x68>)
 8005fd8:	601a      	str	r2, [r3, #0]
}
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	2000292c 	.word	0x2000292c
 8005fe8:	20002d8c 	.word	0x20002d8c
 8005fec:	20002da0 	.word	0x20002da0
 8005ff0:	20002dbc 	.word	0x20002dbc
 8005ff4:	20002dd0 	.word	0x20002dd0
 8005ff8:	20002de8 	.word	0x20002de8
 8005ffc:	20002db4 	.word	0x20002db4
 8006000:	20002db8 	.word	0x20002db8

08006004 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800600a:	e019      	b.n	8006040 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800600c:	f000 fd9e 	bl	8006b4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006010:	4b10      	ldr	r3, [pc, #64]	; (8006054 <prvCheckTasksWaitingTermination+0x50>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3304      	adds	r3, #4
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe fc85 	bl	800492c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006022:	4b0d      	ldr	r3, [pc, #52]	; (8006058 <prvCheckTasksWaitingTermination+0x54>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3b01      	subs	r3, #1
 8006028:	4a0b      	ldr	r2, [pc, #44]	; (8006058 <prvCheckTasksWaitingTermination+0x54>)
 800602a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <prvCheckTasksWaitingTermination+0x58>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3b01      	subs	r3, #1
 8006032:	4a0a      	ldr	r2, [pc, #40]	; (800605c <prvCheckTasksWaitingTermination+0x58>)
 8006034:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006036:	f000 fdb9 	bl	8006bac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f810 	bl	8006060 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006040:	4b06      	ldr	r3, [pc, #24]	; (800605c <prvCheckTasksWaitingTermination+0x58>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e1      	bne.n	800600c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20002dd0 	.word	0x20002dd0
 8006058:	20002dfc 	.word	0x20002dfc
 800605c:	20002de4 	.word	0x20002de4

08006060 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3354      	adds	r3, #84	; 0x54
 800606c:	4618      	mov	r0, r3
 800606e:	f001 f88f 	bl	8007190 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006078:	2b00      	cmp	r3, #0
 800607a:	d108      	bne.n	800608e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	4618      	mov	r0, r3
 8006082:	f000 ff27 	bl	8006ed4 <vPortFree>
				vPortFree( pxTCB );
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 ff24 	bl	8006ed4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800608c:	e018      	b.n	80060c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006094:	2b01      	cmp	r3, #1
 8006096:	d103      	bne.n	80060a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 ff1b 	bl	8006ed4 <vPortFree>
	}
 800609e:	e00f      	b.n	80060c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d00a      	beq.n	80060c0 <prvDeleteTCB+0x60>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	60fb      	str	r3, [r7, #12]
}
 80060bc:	bf00      	nop
 80060be:	e7fe      	b.n	80060be <prvDeleteTCB+0x5e>
	}
 80060c0:	bf00      	nop
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ce:	4b0e      	ldr	r3, [pc, #56]	; (8006108 <prvResetNextTaskUnblockTime+0x40>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <prvResetNextTaskUnblockTime+0x14>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <prvResetNextTaskUnblockTime+0x16>
 80060dc:	2300      	movs	r3, #0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d004      	beq.n	80060ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <prvResetNextTaskUnblockTime+0x44>)
 80060e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060ea:	e008      	b.n	80060fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <prvResetNextTaskUnblockTime+0x40>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	4a04      	ldr	r2, [pc, #16]	; (800610c <prvResetNextTaskUnblockTime+0x44>)
 80060fc:	6013      	str	r3, [r2, #0]
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	bc80      	pop	{r7}
 8006106:	4770      	bx	lr
 8006108:	20002db4 	.word	0x20002db4
 800610c:	20002e1c 	.word	0x20002e1c

08006110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006116:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <xTaskGetSchedulerState+0x34>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d102      	bne.n	8006124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800611e:	2301      	movs	r3, #1
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	e008      	b.n	8006136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006124:	4b08      	ldr	r3, [pc, #32]	; (8006148 <xTaskGetSchedulerState+0x38>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800612c:	2302      	movs	r3, #2
 800612e:	607b      	str	r3, [r7, #4]
 8006130:	e001      	b.n	8006136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006132:	2300      	movs	r3, #0
 8006134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006136:	687b      	ldr	r3, [r7, #4]
	}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	bc80      	pop	{r7}
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20002e08 	.word	0x20002e08
 8006148:	20002e24 	.word	0x20002e24

0800614c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d056      	beq.n	8006210 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006162:	4b2e      	ldr	r3, [pc, #184]	; (800621c <xTaskPriorityDisinherit+0xd0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	429a      	cmp	r2, r3
 800616a:	d00a      	beq.n	8006182 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	60fb      	str	r3, [r7, #12]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	60bb      	str	r3, [r7, #8]
}
 800619c:	bf00      	nop
 800619e:	e7fe      	b.n	800619e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a4:	1e5a      	subs	r2, r3, #1
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d02c      	beq.n	8006210 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d128      	bne.n	8006210 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe fbb2 	bl	800492c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e0:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <xTaskPriorityDisinherit+0xd4>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d903      	bls.n	80061f0 <xTaskPriorityDisinherit+0xa4>
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	4a0c      	ldr	r2, [pc, #48]	; (8006220 <xTaskPriorityDisinherit+0xd4>)
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4a09      	ldr	r2, [pc, #36]	; (8006224 <xTaskPriorityDisinherit+0xd8>)
 80061fe:	441a      	add	r2, r3
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f7fe fb35 	bl	8004876 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800620c:	2301      	movs	r3, #1
 800620e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006210:	697b      	ldr	r3, [r7, #20]
	}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20002928 	.word	0x20002928
 8006220:	20002e04 	.word	0x20002e04
 8006224:	2000292c 	.word	0x2000292c

08006228 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800622e:	4b09      	ldr	r3, [pc, #36]	; (8006254 <uxTaskResetEventItemValue+0x2c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006236:	4b07      	ldr	r3, [pc, #28]	; (8006254 <uxTaskResetEventItemValue+0x2c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <uxTaskResetEventItemValue+0x2c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006244:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006246:	687b      	ldr	r3, [r7, #4]
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	bc80      	pop	{r7}
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	20002928 	.word	0x20002928

08006258 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006262:	4b21      	ldr	r3, [pc, #132]	; (80062e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006268:	4b20      	ldr	r3, [pc, #128]	; (80062ec <prvAddCurrentTaskToDelayedList+0x94>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3304      	adds	r3, #4
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fb5c 	bl	800492c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800627a:	d10a      	bne.n	8006292 <prvAddCurrentTaskToDelayedList+0x3a>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d007      	beq.n	8006292 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006282:	4b1a      	ldr	r3, [pc, #104]	; (80062ec <prvAddCurrentTaskToDelayedList+0x94>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3304      	adds	r3, #4
 8006288:	4619      	mov	r1, r3
 800628a:	4819      	ldr	r0, [pc, #100]	; (80062f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800628c:	f7fe faf3 	bl	8004876 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006290:	e026      	b.n	80062e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4413      	add	r3, r2
 8006298:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800629a:	4b14      	ldr	r3, [pc, #80]	; (80062ec <prvAddCurrentTaskToDelayedList+0x94>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d209      	bcs.n	80062be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062aa:	4b12      	ldr	r3, [pc, #72]	; (80062f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <prvAddCurrentTaskToDelayedList+0x94>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4619      	mov	r1, r3
 80062b6:	4610      	mov	r0, r2
 80062b8:	f7fe fb00 	bl	80048bc <vListInsert>
}
 80062bc:	e010      	b.n	80062e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062be:	4b0e      	ldr	r3, [pc, #56]	; (80062f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <prvAddCurrentTaskToDelayedList+0x94>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3304      	adds	r3, #4
 80062c8:	4619      	mov	r1, r3
 80062ca:	4610      	mov	r0, r2
 80062cc:	f7fe faf6 	bl	80048bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062d0:	4b0a      	ldr	r3, [pc, #40]	; (80062fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d202      	bcs.n	80062e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80062da:	4a08      	ldr	r2, [pc, #32]	; (80062fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	6013      	str	r3, [r2, #0]
}
 80062e0:	bf00      	nop
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20002e00 	.word	0x20002e00
 80062ec:	20002928 	.word	0x20002928
 80062f0:	20002de8 	.word	0x20002de8
 80062f4:	20002db8 	.word	0x20002db8
 80062f8:	20002db4 	.word	0x20002db4
 80062fc:	20002e1c 	.word	0x20002e1c

08006300 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08a      	sub	sp, #40	; 0x28
 8006304:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006306:	2300      	movs	r3, #0
 8006308:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800630a:	f000 facb 	bl	80068a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800630e:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <xTimerCreateTimerTask+0x80>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d021      	beq.n	800635a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800631a:	2300      	movs	r3, #0
 800631c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800631e:	1d3a      	adds	r2, r7, #4
 8006320:	f107 0108 	add.w	r1, r7, #8
 8006324:	f107 030c 	add.w	r3, r7, #12
 8006328:	4618      	mov	r0, r3
 800632a:	f7fe f871 	bl	8004410 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	9202      	str	r2, [sp, #8]
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	2302      	movs	r3, #2
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	2300      	movs	r3, #0
 800633e:	460a      	mov	r2, r1
 8006340:	4910      	ldr	r1, [pc, #64]	; (8006384 <xTimerCreateTimerTask+0x84>)
 8006342:	4811      	ldr	r0, [pc, #68]	; (8006388 <xTimerCreateTimerTask+0x88>)
 8006344:	f7ff f800 	bl	8005348 <xTaskCreateStatic>
 8006348:	4603      	mov	r3, r0
 800634a:	4a10      	ldr	r2, [pc, #64]	; (800638c <xTimerCreateTimerTask+0x8c>)
 800634c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800634e:	4b0f      	ldr	r3, [pc, #60]	; (800638c <xTimerCreateTimerTask+0x8c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006356:	2301      	movs	r3, #1
 8006358:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	613b      	str	r3, [r7, #16]
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006376:	697b      	ldr	r3, [r7, #20]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20002e58 	.word	0x20002e58
 8006384:	08007344 	.word	0x08007344
 8006388:	080064ad 	.word	0x080064ad
 800638c:	20002e5c 	.word	0x20002e5c

08006390 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08a      	sub	sp, #40	; 0x28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800639e:	2300      	movs	r3, #0
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <xTimerGenericCommand+0x2e>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	623b      	str	r3, [r7, #32]
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80063be:	4b1a      	ldr	r3, [pc, #104]	; (8006428 <xTimerGenericCommand+0x98>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d02a      	beq.n	800641c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b05      	cmp	r3, #5
 80063d6:	dc18      	bgt.n	800640a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063d8:	f7ff fe9a 	bl	8006110 <xTaskGetSchedulerState>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d109      	bne.n	80063f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <xTimerGenericCommand+0x98>)
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	f107 0110 	add.w	r1, r7, #16
 80063ea:	2300      	movs	r3, #0
 80063ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ee:	f7fe fbc9 	bl	8004b84 <xQueueGenericSend>
 80063f2:	6278      	str	r0, [r7, #36]	; 0x24
 80063f4:	e012      	b.n	800641c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063f6:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <xTimerGenericCommand+0x98>)
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	f107 0110 	add.w	r1, r7, #16
 80063fe:	2300      	movs	r3, #0
 8006400:	2200      	movs	r2, #0
 8006402:	f7fe fbbf 	bl	8004b84 <xQueueGenericSend>
 8006406:	6278      	str	r0, [r7, #36]	; 0x24
 8006408:	e008      	b.n	800641c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800640a:	4b07      	ldr	r3, [pc, #28]	; (8006428 <xTimerGenericCommand+0x98>)
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	f107 0110 	add.w	r1, r7, #16
 8006412:	2300      	movs	r3, #0
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	f7fe fcb3 	bl	8004d80 <xQueueGenericSendFromISR>
 800641a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800641e:	4618      	mov	r0, r3
 8006420:	3728      	adds	r7, #40	; 0x28
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20002e58 	.word	0x20002e58

0800642c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af02      	add	r7, sp, #8
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006436:	4b1c      	ldr	r3, [pc, #112]	; (80064a8 <prvProcessExpiredTimer+0x7c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3304      	adds	r3, #4
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe fa71 	bl	800492c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d122      	bne.n	8006498 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	18d1      	adds	r1, r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	6978      	ldr	r0, [r7, #20]
 8006460:	f000 f8c8 	bl	80065f4 <prvInsertTimerInActiveList>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d016      	beq.n	8006498 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800646a:	2300      	movs	r3, #0
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	2300      	movs	r3, #0
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	2100      	movs	r1, #0
 8006474:	6978      	ldr	r0, [r7, #20]
 8006476:	f7ff ff8b 	bl	8006390 <xTimerGenericCommand>
 800647a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10a      	bne.n	8006498 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	60fb      	str	r3, [r7, #12]
}
 8006494:	bf00      	nop
 8006496:	e7fe      	b.n	8006496 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	6978      	ldr	r0, [r7, #20]
 800649e:	4798      	blx	r3
}
 80064a0:	bf00      	nop
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20002e50 	.word	0x20002e50

080064ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064b4:	f107 0308 	add.w	r3, r7, #8
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 f857 	bl	800656c <prvGetNextExpireTime>
 80064be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4619      	mov	r1, r3
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 f803 	bl	80064d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064ca:	f000 f8d5 	bl	8006678 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064ce:	e7f1      	b.n	80064b4 <prvTimerTask+0x8>

080064d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064da:	f7ff f989 	bl	80057f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064de:	f107 0308 	add.w	r3, r7, #8
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 f866 	bl	80065b4 <prvSampleTimeNow>
 80064e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d130      	bne.n	8006552 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10a      	bne.n	800650c <prvProcessTimerOrBlockTask+0x3c>
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d806      	bhi.n	800650c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064fe:	f7ff f985 	bl	800580c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006502:	68f9      	ldr	r1, [r7, #12]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff ff91 	bl	800642c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800650a:	e024      	b.n	8006556 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d008      	beq.n	8006524 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006512:	4b13      	ldr	r3, [pc, #76]	; (8006560 <prvProcessTimerOrBlockTask+0x90>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	bf0c      	ite	eq
 800651c:	2301      	moveq	r3, #1
 800651e:	2300      	movne	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006524:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <prvProcessTimerOrBlockTask+0x94>)
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	4619      	mov	r1, r3
 8006532:	f7fe fed5 	bl	80052e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006536:	f7ff f969 	bl	800580c <xTaskResumeAll>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10a      	bne.n	8006556 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006540:	4b09      	ldr	r3, [pc, #36]	; (8006568 <prvProcessTimerOrBlockTask+0x98>)
 8006542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	f3bf 8f6f 	isb	sy
}
 8006550:	e001      	b.n	8006556 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006552:	f7ff f95b 	bl	800580c <xTaskResumeAll>
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20002e54 	.word	0x20002e54
 8006564:	20002e58 	.word	0x20002e58
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006574:	4b0e      	ldr	r3, [pc, #56]	; (80065b0 <prvGetNextExpireTime+0x44>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	bf0c      	ite	eq
 800657e:	2301      	moveq	r3, #1
 8006580:	2300      	movne	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d105      	bne.n	800659e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006592:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <prvGetNextExpireTime+0x44>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e001      	b.n	80065a2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80065a2:	68fb      	ldr	r3, [r7, #12]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20002e50 	.word	0x20002e50

080065b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80065bc:	f7ff f9c4 	bl	8005948 <xTaskGetTickCount>
 80065c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80065c2:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <prvSampleTimeNow+0x3c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d205      	bcs.n	80065d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80065cc:	f000 f908 	bl	80067e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	e002      	b.n	80065de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065de:	4a04      	ldr	r2, [pc, #16]	; (80065f0 <prvSampleTimeNow+0x3c>)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065e4:	68fb      	ldr	r3, [r7, #12]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20002e60 	.word	0x20002e60

080065f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006602:	2300      	movs	r3, #0
 8006604:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	429a      	cmp	r2, r3
 8006618:	d812      	bhi.n	8006640 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	1ad2      	subs	r2, r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	429a      	cmp	r2, r3
 8006626:	d302      	bcc.n	800662e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006628:	2301      	movs	r3, #1
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	e01b      	b.n	8006666 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800662e:	4b10      	ldr	r3, [pc, #64]	; (8006670 <prvInsertTimerInActiveList+0x7c>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3304      	adds	r3, #4
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f7fe f93f 	bl	80048bc <vListInsert>
 800663e:	e012      	b.n	8006666 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	429a      	cmp	r2, r3
 8006646:	d206      	bcs.n	8006656 <prvInsertTimerInActiveList+0x62>
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d302      	bcc.n	8006656 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006650:	2301      	movs	r3, #1
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	e007      	b.n	8006666 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006656:	4b07      	ldr	r3, [pc, #28]	; (8006674 <prvInsertTimerInActiveList+0x80>)
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3304      	adds	r3, #4
 800665e:	4619      	mov	r1, r3
 8006660:	4610      	mov	r0, r2
 8006662:	f7fe f92b 	bl	80048bc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006666:	697b      	ldr	r3, [r7, #20]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20002e54 	.word	0x20002e54
 8006674:	20002e50 	.word	0x20002e50

08006678 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08e      	sub	sp, #56	; 0x38
 800667c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800667e:	e09d      	b.n	80067bc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	da18      	bge.n	80066b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006686:	1d3b      	adds	r3, r7, #4
 8006688:	3304      	adds	r3, #4
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	61fb      	str	r3, [r7, #28]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ae:	6850      	ldr	r0, [r2, #4]
 80066b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b2:	6892      	ldr	r2, [r2, #8]
 80066b4:	4611      	mov	r1, r2
 80066b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	db7d      	blt.n	80067ba <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d004      	beq.n	80066d4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	3304      	adds	r3, #4
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fe f92c 	bl	800492c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066d4:	463b      	mov	r3, r7
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7ff ff6c 	bl	80065b4 <prvSampleTimeNow>
 80066dc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b09      	cmp	r3, #9
 80066e2:	d86b      	bhi.n	80067bc <prvProcessReceivedCommands+0x144>
 80066e4:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <prvProcessReceivedCommands+0x74>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	08006715 	.word	0x08006715
 80066f0:	08006715 	.word	0x08006715
 80066f4:	08006715 	.word	0x08006715
 80066f8:	080067bd 	.word	0x080067bd
 80066fc:	08006771 	.word	0x08006771
 8006700:	080067a9 	.word	0x080067a9
 8006704:	08006715 	.word	0x08006715
 8006708:	08006715 	.word	0x08006715
 800670c:	080067bd 	.word	0x080067bd
 8006710:	08006771 	.word	0x08006771
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	18d1      	adds	r1, r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006722:	f7ff ff67 	bl	80065f4 <prvInsertTimerInActiveList>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d047      	beq.n	80067bc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006732:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d13f      	bne.n	80067bc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	441a      	add	r2, r3
 8006744:	2300      	movs	r3, #0
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	2300      	movs	r3, #0
 800674a:	2100      	movs	r1, #0
 800674c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800674e:	f7ff fe1f 	bl	8006390 <xTimerGenericCommand>
 8006752:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d130      	bne.n	80067bc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	61bb      	str	r3, [r7, #24]
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006774:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10a      	bne.n	8006794 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	617b      	str	r3, [r7, #20]
}
 8006790:	bf00      	nop
 8006792:	e7fe      	b.n	8006792 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	18d1      	adds	r1, r2, r3
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067a2:	f7ff ff27 	bl	80065f4 <prvInsertTimerInActiveList>
					break;
 80067a6:	e009      	b.n	80067bc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d104      	bne.n	80067bc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80067b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067b4:	f000 fb8e 	bl	8006ed4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067b8:	e000      	b.n	80067bc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80067ba:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067bc:	4b07      	ldr	r3, [pc, #28]	; (80067dc <prvProcessReceivedCommands+0x164>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	1d39      	adds	r1, r7, #4
 80067c2:	2200      	movs	r2, #0
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe fb73 	bl	8004eb0 <xQueueReceive>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f47f af57 	bne.w	8006680 <prvProcessReceivedCommands+0x8>
	}
}
 80067d2:	bf00      	nop
 80067d4:	bf00      	nop
 80067d6:	3730      	adds	r7, #48	; 0x30
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	20002e58 	.word	0x20002e58

080067e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067e6:	e045      	b.n	8006874 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067e8:	4b2c      	ldr	r3, [pc, #176]	; (800689c <prvSwitchTimerLists+0xbc>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067f2:	4b2a      	ldr	r3, [pc, #168]	; (800689c <prvSwitchTimerLists+0xbc>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3304      	adds	r3, #4
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe f893 	bl	800492c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d12e      	bne.n	8006874 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	4413      	add	r3, r2
 800681e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	429a      	cmp	r2, r3
 8006826:	d90e      	bls.n	8006846 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006834:	4b19      	ldr	r3, [pc, #100]	; (800689c <prvSwitchTimerLists+0xbc>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3304      	adds	r3, #4
 800683c:	4619      	mov	r1, r3
 800683e:	4610      	mov	r0, r2
 8006840:	f7fe f83c 	bl	80048bc <vListInsert>
 8006844:	e016      	b.n	8006874 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006846:	2300      	movs	r3, #0
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	2300      	movs	r3, #0
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	2100      	movs	r1, #0
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f7ff fd9d 	bl	8006390 <xTimerGenericCommand>
 8006856:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <prvSwitchTimerLists+0x94>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	603b      	str	r3, [r7, #0]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006874:	4b09      	ldr	r3, [pc, #36]	; (800689c <prvSwitchTimerLists+0xbc>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1b4      	bne.n	80067e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800687e:	4b07      	ldr	r3, [pc, #28]	; (800689c <prvSwitchTimerLists+0xbc>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006884:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <prvSwitchTimerLists+0xc0>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a04      	ldr	r2, [pc, #16]	; (800689c <prvSwitchTimerLists+0xbc>)
 800688a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800688c:	4a04      	ldr	r2, [pc, #16]	; (80068a0 <prvSwitchTimerLists+0xc0>)
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	6013      	str	r3, [r2, #0]
}
 8006892:	bf00      	nop
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20002e50 	.word	0x20002e50
 80068a0:	20002e54 	.word	0x20002e54

080068a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068aa:	f000 f94f 	bl	8006b4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068ae:	4b15      	ldr	r3, [pc, #84]	; (8006904 <prvCheckForValidListAndQueue+0x60>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d120      	bne.n	80068f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068b6:	4814      	ldr	r0, [pc, #80]	; (8006908 <prvCheckForValidListAndQueue+0x64>)
 80068b8:	f7fd ffb2 	bl	8004820 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068bc:	4813      	ldr	r0, [pc, #76]	; (800690c <prvCheckForValidListAndQueue+0x68>)
 80068be:	f7fd ffaf 	bl	8004820 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068c2:	4b13      	ldr	r3, [pc, #76]	; (8006910 <prvCheckForValidListAndQueue+0x6c>)
 80068c4:	4a10      	ldr	r2, [pc, #64]	; (8006908 <prvCheckForValidListAndQueue+0x64>)
 80068c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068c8:	4b12      	ldr	r3, [pc, #72]	; (8006914 <prvCheckForValidListAndQueue+0x70>)
 80068ca:	4a10      	ldr	r2, [pc, #64]	; (800690c <prvCheckForValidListAndQueue+0x68>)
 80068cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068ce:	2300      	movs	r3, #0
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	4b11      	ldr	r3, [pc, #68]	; (8006918 <prvCheckForValidListAndQueue+0x74>)
 80068d4:	4a11      	ldr	r2, [pc, #68]	; (800691c <prvCheckForValidListAndQueue+0x78>)
 80068d6:	2110      	movs	r1, #16
 80068d8:	200a      	movs	r0, #10
 80068da:	f7fe f8b9 	bl	8004a50 <xQueueGenericCreateStatic>
 80068de:	4603      	mov	r3, r0
 80068e0:	4a08      	ldr	r2, [pc, #32]	; (8006904 <prvCheckForValidListAndQueue+0x60>)
 80068e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068e4:	4b07      	ldr	r3, [pc, #28]	; (8006904 <prvCheckForValidListAndQueue+0x60>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068ec:	4b05      	ldr	r3, [pc, #20]	; (8006904 <prvCheckForValidListAndQueue+0x60>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	490b      	ldr	r1, [pc, #44]	; (8006920 <prvCheckForValidListAndQueue+0x7c>)
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe fccc 	bl	8005290 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068f8:	f000 f958 	bl	8006bac <vPortExitCritical>
}
 80068fc:	bf00      	nop
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20002e58 	.word	0x20002e58
 8006908:	20002e28 	.word	0x20002e28
 800690c:	20002e3c 	.word	0x20002e3c
 8006910:	20002e50 	.word	0x20002e50
 8006914:	20002e54 	.word	0x20002e54
 8006918:	20002f04 	.word	0x20002f04
 800691c:	20002e64 	.word	0x20002e64
 8006920:	0800734c 	.word	0x0800734c

08006924 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08a      	sub	sp, #40	; 0x28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006932:	f06f 0301 	mvn.w	r3, #1
 8006936:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006944:	4b06      	ldr	r3, [pc, #24]	; (8006960 <xTimerPendFunctionCallFromISR+0x3c>)
 8006946:	6818      	ldr	r0, [r3, #0]
 8006948:	f107 0114 	add.w	r1, r7, #20
 800694c:	2300      	movs	r3, #0
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	f7fe fa16 	bl	8004d80 <xQueueGenericSendFromISR>
 8006954:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006958:	4618      	mov	r0, r3
 800695a:	3728      	adds	r7, #40	; 0x28
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20002e58 	.word	0x20002e58

08006964 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3b04      	subs	r3, #4
 8006974:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800697c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3b04      	subs	r3, #4
 8006982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f023 0201 	bic.w	r2, r3, #1
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3b04      	subs	r3, #4
 8006992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006994:	4a08      	ldr	r2, [pc, #32]	; (80069b8 <pxPortInitialiseStack+0x54>)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3b14      	subs	r3, #20
 800699e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3b20      	subs	r3, #32
 80069aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069ac:	68fb      	ldr	r3, [r7, #12]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr
 80069b8:	080069bd 	.word	0x080069bd

080069bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069c6:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <prvTaskExitError+0x54>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ce:	d00a      	beq.n	80069e6 <prvTaskExitError+0x2a>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	60fb      	str	r3, [r7, #12]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <prvTaskExitError+0x28>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	60bb      	str	r3, [r7, #8]
}
 80069f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069fa:	bf00      	nop
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0fc      	beq.n	80069fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a02:	bf00      	nop
 8006a04:	bf00      	nop
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bc80      	pop	{r7}
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	20000030 	.word	0x20000030
	...

08006a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a20:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <pxCurrentTCBConst2>)
 8006a22:	6819      	ldr	r1, [r3, #0]
 8006a24:	6808      	ldr	r0, [r1, #0]
 8006a26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a2a:	f380 8809 	msr	PSP, r0
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	f380 8811 	msr	BASEPRI, r0
 8006a3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006a3e:	4770      	bx	lr

08006a40 <pxCurrentTCBConst2>:
 8006a40:	20002928 	.word	0x20002928
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop

08006a48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006a48:	4806      	ldr	r0, [pc, #24]	; (8006a64 <prvPortStartFirstTask+0x1c>)
 8006a4a:	6800      	ldr	r0, [r0, #0]
 8006a4c:	6800      	ldr	r0, [r0, #0]
 8006a4e:	f380 8808 	msr	MSP, r0
 8006a52:	b662      	cpsie	i
 8006a54:	b661      	cpsie	f
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	df00      	svc	0
 8006a60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a62:	bf00      	nop
 8006a64:	e000ed08 	.word	0xe000ed08

08006a68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a6e:	4b32      	ldr	r3, [pc, #200]	; (8006b38 <xPortStartScheduler+0xd0>)
 8006a70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	22ff      	movs	r2, #255	; 0xff
 8006a7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	4b2a      	ldr	r3, [pc, #168]	; (8006b3c <xPortStartScheduler+0xd4>)
 8006a94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a96:	4b2a      	ldr	r3, [pc, #168]	; (8006b40 <xPortStartScheduler+0xd8>)
 8006a98:	2207      	movs	r2, #7
 8006a9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a9c:	e009      	b.n	8006ab2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006a9e:	4b28      	ldr	r3, [pc, #160]	; (8006b40 <xPortStartScheduler+0xd8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	4a26      	ldr	r2, [pc, #152]	; (8006b40 <xPortStartScheduler+0xd8>)
 8006aa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ab2:	78fb      	ldrb	r3, [r7, #3]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aba:	2b80      	cmp	r3, #128	; 0x80
 8006abc:	d0ef      	beq.n	8006a9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006abe:	4b20      	ldr	r3, [pc, #128]	; (8006b40 <xPortStartScheduler+0xd8>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f1c3 0307 	rsb	r3, r3, #7
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d00a      	beq.n	8006ae0 <xPortStartScheduler+0x78>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	60bb      	str	r3, [r7, #8]
}
 8006adc:	bf00      	nop
 8006ade:	e7fe      	b.n	8006ade <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ae0:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <xPortStartScheduler+0xd8>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	4a16      	ldr	r2, [pc, #88]	; (8006b40 <xPortStartScheduler+0xd8>)
 8006ae8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006aea:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <xPortStartScheduler+0xd8>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006af2:	4a13      	ldr	r2, [pc, #76]	; (8006b40 <xPortStartScheduler+0xd8>)
 8006af4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006afe:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <xPortStartScheduler+0xdc>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a10      	ldr	r2, [pc, #64]	; (8006b44 <xPortStartScheduler+0xdc>)
 8006b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b0a:	4b0e      	ldr	r3, [pc, #56]	; (8006b44 <xPortStartScheduler+0xdc>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a0d      	ldr	r2, [pc, #52]	; (8006b44 <xPortStartScheduler+0xdc>)
 8006b10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b16:	f000 f8b9 	bl	8006c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <xPortStartScheduler+0xe0>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b20:	f7ff ff92 	bl	8006a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b24:	f7fe ffdc 	bl	8005ae0 <vTaskSwitchContext>
	prvTaskExitError();
 8006b28:	f7ff ff48 	bl	80069bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	e000e400 	.word	0xe000e400
 8006b3c:	20002f54 	.word	0x20002f54
 8006b40:	20002f58 	.word	0x20002f58
 8006b44:	e000ed20 	.word	0xe000ed20
 8006b48:	20000030 	.word	0x20000030

08006b4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	607b      	str	r3, [r7, #4]
}
 8006b64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b66:	4b0f      	ldr	r3, [pc, #60]	; (8006ba4 <vPortEnterCritical+0x58>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	4a0d      	ldr	r2, [pc, #52]	; (8006ba4 <vPortEnterCritical+0x58>)
 8006b6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b70:	4b0c      	ldr	r3, [pc, #48]	; (8006ba4 <vPortEnterCritical+0x58>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d10f      	bne.n	8006b98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b78:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <vPortEnterCritical+0x5c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	603b      	str	r3, [r7, #0]
}
 8006b94:	bf00      	nop
 8006b96:	e7fe      	b.n	8006b96 <vPortEnterCritical+0x4a>
	}
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	20000030 	.word	0x20000030
 8006ba8:	e000ed04 	.word	0xe000ed04

08006bac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bb2:	4b11      	ldr	r3, [pc, #68]	; (8006bf8 <vPortExitCritical+0x4c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <vPortExitCritical+0x24>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	607b      	str	r3, [r7, #4]
}
 8006bcc:	bf00      	nop
 8006bce:	e7fe      	b.n	8006bce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006bd0:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <vPortExitCritical+0x4c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <vPortExitCritical+0x4c>)
 8006bd8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006bda:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <vPortExitCritical+0x4c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d105      	bne.n	8006bee <vPortExitCritical+0x42>
 8006be2:	2300      	movs	r3, #0
 8006be4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	f383 8811 	msr	BASEPRI, r3
}
 8006bec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006bee:	bf00      	nop
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bc80      	pop	{r7}
 8006bf6:	4770      	bx	lr
 8006bf8:	20000030 	.word	0x20000030
 8006bfc:	00000000 	.word	0x00000000

08006c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c00:	f3ef 8009 	mrs	r0, PSP
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <pxCurrentTCBConst>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c10:	6010      	str	r0, [r2, #0]
 8006c12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006c16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c1a:	f380 8811 	msr	BASEPRI, r0
 8006c1e:	f7fe ff5f 	bl	8005ae0 <vTaskSwitchContext>
 8006c22:	f04f 0000 	mov.w	r0, #0
 8006c26:	f380 8811 	msr	BASEPRI, r0
 8006c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c2e:	6819      	ldr	r1, [r3, #0]
 8006c30:	6808      	ldr	r0, [r1, #0]
 8006c32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c36:	f380 8809 	msr	PSP, r0
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	4770      	bx	lr

08006c40 <pxCurrentTCBConst>:
 8006c40:	20002928 	.word	0x20002928
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop

08006c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	607b      	str	r3, [r7, #4]
}
 8006c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c62:	f7fe fe7f 	bl	8005964 <xTaskIncrementTick>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c6c:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <xPortSysTickHandler+0x40>)
 8006c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	2300      	movs	r3, #0
 8006c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f383 8811 	msr	BASEPRI, r3
}
 8006c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c80:	bf00      	nop
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	e000ed04 	.word	0xe000ed04

08006c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c90:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <vPortSetupTimerInterrupt+0x30>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c96:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <vPortSetupTimerInterrupt+0x34>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c9c:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <vPortSetupTimerInterrupt+0x38>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a09      	ldr	r2, [pc, #36]	; (8006cc8 <vPortSetupTimerInterrupt+0x3c>)
 8006ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca6:	099b      	lsrs	r3, r3, #6
 8006ca8:	4a08      	ldr	r2, [pc, #32]	; (8006ccc <vPortSetupTimerInterrupt+0x40>)
 8006caa:	3b01      	subs	r3, #1
 8006cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cae:	4b03      	ldr	r3, [pc, #12]	; (8006cbc <vPortSetupTimerInterrupt+0x30>)
 8006cb0:	2207      	movs	r2, #7
 8006cb2:	601a      	str	r2, [r3, #0]
}
 8006cb4:	bf00      	nop
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bc80      	pop	{r7}
 8006cba:	4770      	bx	lr
 8006cbc:	e000e010 	.word	0xe000e010
 8006cc0:	e000e018 	.word	0xe000e018
 8006cc4:	20000024 	.word	0x20000024
 8006cc8:	10624dd3 	.word	0x10624dd3
 8006ccc:	e000e014 	.word	0xe000e014

08006cd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006cd6:	f3ef 8305 	mrs	r3, IPSR
 8006cda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b0f      	cmp	r3, #15
 8006ce0:	d914      	bls.n	8006d0c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ce2:	4a16      	ldr	r2, [pc, #88]	; (8006d3c <vPortValidateInterruptPriority+0x6c>)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006cec:	4b14      	ldr	r3, [pc, #80]	; (8006d40 <vPortValidateInterruptPriority+0x70>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	7afa      	ldrb	r2, [r7, #11]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d20a      	bcs.n	8006d0c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	607b      	str	r3, [r7, #4]
}
 8006d08:	bf00      	nop
 8006d0a:	e7fe      	b.n	8006d0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d0c:	4b0d      	ldr	r3, [pc, #52]	; (8006d44 <vPortValidateInterruptPriority+0x74>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d14:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <vPortValidateInterruptPriority+0x78>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d90a      	bls.n	8006d32 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	603b      	str	r3, [r7, #0]
}
 8006d2e:	bf00      	nop
 8006d30:	e7fe      	b.n	8006d30 <vPortValidateInterruptPriority+0x60>
	}
 8006d32:	bf00      	nop
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr
 8006d3c:	e000e3f0 	.word	0xe000e3f0
 8006d40:	20002f54 	.word	0x20002f54
 8006d44:	e000ed0c 	.word	0xe000ed0c
 8006d48:	20002f58 	.word	0x20002f58

08006d4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	; 0x28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d58:	f7fe fd4a 	bl	80057f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d5c:	4b58      	ldr	r3, [pc, #352]	; (8006ec0 <pvPortMalloc+0x174>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d64:	f000 f910 	bl	8006f88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d68:	4b56      	ldr	r3, [pc, #344]	; (8006ec4 <pvPortMalloc+0x178>)
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f040 808e 	bne.w	8006e92 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d01d      	beq.n	8006db8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4413      	add	r3, r2
 8006d82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d014      	beq.n	8006db8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f023 0307 	bic.w	r3, r3, #7
 8006d94:	3308      	adds	r3, #8
 8006d96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <pvPortMalloc+0x6c>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	617b      	str	r3, [r7, #20]
}
 8006db4:	bf00      	nop
 8006db6:	e7fe      	b.n	8006db6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d069      	beq.n	8006e92 <pvPortMalloc+0x146>
 8006dbe:	4b42      	ldr	r3, [pc, #264]	; (8006ec8 <pvPortMalloc+0x17c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d864      	bhi.n	8006e92 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006dc8:	4b40      	ldr	r3, [pc, #256]	; (8006ecc <pvPortMalloc+0x180>)
 8006dca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dcc:	4b3f      	ldr	r3, [pc, #252]	; (8006ecc <pvPortMalloc+0x180>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dd2:	e004      	b.n	8006dde <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d903      	bls.n	8006df0 <pvPortMalloc+0xa4>
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1f1      	bne.n	8006dd4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006df0:	4b33      	ldr	r3, [pc, #204]	; (8006ec0 <pvPortMalloc+0x174>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d04b      	beq.n	8006e92 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2208      	movs	r2, #8
 8006e00:	4413      	add	r3, r2
 8006e02:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	1ad2      	subs	r2, r2, r3
 8006e14:	2308      	movs	r3, #8
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d91f      	bls.n	8006e5c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4413      	add	r3, r2
 8006e22:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <pvPortMalloc+0xf8>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	613b      	str	r3, [r7, #16]
}
 8006e40:	bf00      	nop
 8006e42:	e7fe      	b.n	8006e42 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	1ad2      	subs	r2, r2, r3
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e56:	69b8      	ldr	r0, [r7, #24]
 8006e58:	f000 f8f8 	bl	800704c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e5c:	4b1a      	ldr	r3, [pc, #104]	; (8006ec8 <pvPortMalloc+0x17c>)
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	4a18      	ldr	r2, [pc, #96]	; (8006ec8 <pvPortMalloc+0x17c>)
 8006e68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e6a:	4b17      	ldr	r3, [pc, #92]	; (8006ec8 <pvPortMalloc+0x17c>)
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	4b18      	ldr	r3, [pc, #96]	; (8006ed0 <pvPortMalloc+0x184>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d203      	bcs.n	8006e7e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e76:	4b14      	ldr	r3, [pc, #80]	; (8006ec8 <pvPortMalloc+0x17c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a15      	ldr	r2, [pc, #84]	; (8006ed0 <pvPortMalloc+0x184>)
 8006e7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	4b10      	ldr	r3, [pc, #64]	; (8006ec4 <pvPortMalloc+0x178>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e92:	f7fe fcbb 	bl	800580c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	f003 0307 	and.w	r3, r3, #7
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00a      	beq.n	8006eb6 <pvPortMalloc+0x16a>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	60fb      	str	r3, [r7, #12]
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <pvPortMalloc+0x168>
	return pvReturn;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3728      	adds	r7, #40	; 0x28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20003b64 	.word	0x20003b64
 8006ec4:	20003b70 	.word	0x20003b70
 8006ec8:	20003b68 	.word	0x20003b68
 8006ecc:	20003b5c 	.word	0x20003b5c
 8006ed0:	20003b6c 	.word	0x20003b6c

08006ed4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d048      	beq.n	8006f78 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ee6:	2308      	movs	r3, #8
 8006ee8:	425b      	negs	r3, r3
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	4413      	add	r3, r2
 8006eee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	4b21      	ldr	r3, [pc, #132]	; (8006f80 <vPortFree+0xac>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4013      	ands	r3, r2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10a      	bne.n	8006f18 <vPortFree+0x44>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	60fb      	str	r3, [r7, #12]
}
 8006f14:	bf00      	nop
 8006f16:	e7fe      	b.n	8006f16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00a      	beq.n	8006f36 <vPortFree+0x62>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	60bb      	str	r3, [r7, #8]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <vPortFree+0xac>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d019      	beq.n	8006f78 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d115      	bne.n	8006f78 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <vPortFree+0xac>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	43db      	mvns	r3, r3
 8006f56:	401a      	ands	r2, r3
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f5c:	f7fe fc48 	bl	80057f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <vPortFree+0xb0>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4413      	add	r3, r2
 8006f6a:	4a06      	ldr	r2, [pc, #24]	; (8006f84 <vPortFree+0xb0>)
 8006f6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f6e:	6938      	ldr	r0, [r7, #16]
 8006f70:	f000 f86c 	bl	800704c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006f74:	f7fe fc4a 	bl	800580c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f78:	bf00      	nop
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20003b70 	.word	0x20003b70
 8006f84:	20003b68 	.word	0x20003b68

08006f88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006f92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f94:	4b27      	ldr	r3, [pc, #156]	; (8007034 <prvHeapInit+0xac>)
 8006f96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00c      	beq.n	8006fbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3307      	adds	r3, #7
 8006fa6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0307 	bic.w	r3, r3, #7
 8006fae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	4a1f      	ldr	r2, [pc, #124]	; (8007034 <prvHeapInit+0xac>)
 8006fb8:	4413      	add	r3, r2
 8006fba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fc0:	4a1d      	ldr	r2, [pc, #116]	; (8007038 <prvHeapInit+0xb0>)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fc6:	4b1c      	ldr	r3, [pc, #112]	; (8007038 <prvHeapInit+0xb0>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fd4:	2208      	movs	r2, #8
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	1a9b      	subs	r3, r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0307 	bic.w	r3, r3, #7
 8006fe2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4a15      	ldr	r2, [pc, #84]	; (800703c <prvHeapInit+0xb4>)
 8006fe8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fea:	4b14      	ldr	r3, [pc, #80]	; (800703c <prvHeapInit+0xb4>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ff2:	4b12      	ldr	r3, [pc, #72]	; (800703c <prvHeapInit+0xb4>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	1ad2      	subs	r2, r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007008:	4b0c      	ldr	r3, [pc, #48]	; (800703c <prvHeapInit+0xb4>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	4a0a      	ldr	r2, [pc, #40]	; (8007040 <prvHeapInit+0xb8>)
 8007016:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	4a09      	ldr	r2, [pc, #36]	; (8007044 <prvHeapInit+0xbc>)
 800701e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007020:	4b09      	ldr	r3, [pc, #36]	; (8007048 <prvHeapInit+0xc0>)
 8007022:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007026:	601a      	str	r2, [r3, #0]
}
 8007028:	bf00      	nop
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	20002f5c 	.word	0x20002f5c
 8007038:	20003b5c 	.word	0x20003b5c
 800703c:	20003b64 	.word	0x20003b64
 8007040:	20003b6c 	.word	0x20003b6c
 8007044:	20003b68 	.word	0x20003b68
 8007048:	20003b70 	.word	0x20003b70

0800704c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007054:	4b27      	ldr	r3, [pc, #156]	; (80070f4 <prvInsertBlockIntoFreeList+0xa8>)
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	e002      	b.n	8007060 <prvInsertBlockIntoFreeList+0x14>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	429a      	cmp	r2, r3
 8007068:	d8f7      	bhi.n	800705a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	4413      	add	r3, r2
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	d108      	bne.n	800708e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	441a      	add	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d118      	bne.n	80070d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4b14      	ldr	r3, [pc, #80]	; (80070f8 <prvInsertBlockIntoFreeList+0xac>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d00d      	beq.n	80070ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	441a      	add	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	e008      	b.n	80070dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070ca:	4b0b      	ldr	r3, [pc, #44]	; (80070f8 <prvInsertBlockIntoFreeList+0xac>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	e003      	b.n	80070dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d002      	beq.n	80070ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr
 80070f4:	20003b5c 	.word	0x20003b5c
 80070f8:	20003b64 	.word	0x20003b64

080070fc <__libc_init_array>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	2600      	movs	r6, #0
 8007100:	4d0c      	ldr	r5, [pc, #48]	; (8007134 <__libc_init_array+0x38>)
 8007102:	4c0d      	ldr	r4, [pc, #52]	; (8007138 <__libc_init_array+0x3c>)
 8007104:	1b64      	subs	r4, r4, r5
 8007106:	10a4      	asrs	r4, r4, #2
 8007108:	42a6      	cmp	r6, r4
 800710a:	d109      	bne.n	8007120 <__libc_init_array+0x24>
 800710c:	f000 f8f0 	bl	80072f0 <_init>
 8007110:	2600      	movs	r6, #0
 8007112:	4d0a      	ldr	r5, [pc, #40]	; (800713c <__libc_init_array+0x40>)
 8007114:	4c0a      	ldr	r4, [pc, #40]	; (8007140 <__libc_init_array+0x44>)
 8007116:	1b64      	subs	r4, r4, r5
 8007118:	10a4      	asrs	r4, r4, #2
 800711a:	42a6      	cmp	r6, r4
 800711c:	d105      	bne.n	800712a <__libc_init_array+0x2e>
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	f855 3b04 	ldr.w	r3, [r5], #4
 8007124:	4798      	blx	r3
 8007126:	3601      	adds	r6, #1
 8007128:	e7ee      	b.n	8007108 <__libc_init_array+0xc>
 800712a:	f855 3b04 	ldr.w	r3, [r5], #4
 800712e:	4798      	blx	r3
 8007130:	3601      	adds	r6, #1
 8007132:	e7f2      	b.n	800711a <__libc_init_array+0x1e>
 8007134:	0800745c 	.word	0x0800745c
 8007138:	0800745c 	.word	0x0800745c
 800713c:	0800745c 	.word	0x0800745c
 8007140:	08007460 	.word	0x08007460

08007144 <__retarget_lock_acquire_recursive>:
 8007144:	4770      	bx	lr

08007146 <__retarget_lock_release_recursive>:
 8007146:	4770      	bx	lr

08007148 <memcpy>:
 8007148:	440a      	add	r2, r1
 800714a:	4291      	cmp	r1, r2
 800714c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007150:	d100      	bne.n	8007154 <memcpy+0xc>
 8007152:	4770      	bx	lr
 8007154:	b510      	push	{r4, lr}
 8007156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800715a:	4291      	cmp	r1, r2
 800715c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007160:	d1f9      	bne.n	8007156 <memcpy+0xe>
 8007162:	bd10      	pop	{r4, pc}

08007164 <memset>:
 8007164:	4603      	mov	r3, r0
 8007166:	4402      	add	r2, r0
 8007168:	4293      	cmp	r3, r2
 800716a:	d100      	bne.n	800716e <memset+0xa>
 800716c:	4770      	bx	lr
 800716e:	f803 1b01 	strb.w	r1, [r3], #1
 8007172:	e7f9      	b.n	8007168 <memset+0x4>

08007174 <cleanup_glue>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	460c      	mov	r4, r1
 8007178:	6809      	ldr	r1, [r1, #0]
 800717a:	4605      	mov	r5, r0
 800717c:	b109      	cbz	r1, 8007182 <cleanup_glue+0xe>
 800717e:	f7ff fff9 	bl	8007174 <cleanup_glue>
 8007182:	4621      	mov	r1, r4
 8007184:	4628      	mov	r0, r5
 8007186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800718a:	f000 b869 	b.w	8007260 <_free_r>
	...

08007190 <_reclaim_reent>:
 8007190:	4b2c      	ldr	r3, [pc, #176]	; (8007244 <_reclaim_reent+0xb4>)
 8007192:	b570      	push	{r4, r5, r6, lr}
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4604      	mov	r4, r0
 8007198:	4283      	cmp	r3, r0
 800719a:	d051      	beq.n	8007240 <_reclaim_reent+0xb0>
 800719c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800719e:	b143      	cbz	r3, 80071b2 <_reclaim_reent+0x22>
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d14a      	bne.n	800723c <_reclaim_reent+0xac>
 80071a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071a8:	6819      	ldr	r1, [r3, #0]
 80071aa:	b111      	cbz	r1, 80071b2 <_reclaim_reent+0x22>
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 f857 	bl	8007260 <_free_r>
 80071b2:	6961      	ldr	r1, [r4, #20]
 80071b4:	b111      	cbz	r1, 80071bc <_reclaim_reent+0x2c>
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 f852 	bl	8007260 <_free_r>
 80071bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80071be:	b111      	cbz	r1, 80071c6 <_reclaim_reent+0x36>
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 f84d 	bl	8007260 <_free_r>
 80071c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80071c8:	b111      	cbz	r1, 80071d0 <_reclaim_reent+0x40>
 80071ca:	4620      	mov	r0, r4
 80071cc:	f000 f848 	bl	8007260 <_free_r>
 80071d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80071d2:	b111      	cbz	r1, 80071da <_reclaim_reent+0x4a>
 80071d4:	4620      	mov	r0, r4
 80071d6:	f000 f843 	bl	8007260 <_free_r>
 80071da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80071dc:	b111      	cbz	r1, 80071e4 <_reclaim_reent+0x54>
 80071de:	4620      	mov	r0, r4
 80071e0:	f000 f83e 	bl	8007260 <_free_r>
 80071e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80071e6:	b111      	cbz	r1, 80071ee <_reclaim_reent+0x5e>
 80071e8:	4620      	mov	r0, r4
 80071ea:	f000 f839 	bl	8007260 <_free_r>
 80071ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80071f0:	b111      	cbz	r1, 80071f8 <_reclaim_reent+0x68>
 80071f2:	4620      	mov	r0, r4
 80071f4:	f000 f834 	bl	8007260 <_free_r>
 80071f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071fa:	b111      	cbz	r1, 8007202 <_reclaim_reent+0x72>
 80071fc:	4620      	mov	r0, r4
 80071fe:	f000 f82f 	bl	8007260 <_free_r>
 8007202:	69a3      	ldr	r3, [r4, #24]
 8007204:	b1e3      	cbz	r3, 8007240 <_reclaim_reent+0xb0>
 8007206:	4620      	mov	r0, r4
 8007208:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800720a:	4798      	blx	r3
 800720c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800720e:	b1b9      	cbz	r1, 8007240 <_reclaim_reent+0xb0>
 8007210:	4620      	mov	r0, r4
 8007212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007216:	f7ff bfad 	b.w	8007174 <cleanup_glue>
 800721a:	5949      	ldr	r1, [r1, r5]
 800721c:	b941      	cbnz	r1, 8007230 <_reclaim_reent+0xa0>
 800721e:	3504      	adds	r5, #4
 8007220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007222:	2d80      	cmp	r5, #128	; 0x80
 8007224:	68d9      	ldr	r1, [r3, #12]
 8007226:	d1f8      	bne.n	800721a <_reclaim_reent+0x8a>
 8007228:	4620      	mov	r0, r4
 800722a:	f000 f819 	bl	8007260 <_free_r>
 800722e:	e7ba      	b.n	80071a6 <_reclaim_reent+0x16>
 8007230:	680e      	ldr	r6, [r1, #0]
 8007232:	4620      	mov	r0, r4
 8007234:	f000 f814 	bl	8007260 <_free_r>
 8007238:	4631      	mov	r1, r6
 800723a:	e7ef      	b.n	800721c <_reclaim_reent+0x8c>
 800723c:	2500      	movs	r5, #0
 800723e:	e7ef      	b.n	8007220 <_reclaim_reent+0x90>
 8007240:	bd70      	pop	{r4, r5, r6, pc}
 8007242:	bf00      	nop
 8007244:	20000034 	.word	0x20000034

08007248 <__malloc_lock>:
 8007248:	4801      	ldr	r0, [pc, #4]	; (8007250 <__malloc_lock+0x8>)
 800724a:	f7ff bf7b 	b.w	8007144 <__retarget_lock_acquire_recursive>
 800724e:	bf00      	nop
 8007250:	20003b74 	.word	0x20003b74

08007254 <__malloc_unlock>:
 8007254:	4801      	ldr	r0, [pc, #4]	; (800725c <__malloc_unlock+0x8>)
 8007256:	f7ff bf76 	b.w	8007146 <__retarget_lock_release_recursive>
 800725a:	bf00      	nop
 800725c:	20003b74 	.word	0x20003b74

08007260 <_free_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4605      	mov	r5, r0
 8007264:	2900      	cmp	r1, #0
 8007266:	d040      	beq.n	80072ea <_free_r+0x8a>
 8007268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800726c:	1f0c      	subs	r4, r1, #4
 800726e:	2b00      	cmp	r3, #0
 8007270:	bfb8      	it	lt
 8007272:	18e4      	addlt	r4, r4, r3
 8007274:	f7ff ffe8 	bl	8007248 <__malloc_lock>
 8007278:	4a1c      	ldr	r2, [pc, #112]	; (80072ec <_free_r+0x8c>)
 800727a:	6813      	ldr	r3, [r2, #0]
 800727c:	b933      	cbnz	r3, 800728c <_free_r+0x2c>
 800727e:	6063      	str	r3, [r4, #4]
 8007280:	6014      	str	r4, [r2, #0]
 8007282:	4628      	mov	r0, r5
 8007284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007288:	f7ff bfe4 	b.w	8007254 <__malloc_unlock>
 800728c:	42a3      	cmp	r3, r4
 800728e:	d908      	bls.n	80072a2 <_free_r+0x42>
 8007290:	6820      	ldr	r0, [r4, #0]
 8007292:	1821      	adds	r1, r4, r0
 8007294:	428b      	cmp	r3, r1
 8007296:	bf01      	itttt	eq
 8007298:	6819      	ldreq	r1, [r3, #0]
 800729a:	685b      	ldreq	r3, [r3, #4]
 800729c:	1809      	addeq	r1, r1, r0
 800729e:	6021      	streq	r1, [r4, #0]
 80072a0:	e7ed      	b.n	800727e <_free_r+0x1e>
 80072a2:	461a      	mov	r2, r3
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	b10b      	cbz	r3, 80072ac <_free_r+0x4c>
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	d9fa      	bls.n	80072a2 <_free_r+0x42>
 80072ac:	6811      	ldr	r1, [r2, #0]
 80072ae:	1850      	adds	r0, r2, r1
 80072b0:	42a0      	cmp	r0, r4
 80072b2:	d10b      	bne.n	80072cc <_free_r+0x6c>
 80072b4:	6820      	ldr	r0, [r4, #0]
 80072b6:	4401      	add	r1, r0
 80072b8:	1850      	adds	r0, r2, r1
 80072ba:	4283      	cmp	r3, r0
 80072bc:	6011      	str	r1, [r2, #0]
 80072be:	d1e0      	bne.n	8007282 <_free_r+0x22>
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	4401      	add	r1, r0
 80072c6:	6011      	str	r1, [r2, #0]
 80072c8:	6053      	str	r3, [r2, #4]
 80072ca:	e7da      	b.n	8007282 <_free_r+0x22>
 80072cc:	d902      	bls.n	80072d4 <_free_r+0x74>
 80072ce:	230c      	movs	r3, #12
 80072d0:	602b      	str	r3, [r5, #0]
 80072d2:	e7d6      	b.n	8007282 <_free_r+0x22>
 80072d4:	6820      	ldr	r0, [r4, #0]
 80072d6:	1821      	adds	r1, r4, r0
 80072d8:	428b      	cmp	r3, r1
 80072da:	bf01      	itttt	eq
 80072dc:	6819      	ldreq	r1, [r3, #0]
 80072de:	685b      	ldreq	r3, [r3, #4]
 80072e0:	1809      	addeq	r1, r1, r0
 80072e2:	6021      	streq	r1, [r4, #0]
 80072e4:	6063      	str	r3, [r4, #4]
 80072e6:	6054      	str	r4, [r2, #4]
 80072e8:	e7cb      	b.n	8007282 <_free_r+0x22>
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	20003b78 	.word	0x20003b78

080072f0 <_init>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr

080072fc <_fini>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr
